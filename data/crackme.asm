;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 6E-80A5-DD89-42			    |
; |				 Licensed User				    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 6E-80A5-DD89-42			    |
; |				 Licensed User				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	34D38A5E7751FF5AD1F1A1C8CF92BEF1

; File Name   :	C:\Users\maxsen-pc\IdeaProjects\MalFeatureExtract\MalFeatureExtract\data\crackme.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000630A (  25354.)
; Section size in file		: 00006400 (  25600.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_401000	dd 1, 4	dup(0)		; DATA XREF: sub_4055B0+5Fo
		db 0CCh
		db 4, 2	dup(0)
		dd 0
		dd 2, 0
		dd 2, 5, 43425844h, 0E1809F15h,	10B143A0h, 7E1A16Fh, 6474AFA8h
		dd 1, 4CCh, 5, 34h, 1A4h, 1B4h,	1C4h, 430h, 46454452h
		dd 168h, 1, 0C4h, 3, 3Ch, 43530500h, 8E100h, 140h, 31314452h
		dd 3Ch,	18h, 20h, 28h, 24h, 0Ch, 0
		dd 9Ch,	8, 6, 1, 2 dup(0)
		dd 2 dup(1), 0ACh, 8, 6, 1, 0
		dd 3 dup(1), 0BCh, 4 dup(0)
		dd 3 dup(1), 5F56475Fh,	66667562h, 725F7265h, 305F77h
		dd 5F56475Fh, 66667562h, 725F7265h, 315F77h, 315F4243h
		dd 0ABABAB00h, 0BCh, 1,	0DCh, 1C0h, 2 dup(0)
		dd 104h, 0
		dd 1B4h, 2, 11Ch, 0
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 0
a_const_buffer_	db '_const_buffer_1',0
aDword		db 'dword',0
aLl		db 'лл',0
		align 2
		dw 13h
		dd 10001h, 1Ch,	5 dup(0)
		dd 114h, 7263694Dh, 666F736Fh, 52282074h, 4C482029h, 53204C53h
		dd 65646168h, 6F432072h, 6C69706Dh, 31207265h, 312E30h
		dd 4E475349h, 8, 0
		dd 8, 4E47534Fh, 8, 0
		dd 8, 58454853h, 264h, 50050h, 99h, 100086Ah, 4000059h
		dd 208E46h, 1, 18h, 300009Dh, 11E000h, 0
		dd 300009Dh, 11E000h, 1, 200005Fh, 20072h, 2000068h, 2
		dd 400009Bh, 20h, 8, 1,	8080026h, 0D000h, 100012h, 0
		dd 2002Ah, 20800Ah, 1, 0
		dd 9080023h, 100012h, 0
		dd 2001Ah, 20800Ah, 2 dup(1), 10000Ah, 0
		dd 608001Eh, 100012h, 0
		dd 10000Ah, 0
		dd 2000Ah, 810004Fh, 100022h, 0
		dd 10000Ah, 0
		dd 20800Ah, 1, 2, 304001Fh, 10001Ah, 0
		dd 0A08004Eh, 100012h, 0
		dd 100012h, 1, 10000Ah,	0
		dd 20800Ah, 1, 4, 810001Eh, 100022h, 0
		dd 10000Ah, 1, 20800Ah,	1, 15h,	810001Eh, 100022h, 0
		dd 10001Ah, 0
		dd 20800Ah, 1, 17h, 7100029h, 100022h, 0
		dd 10001Ah, 0
		dd 4001h, 2, 891000A5h,	800002C2h, 199983h, 100022h, 0
		dd 10001Ah, 0
		dd 11E006h, 1, 7100055h, 100022h, 0
		dd 10001Ah, 0
		dd 10000Ah, 0
		dd 7100001h, 100022h, 0
		dd 10001Ah, 0
		dd 4001h, 1, 0B080023h,	100012h, 0
		dd 20800Ah, 1, 7, 10000Ah, 0
		dd 20800Ah, 1, 0Bh, 708001Eh, 100012h, 0
		dd 10000Ah, 1, 10000Ah,	0
		dd 808001Eh, 100012h, 0
		dd 10000Ah, 0
		dd 20800Ah, 1, 0Eh, 7080029h, 100012h, 0
		dd 10000Ah, 0
		dd 4001h, 2, 70000A6h, 11E012h,	0
		dd 10000Ah, 0
		dd 10001Ah, 0
		dd 1000015h, 100003Eh, 54415453h, 94h, 13h, 2, 0
		dd 1, 0
		dd 0Ah,	3, 2 dup(1), 6 dup(0)
		dd 1, 14h dup(0)
		dd 1, 2	dup(0CCCCCCCCh)
dword_401500	dd 1, 4	dup(0)		; DATA XREF: sub_405760+7Eo
		dd 714h, 0
		dd 3, 0
		dd 2 dup(5), 1,	43425844h, 49841693h, 0BD2A3DE9h, 0C0EB054Eh
		dd 0ECD22DC2h, 1, 714h,	5, 34h,	1D4h, 1E4h, 1F4h, 678h
		dd 46454452h, 198h, 1, 0F4h, 4,	3Ch, 43530500h,	8E100h
		dd 170h, 31314452h, 3Ch, 18h, 20h, 28h,	24h, 0Ch, 0
		dd 0BCh, 8, 6, 1, 2 dup(0)
		dd 2 dup(1), 0CCh, 8, 6, 1, 0
		dd 3 dup(1), 0DCh, 8, 6, 1, 0
		dd 2, 2	dup(1),	0ECh, 4	dup(0)
		dd 3 dup(1), 5F56475Fh,	66667562h, 725F7265h, 305F77h
		dd 5F56475Fh, 66667562h, 725F7265h, 315F77h, 5F56475Fh
		dd 66667562h, 725F7265h, 325F77h, 315F4243h, 0ABABAB00h
		dd 0ECh, 1, 10Ch, 290h,	2 dup(0)
		dd 134h, 0
		dd 284h, 2, 14Ch, 0
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 0
a_const_buffe_0	db '_const_buffer_1',0
aDword_0	db 'dword',0
aLl_0		db 'лл',0
		align 2
		dw 13h
		dd 10001h, 29h,	5 dup(0)
		dd 144h, 7263694Dh, 666F736Fh, 52282074h, 4C482029h, 53204C53h
		dd 65646168h, 6F432072h, 6C69706Dh, 31207265h, 312E30h
		dd 4E475349h, 8, 0
		dd 8, 4E47534Fh, 8, 0
		dd 8, 58454853h, 47Ch, 50050h, 11Fh, 100086Ah, 4000059h
		dd 208E46h, 1, 25h, 300009Dh, 11E000h, 0
		dd 300009Dh, 11E000h, 1, 300009Dh, 11E000h, 2, 200005Fh
		dd 20072h, 2000068h, 3,	4000069h, 0
		dd 3, 4, 400009Bh, 20h,	8, 1, 8080026h,	0D000h,	100012h
		dd 0
		dd 2002Ah, 20800Ah, 1, 0
		dd 9080023h, 100012h, 0
		dd 2001Ah, 20800Ah, 2 dup(1), 10000Ah, 0
		dd 608001Eh, 100012h, 0
		dd 10000Ah, 0
		dd 2000Ah, 810004Fh, 100022h, 0
		dd 10000Ah, 0
		dd 20800Ah, 1, 2, 304001Fh, 10001Ah, 0
		dd 0A08004Eh, 100012h, 0
		dd 100012h, 1, 10000Ah,	0
		dd 20800Ah, 1, 4, 6080036h, 203012h, 2 dup(0)
		dd 4001h, 0D76AA478h, 6080036h,	203012h, 0
		dd 1, 4001h, 0E8C7B756h, 6080036h, 203012h, 0
		dd 2, 4001h, 242070DBh,	810001Eh, 100022h, 0
		dd 10000Ah, 1, 20800Ah,	1, 0Bh,	810001Eh, 100022h, 0
		dd 10001Ah, 0
		dd 20800Ah, 1, 0Eh, 820001Eh, 100042h, 0
		dd 10000Ah, 0
		dd 20800Ah, 1, 18h, 820001Eh, 100042h, 0
		dd 10002Ah, 0
		dd 20800Ah, 1, 1Bh, 5400036h, 100082h, 0
		dd 4001h, 0
		dd 5100036h, 100022h, 1, 4001h,	20h, 5600036h, 1000C2h
		dd 1, 100956h, 0
		dd 5080036h, 100012h, 2, 4001h,	0FFFFFFFFh, 1000030h, 3000003h
		dd 10000Ah, 2, 0A300029h, 100062h, 2, 100EF6h, 1, 4002h
		dd 0
		dd 2 dup(2), 0
		dd 891000A5h, 800002C2h, 199983h, 100022h, 2, 10001Ah
		dd 2, 11E006h, 1, 892000A5h, 800002C2h,	199983h, 100042h
		dd 2, 10002Ah, 2, 11E006h, 0
		dd 9400023h, 100082h, 0
		dd 10001Ah, 2, 10002Ah,	2, 10003Ah, 0
		dd 840001Eh, 100082h, 1, 10003Ah, 1, 20800Ah, 1, 14h, 820001Eh
		dd 100042h, 1, 10002Ah,	1, 20800Ah, 1, 7, 710001Eh, 100022h
		dd 1, 10001Ah, 1, 4001h, 0FFFFFFFFh, 708004Fh, 100012h
		dd 2, 4001h, 0
		dd 10001Ah, 1, 1000016h, 7100029h, 100022h, 0
		dd 4001h, 1, 10000Ah, 0
		dd 7200036h, 100042h, 0
		dd 420300Ah, 0
		dd 10000Ah, 1, 7100001h, 100022h, 0
		dd 10001Ah, 0
		dd 10002Ah, 0
		dd 0B08008Ch, 100012h, 0
		dd 4001h, 1, 10000Ah, 0
		dd 10003Ah, 0
		dd 4001h, 0
		dd 7080057h, 100012h, 0
		dd 10000Ah, 0
		dd 10001Ah, 0
		dd 810001Eh, 100022h, 0
		dd 10000Ah, 1, 20800Ah,	1, 22h,	810001Eh, 100022h, 0
		dd 10001Ah, 0
		dd 20800Ah, 1, 24h, 7100029h, 100022h, 0
		dd 10001Ah, 0
		dd 4001h, 2, 90800B7h, 100012h,	0
		dd 11E000h, 2, 10001Ah,	0
		dd 10000Ah, 0
		dd 1000015h, 100003Eh, 54415453h, 94h, 27h, 3, 0
		dd 1, 0
		dd 10h,	4, 1, 2, 0
		dd 3, 4, 3 dup(0)
		dd 2, 3	dup(0)
		dd 4, 0Fh dup(0)
		dd 1, 0
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401C50	proc near		; DATA XREF: .rdata:00408218o
		mov	ecx, offset Dst
		call	sub_4059A0
		push	7DDh		; Size
		push	ecx		; int
		mov	dword_432394, 0Fh
		mov	Size, 0
		mov	byte ptr Dst, 0
		call	sub_404110
		push	offset sub_407300
		call	sub_405E34
		pop	ecx
		retn
sub_401C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401C90	proc near		; CODE XREF: sub_4060B6+9p
					; sub_4060E9+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		xorps	xmm0, xmm0
		lea	eax, [esi+4]
		push	eax
		mov	dword ptr [esi], offset	off_40824C
		movq	qword ptr [eax], xmm0
		mov	eax, [esp+8+arg_0]
		add	eax, 4
		push	eax
		call	ds:__std_exception_copy
		add	esp, 8
		mov	eax, esi
		pop	esi
		retn	4
sub_401C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401CC0	proc near		; DATA XREF: .rdata:00408250o
					; .rdata:0040825Co ...
		mov	ecx, [ecx+4]
		mov	eax, offset aUnknownExcepti ; "Unknown exception"
		test	ecx, ecx
		cmovnz	eax, ecx
		retn
sub_401CC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_401CD0(void *Memory, char)
sub_401CD0	proc near		; DATA XREF: .rdata:off_40824Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+4]
		mov	dword ptr [esi], offset	off_40824C
		push	eax
		call	ds:__imp___std_exception_destroy
		add	esp, 4
		test	[esp+4+arg_0], 1
		jz	short loc_401CF8
		push	0Ch
		push	esi		; Memory
		call	sub_405E4E
		add	esp, 8

loc_401CF8:				; CODE XREF: sub_401CD0+1Bj
		mov	eax, esi
		pop	esi
		retn	4
sub_401CD0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_407170

loc_401D00:				; CODE XREF: sub_407170+13j
					; sub_407200+13j
		push	ecx
		call	ds:?__ExceptionPtrDestroy@@YAXPAX@Z ; __ExceptionPtrDestroy(void *)
		pop	ecx
		retn
; END OF FUNCTION CHUNK	FOR sub_407170
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401D10	proc near		; CODE XREF: sub_401D30+3p
		push	esi
		mov	esi, ecx
		push	esi
		call	ds:?__ExceptionPtrCreate@@YAXPAX@Z ; __ExceptionPtrCreate(void *)
		push	esi
		call	ds:?__ExceptionPtrCurrentException@@YAXPAX@Z ; __ExceptionPtrCurrentException(void *)
		add	esp, 8
		mov	eax, esi
		pop	esi
		retn
sub_401D10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401D30	proc near		; CODE XREF: sub_404270+2Fp
					; sub_404560+2Fp
		push	esi
		mov	esi, ecx
		call	sub_401D10
		mov	eax, esi
		pop	esi
		retn
sub_401D30	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_407070

loc_401D40:				; CODE XREF: sub_407070+6j
					; sub_4070A4+3j ...
		push	ecx
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_401D63
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_401D5C
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_401D5C:				; CODE XREF: sub_407070-531Cj
		mov	dword ptr [esi+4], 0

loc_401D63:				; CODE XREF: sub_407070-5327j
		pop	esi
		pop	ecx
		retn
; END OF FUNCTION CHUNK	FOR sub_407070
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401D70	proc near		; CODE XREF: sub_403690+64p
					; sub_403750+64p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_401D70
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 8
		push	esi
		push	edi
		mov	edi, ecx
		mov	[ebp+var_14], 0
		mov	esi, edx
		mov	[ebp+var_10], edi
		push	0
		push	[ebp+arg_4]
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_4], 0
		push	[ebp+arg_0]
		sub	esp, 8
		mov	ecx, esp
		push	eax
		call	ds:??0accelerator_view@Concurrency@@QAE@ABV01@@Z ; Concurrency::accelerator_view::accelerator_view(accelerator_view::accelerator_view const &)
		mov	ecx, [esi+4]
		push	esi
		push	edi
		call	ds:?_Get_access_async@_Ubiquitous_buffer@details@Concurrency@@AAE?AV_Event@23@PAU_Buffer_descriptor@23@Vaccelerator_view@3@W4_Access_mode@@AAV?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@PA_K@Z ; Concurrency::details::_Ubiquitous_buffer::_Get_access_async(Concurrency::details::_Buffer_descriptor *,Concurrency::accelerator_view,_Access_mode,Concurrency::details::_Reference_counted_obj_ptr<Concurrency::details::_Buffer>	&,unsigned __int64 *)
		lea	ecx, [ebp+arg_8]
		call	ds:??1accelerator_view@Concurrency@@QAE@XZ ; Concurrency::accelerator_view::~accelerator_view(void)
		mov	ecx, [ebp+var_C]
		mov	eax, edi
		pop	edi
		mov	large fs:0, ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	10h
sub_401D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401DF0	proc near		; CODE XREF: sub_4034B0+110p
		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		xor	bl, bl
		xor	eax, eax
		mov	edx, offset dword_412144
		lea	ebp, [esi+10h]
		cmp	esi, ebp
		jnb	short loc_401E7A
		push	edi
		nop	word ptr [eax+eax+00000000h]

loc_401E10:				; CODE XREF: sub_401DF0+65j
		movsx	ecx, byte ptr [esi]
		inc	esi
		mov	cl, ds:byte_408C20[ecx]
		movzx	edi, cl
		mov	ecx, edi
		sub	ecx, 40h
		jz	short loc_401E53
		sub	ecx, 1
		jz	short loc_401E57
		sub	ecx, 1
		jz	short loc_401E79
		shl	eax, 6
		inc	bl
		or	eax, edi
		cmp	bl, 4
		jnz	short loc_401E53
		mov	ecx, eax
		shr	ecx, 10h
		mov	[edx], cl
		mov	ecx, eax
		shr	ecx, 8
		mov	[edx+1], cl
		mov	[edx+2], al
		add	edx, 3
		xor	eax, eax
		xor	bl, bl

loc_401E53:				; CODE XREF: sub_401DF0+32j
					; sub_401DF0+48j
		cmp	esi, ebp
		jb	short loc_401E10

loc_401E57:				; CODE XREF: sub_401DF0+37j
		cmp	bl, 3
		jnz	short loc_401E6F
		pop	edi
		mov	ecx, eax
		pop	esi
		shr	ecx, 0Ah
		shr	eax, 2
		pop	ebp
		mov	[edx], cl
		mov	[edx+1], al
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_401E6F:				; CODE XREF: sub_401DF0+6Aj
		cmp	bl, 2
		jnz	short loc_401E79
		shr	eax, 4
		mov	[edx], al

loc_401E79:				; CODE XREF: sub_401DF0+3Cj
					; sub_401DF0+82j
		pop	edi

loc_401E7A:				; CODE XREF: sub_401DF0+14j
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_401DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401E80	proc near		; CODE XREF: sub_4034B0+115p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= qword	ptr -10h
var_8		= qword	ptr -8

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	100h		; dwPriorityClass
		mov	dword_412150, 12345678h
		mov	dword_412154, 0
		mov	dword_412158, 13579BDFh
		mov	dword_41215C, 2468ACEh
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:SetPriorityClass
		push	1		; dwThreadAffinityMask
		call	ds:GetCurrentThread
		push	eax		; hThread
		call	ds:SetThreadAffinityMask
		push	4
		call	ds:omp_set_num_threads
		xorps	xmm0, xmm0
		add	esp, 4
		movlpd	[esp+28h+var_10], xmm0
		mov	ecx, dword ptr [esp+28h+var_10+4]
		mov	eax, dword ptr [esp+28h+var_10]

loc_401EF2:				; CODE XREF: sub_401E80+7Ej
					; sub_401E80+87j
		mov	byte ptr qword_412180[eax], al
		add	eax, 1
		adc	ecx, 0
		js	short loc_401EF2
		jg	short loc_401F09
		cmp	eax, 20200h
		jb	short loc_401EF2

loc_401F09:				; CODE XREF: sub_401E80+80j
		mov	edi, dword_41215C
		mov	ebx, dword_412158
		mov	eax, dword_412154
		mov	ebp, dword_412150
		mov	[esp+28h+var_14], 80h
		mov	dword ptr [esp+28h+var_10], 0
		jmp	short loc_401F36
; ---------------------------------------------------------------------------

loc_401F32:				; CODE XREF: sub_401E80+108j
					; sub_401E80+112j
		mov	eax, [esp+28h+var_18]

loc_401F36:				; CODE XREF: sub_401E80+B0j
		mov	edx, eax
		mov	[esp+28h+var_18], edi
		mov	esi, ebp
		mov	ecx, edx
		mov	ebp, ebx
		mov	eax, esi
		shrd	ebx, edi, 9
		shld	ecx, eax, 17h
		shr	edi, 9
		shl	eax, 17h
		xor	edx, ecx
		mov	ecx, [esp+28h+var_14]
		xor	esi, eax
		xor	edi, edx
		xor	ebx, esi
		shrd	ebx, edi, 11h
		xor	ebx, ebp
		shr	edi, 11h
		xor	edi, [esp+28h+var_18]
		xor	ebx, esi
		xor	edi, edx
		lea	eax, [ebx+ebp]
		and	eax, 1
		mov	dword ptr qword_412180[ecx*4], eax
		add	ecx, 1
		mov	[esp+28h+var_14], ecx
		adc	dword ptr [esp+28h+var_10], 0
		js	short loc_401F32
		jg	short loc_401F94
		cmp	ecx, 480h
		jb	short loc_401F32

loc_401F94:				; CODE XREF: sub_401E80+10Aj
		mov	dword ptr [esp+28h+var_10], 0FFh
		mov	[esp+28h+var_14], 0

loc_401FA4:				; CODE XREF: sub_401E80+1DAj
					; sub_401E80+1E4j
		mov	edx, [esp+28h+var_18]
		mov	esi, ebp
		mov	ebp, ebx
		mov	[esp+28h+var_18], edi
		mov	dword_412154, edi
		mov	ecx, edx
		shrd	ebx, edi, 9
		mov	eax, esi
		mov	dword_412150, ebp
		shld	ecx, eax, 17h
		shr	edi, 9
		shl	eax, 17h
		xor	edx, ecx
		xor	esi, eax
		xor	edi, edx
		xor	ebx, esi
		shrd	ebx, edi, 11h
		xor	ebx, ebp
		shr	edi, 11h
		xor	edi, [esp+28h+var_18]
		xor	ebx, esi
		xor	edi, edx
		mov	dword_412158, ebx
		xor	edx, edx
		mov	dword_41215C, edi
		lea	eax, [ebx+ebp]
		movzx	ecx, al
		call	sub_406F10
		mulsd	xmm0, ds:qword_408D20
		mov	esi, dword ptr [esp+28h+var_10]
		mov	ecx, esi
		mov	edx, [esp+28h+var_14]
		add	ecx, 1
		adc	edx, 0
		movsd	[esp+28h+var_8], xmm0
		call	sub_406F50
		mulsd	xmm0, [esp+28h+var_8]
		call	sub_406DE1
		mov	cl, byte ptr qword_412180[esi]
		mov	dl, byte ptr qword_412180[eax]
		mov	byte ptr qword_412180[eax], cl
		mov	eax, [esp+28h+var_14]
		mov	byte ptr qword_412180[esi], dl
		add	esi, 0FFFFFFFFh
		mov	dword ptr [esp+28h+var_10], esi
		adc	eax, 0FFFFFFFFh
		mov	[esp+28h+var_14], eax
		test	eax, eax
		jg	loc_401FA4
		jl	short loc_40206A
		test	esi, esi
		jnz	loc_401FA4

loc_40206A:				; CODE XREF: sub_401E80+1E0j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_401E80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. @T0@0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall T0()
		public @T0@0
@T0@0		proc near		; CODE XREF: sub_4034B0+11Ap
					; DATA XREF: .rdata:off_409A08o

var_318		= byte ptr -318h
var_194		= byte ptr -194h
var_164		= dword	ptr -164h
var_160		= byte ptr -160h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_10C		= dword	ptr -10Ch
var_108		= byte ptr -108h
var_E0		= dword	ptr -0E0h
var_D8		= dword	ptr -0D8h
var_D4		= byte ptr -0D4h
var_BC		= dword	ptr -0BCh
var_B4		= dword	ptr -0B4h
var_B0		= byte ptr -0B0h
var_88		= dword	ptr -88h
var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_40		= byte ptr -40h
var_38		= byte ptr -38h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset @T0@0_SEH ; t0::_seh
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 30Ch
		push	ebx
		push	esi
		push	edi
		lea	eax, [ebp+var_14]
		mov	[ebp+var_14], 20h
		push	eax
		lea	eax, [ebp+var_318]
		mov	[ebp+var_10], 3
		push	eax
		lea	ecx, [ebp+var_7C]
		call	sub_403C00
		lea	eax, [ebp+var_14]
		mov	[ebp+var_4C], 3
		push	eax
		push	offset dword_412380
		lea	ecx, [ebp+var_B0]
		mov	[ebp+var_14], 20h
		mov	[ebp+var_10], 20h
		call	sub_403C00
		lea	eax, [ebp+var_10]
		mov	[ebp+var_80], 3
		push	eax
		push	ecx
		lea	ecx, [ebp+var_38]
		mov	[ebp+var_10], 3
		call	sub_403900
		lea	eax, [ebp+var_7C]
		mov	[ebp+var_18], 3
		push	eax
		lea	ecx, [ebp+var_108]
		call	sub_403EA0
		lea	eax, [ebp+var_38]
		mov	[ebp+var_D8], 3
		push	eax
		lea	ecx, [ebp+var_D4]
		call	sub_403B30
		mov	esi, [ebp+var_60]
		lea	eax, [ebp+var_40]
		mov	edi, [ebp+var_5C]
		push	eax
		mov	[ebp+var_B4], 3
		call	ds:?get_auto_selection_view@accelerator@Concurrency@@SA?AVaccelerator_view@2@XZ	; Concurrency::accelerator::get_auto_selection_view(void)
		push	ecx
		mov	eax, esp
		lea	edx, [ebp+var_108]
		lea	ecx, [ebp+var_40]
		mov	[eax], esi
		mov	[eax+4], edi
		call	sub_4055B0
		lea	ecx, [ebp+var_40]
		call	ds:??1accelerator_view@Concurrency@@QAE@XZ ; Concurrency::accelerator_view::~accelerator_view(void)
		push	ecx
		lea	ecx, [ebp+var_D4]
		mov	[ebp+var_4], 0
		call	sub_404270
		mov	ecx, [ebp+var_BC]
		or	ebx, 0FFFFFFFFh
		mov	esi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		test	ecx, ecx
		jz	short loc_4021AA
		mov	eax, ebx
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4021A0
		call	esi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4021A0:				; CODE XREF: T0()+11Cj
		mov	[ebp+var_BC], 0

loc_4021AA:				; CODE XREF: T0()+112j
		push	ecx
		lea	ecx, [ebp+var_108]
		call	sub_404560
		mov	ecx, [ebp+var_E0]
		test	ecx, ecx
		jz	short loc_4021CC
		mov	eax, ebx
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4021CC
		call	esi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4021CC:				; CODE XREF: T0()+13Ej	T0()+148j
		push	ecx
		lea	ecx, [ebp+var_7C]
		mov	[ebp+var_4], 0FFFFFFFFh
		call	sub_403750
		mov	eax, [ebp+var_1C]
		mov	esi, ds:?_Get_CPU_access@_Buffer_descriptor@details@Concurrency@@QBEXW4_Access_mode@@@Z	; Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode)
		and	eax, 3
		cmp	al, 3
		jz	short loc_4021F3
		push	3
		lea	ecx, [ebp+var_24]
		call	esi ; Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode) ;	Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode)

loc_4021F3:				; CODE XREF: T0()+16Aj
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_24]
		mov	dword ptr [ecx+eax*4], 0
		mov	eax, [ebp+var_1C]
		and	eax, 3
		cmp	al, 3
		jz	short loc_402211
		push	3
		lea	ecx, [ebp+var_24]
		call	esi ; Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode) ;	Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode)

loc_402211:				; CODE XREF: T0()+188j
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_24]
		mov	dword ptr [ecx+eax*4+4], 0
		mov	eax, [ebp+var_1C]
		and	eax, 3
		cmp	al, 3
		jz	short loc_402230
		push	3
		lea	ecx, [ebp+var_24]
		call	esi ; Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode) ;	Concurrency::details::_Buffer_descriptor::_Get_CPU_access(_Access_mode)

loc_402230:				; CODE XREF: T0()+1A7j
		mov	ecx, [ebp+var_24]
		mov	eax, [ebp+var_2C]
		mov	dword ptr [ecx+eax*4+8], 0
		lea	eax, [ebp+var_7C]
		push	eax
		lea	ecx, [ebp+var_194]
		call	sub_403EA0
		lea	eax, [ebp+var_B0]
		mov	[ebp+var_164], 3
		push	eax
		lea	ecx, [ebp+var_160]
		call	sub_403EA0
		lea	eax, [ebp+var_38]
		mov	[ebp+var_130], 3
		push	eax
		lea	ecx, [ebp+var_12C]
		call	sub_403B30
		mov	esi, [ebp+var_60]
		lea	eax, [ebp+var_48]
		mov	edi, [ebp+var_5C]
		push	eax
		mov	[ebp+var_10C], 3
		call	ds:?get_auto_selection_view@accelerator@Concurrency@@SA?AVaccelerator_view@2@XZ	; Concurrency::accelerator::get_auto_selection_view(void)
		push	ecx
		mov	eax, esp
		lea	edx, [ebp+var_194]
		lea	ecx, [ebp+var_48]
		mov	[eax], esi
		mov	[eax+4], edi
		call	sub_405760
		lea	ecx, [ebp+var_48]
		call	ds:??1accelerator_view@Concurrency@@QAE@XZ ; Concurrency::accelerator_view::~accelerator_view(void)
		lea	ecx, [ebp+var_194]
		call	sub_402360
		push	ecx
		lea	ecx, [ebp+var_38]
		call	sub_403690
		push	ecx
		lea	ecx, [ebp+var_38]
		call	sub_404270
		mov	ecx, [ebp+var_20]
		test	ecx, ecx
		jz	short loc_4022FA
		mov	eax, ebx
		lock xadd [ecx+4], eax
		dec	eax
		mov	esi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		jnz	short loc_4022F1
		call	esi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4022F1:				; CODE XREF: T0()+26Dj
		mov	[ebp+var_20], 0
		jmp	short loc_402300
; ---------------------------------------------------------------------------

loc_4022FA:				; CODE XREF: T0()+25Dj
		mov	esi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_402300:				; CODE XREF: T0()+278j
		push	ecx
		lea	ecx, [ebp+var_B0]
		call	sub_404560
		mov	ecx, [ebp+var_88]
		test	ecx, ecx
		jz	short loc_40232C
		mov	eax, ebx
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_402322
		call	esi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_402322:				; CODE XREF: T0()+29Ej
		mov	[ebp+var_88], 0

loc_40232C:				; CODE XREF: T0()+294j
		push	ecx
		lea	ecx, [ebp+var_7C]
		call	sub_404560
		mov	ecx, [ebp+var_54]
		test	ecx, ecx
		jz	short loc_402346
		lock xadd [ecx+4], ebx
		dec	ebx
		jnz	short loc_402346
		call	esi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_402346:				; CODE XREF: T0()+2BAj	T0()+2C2j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
@T0@0		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402360	proc near		; CODE XREF: T0()+241p

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403810
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		push	ecx
		lea	ecx, [edi+68h]
		call	sub_404270
		mov	ecx, [edi+80h]
		or	esi, 0FFFFFFFFh
		mov	ebx, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		test	ecx, ecx
		jz	short loc_4023B0
		mov	eax, esi
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4023A6
		call	ebx ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4023A6:				; CODE XREF: sub_402360+42j
		mov	dword ptr [edi+80h], 0

loc_4023B0:				; CODE XREF: sub_402360+38j
		push	ecx
		lea	ecx, [edi+34h]
		call	sub_404560
		mov	ecx, [edi+5Ch]
		test	ecx, ecx
		jz	short loc_4023D3
		mov	eax, esi
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4023CC
		call	ebx ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4023CC:				; CODE XREF: sub_402360+68j
		mov	dword ptr [edi+5Ch], 0

loc_4023D3:				; CODE XREF: sub_402360+5Ej
		push	ecx
		mov	ecx, edi
		call	sub_404560
		mov	ecx, [edi+28h]
		test	ecx, ecx
		jz	short loc_4023F3
		lock xadd [ecx+4], esi
		dec	esi
		jnz	short loc_4023EC
		call	ebx ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_4023EC:				; CODE XREF: sub_402360+88j
		mov	dword ptr [edi+28h], 0

loc_4023F3:				; CODE XREF: sub_402360+80j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_402360	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. @T1@0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall T1()
		public @T1@0
@T1@0		proc near		; CODE XREF: sub_4034B0+124p
					; DATA XREF: .rdata:off_409A08o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 8
		mov	[esp+8+var_4], 0
		lea	eax, [esp+8+var_4]
		push	eax
		push	offset sub_4068D0
		push	1
		push	1
		call	_vcomp_fork
		add	esp, 10h
		mov	esp, ebp
		pop	ebp
		retn
@T1@0		endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. @T2@0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall T2()
		public @T2@0
@T2@0		proc near		; CODE XREF: sub_4034B0+12Ep
					; DATA XREF: .rdata:off_409A08o

var_30		= qword	ptr -30h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= qword	ptr -8

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 1Ch
		xorps	xmm0, xmm0
		movlpd	[esp+1Ch+var_8], xmm0
		mov	eax, dword ptr [esp+1Ch+var_8+4]
		push	ebx
		push	esi
		mov	[esp+24h+var_C], eax
		mov	eax, dword ptr [esp+24h+var_8]
		push	edi
		mov	[esp+28h+var_14], eax
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_402470:				; CODE XREF: T2()+531j	T2()+53Cj
		mov	edx, dword_412144[eax*4]
		mov	edi, offset dword_40C020
		mov	esi, offset dword_412280
		mov	ebx, offset qword_412180
		xor	ecx, ecx

loc_402488:				; CODE XREF: T2()+70j
		mov	eax, edx
		shr	eax, cl
		and	eax, 1
		movd	xmm0, eax
		cvtdq2pd xmm0, xmm0
		shr	eax, 1Fh
		addsd	xmm0, ds:qword_408D40[eax*8]
		movsd	qword_412180[ecx*8], xmm0
		inc	ecx
		cmp	ecx, 20h
		jl	short loc_402488
		mov	[esp+28h+var_1C], 2
		nop	word ptr [eax+eax+00h]

loc_4024C0:				; CODE XREF: T2()+18Aj
		mov	[esp+28h+var_18], 20h
		nop	dword ptr [eax+eax+00000000h]

loc_4024D0:				; CODE XREF: T2()+179j
		movsd	xmm0, qword ptr	[edi]
		lea	eax, [ebx+10h]
		mulsd	xmm0, ds:qword_408D30
		add	edi, 8
		mov	ecx, 4
		movsd	qword ptr [esi], xmm0
		nop	dword ptr [eax+eax+00h]

loc_4024F0:				; CODE XREF: T2()+147j
		movsd	xmm0, qword ptr	[eax-10h]
		mulsd	xmm0, qword ptr	[edi]
		addsd	xmm0, qword ptr	[esi]
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax-8]
		mulsd	xmm1, qword ptr	[edi+8]
		addsd	xmm1, xmm0
		movsd	xmm0, qword ptr	[edi+10h]
		movsd	qword ptr [esi], xmm1
		mulsd	xmm0, qword ptr	[eax]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+8]
		mulsd	xmm1, qword ptr	[edi+18h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm0, qword ptr	[eax+10h]
		mulsd	xmm0, qword ptr	[edi+20h]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+18h]
		mulsd	xmm1, qword ptr	[edi+28h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm2, qword ptr	[eax+20h]
		mulsd	xmm2, qword ptr	[edi+30h]
		addsd	xmm2, xmm1
		movsd	qword ptr [esi], xmm2
		movsd	xmm0, qword ptr	[eax+28h]
		add	eax, 40h
		mulsd	xmm0, qword ptr	[edi+38h]
		add	edi, 40h
		addsd	xmm0, xmm2
		movsd	qword ptr [esi], xmm0
		sub	ecx, 1
		jnz	loc_4024F0
		xorps	xmm0, ds:xmmword_408D50
		call	_libm_sse2_exp_precise
		addsd	xmm0, ds:qword_408D28
		movsd	xmm1, ds:qword_408D28
		divsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		add	esi, 8
		sub	[esp+28h+var_18], 1
		jnz	loc_4024D0
		add	ebx, 100h
		sub	[esp+28h+var_1C], 1
		jnz	loc_4024C0
		lea	eax, [ebx+10h]
		mov	[esp+28h+var_1C], ebx
		mov	[esp+28h+var_10], eax
		mov	ebx, eax
		mov	[esp+28h+var_18], 8
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_4025F0:				; CODE XREF: T2()+288j
		movsd	xmm0, qword ptr	[edi]
		mov	eax, ebx
		mulsd	xmm0, ds:qword_408D30
		add	edi, 8
		mov	ecx, 4
		movsd	qword ptr [esi], xmm0
		nop	word ptr [eax+eax+00h]

loc_402610:				; CODE XREF: T2()+267j
		movsd	xmm0, qword ptr	[eax-10h]
		mulsd	xmm0, qword ptr	[edi]
		addsd	xmm0, qword ptr	[esi]
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax-8]
		mulsd	xmm1, qword ptr	[edi+8]
		addsd	xmm1, xmm0
		movsd	xmm0, qword ptr	[edi+10h]
		movsd	qword ptr [esi], xmm1
		mulsd	xmm0, qword ptr	[eax]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+8]
		mulsd	xmm1, qword ptr	[edi+18h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm0, qword ptr	[eax+10h]
		mulsd	xmm0, qword ptr	[edi+20h]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+18h]
		mulsd	xmm1, qword ptr	[edi+28h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm2, qword ptr	[eax+20h]
		mulsd	xmm2, qword ptr	[edi+30h]
		addsd	xmm2, xmm1
		movsd	qword ptr [esi], xmm2
		movsd	xmm0, qword ptr	[eax+28h]
		add	eax, 40h
		mulsd	xmm0, qword ptr	[edi+38h]
		add	edi, 40h
		addsd	xmm0, xmm2
		movsd	qword ptr [esi], xmm0
		sub	ecx, 1
		jnz	loc_402610
		sub	esp, 8
		movsd	[esp+30h+var_30], xmm0
		call	ds:round
		fstp	qword ptr [esi]
		add	esp, 8
		add	esi, 8
		sub	[esp+28h+var_18], 1
		jnz	loc_4025F0
		mov	ebx, [esp+28h+var_1C]
		add	ebx, 100h
		mov	[esp+28h+var_10], 8
		mov	eax, ebx
		mov	[esp+28h+var_1C], ebx
		mov	[esp+28h+var_18], eax
		nop	word ptr [eax+eax+00h]

loc_4026F0:				; CODE XREF: T2()+322j
		mov	ebx, 20h
		db	66h, 66h
		nop	word ptr [eax+eax+00000000h]

loc_402700:				; CODE XREF: T2()+30Ej
		movsd	xmm0, qword ptr	[edi]
		mulsd	xmm0, ds:qword_408D30
		movsd	qword ptr [esi], xmm0
		movsd	xmm0, qword ptr	[edi+8]
		add	edi, 10h
		mulsd	xmm0, qword ptr	[eax]
		addsd	xmm0, qword ptr	[esi]
		xorps	xmm0, ds:xmmword_408D50
		call	_libm_sse2_exp_precise
		addsd	xmm0, ds:qword_408D28
		movsd	xmm1, ds:qword_408D28
		mov	eax, [esp+28h+var_18]
		divsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		add	esi, 8
		sub	ebx, 1
		jnz	short loc_402700
		add	eax, 8
		sub	edi, 200h
		sub	[esp+28h+var_10], 1
		mov	[esp+28h+var_18], eax
		jnz	short loc_4026F0
		add	edi, 200h
		mov	dword ptr [esp+28h+var_8], 20h
		add	[esp+28h+var_1C], 40h
		mov	ebx, [esp+28h+var_1C]
		mov	[esp+28h+var_18], 8
		nop	dword ptr [eax+00h]
		nop	word ptr [eax+eax+00000000h]

loc_402790:				; CODE XREF: T2()+45Cj
		mov	[esp+28h+var_10], 10h
		nop	dword ptr [eax+eax+00000000h]

loc_4027A0:				; CODE XREF: T2()+445j
		movsd	xmm0, qword ptr	[edi]
		lea	eax, [ebx+10h]
		mulsd	xmm0, ds:qword_408D30
		add	edi, 8
		mov	ecx, 4
		movsd	qword ptr [esi], xmm0
		nop	dword ptr [eax+eax+00h]

loc_4027C0:				; CODE XREF: T2()+417j
		movsd	xmm0, qword ptr	[eax-10h]
		mulsd	xmm0, qword ptr	[edi]
		addsd	xmm0, qword ptr	[esi]
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax-8]
		mulsd	xmm1, qword ptr	[edi+8]
		addsd	xmm1, xmm0
		movsd	xmm0, qword ptr	[edi+10h]
		movsd	qword ptr [esi], xmm1
		mulsd	xmm0, qword ptr	[eax]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+8]
		mulsd	xmm1, qword ptr	[edi+18h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm0, qword ptr	[eax+10h]
		mulsd	xmm0, qword ptr	[edi+20h]
		addsd	xmm0, xmm1
		movsd	qword ptr [esi], xmm0
		movsd	xmm1, qword ptr	[eax+18h]
		mulsd	xmm1, qword ptr	[edi+28h]
		addsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		movsd	xmm2, qword ptr	[eax+20h]
		mulsd	xmm2, qword ptr	[edi+30h]
		addsd	xmm2, xmm1
		movsd	qword ptr [esi], xmm2
		movsd	xmm0, qword ptr	[eax+28h]
		add	eax, 40h
		mulsd	xmm0, qword ptr	[edi+38h]
		add	edi, 40h
		addsd	xmm0, xmm2
		movsd	qword ptr [esi], xmm0
		sub	ecx, 1
		jnz	loc_4027C0
		xorps	xmm0, ds:xmmword_408D50
		call	_libm_sse2_exp_precise
		movsd	xmm1, ds:qword_408D28
		addsd	xmm0, xmm1
		divsd	xmm1, xmm0
		movsd	qword ptr [esi], xmm1
		add	esi, 8
		sub	[esp+28h+var_10], 1
		jnz	loc_4027A0
		add	ebx, 100h
		sub	edi, 1080h
		sub	[esp+28h+var_18], 1
		jnz	loc_402790
		mov	[esp+28h+var_1C], ebx
		mov	ebx, dword ptr [esp+28h+var_8]
		mov	edi, [esp+28h+var_1C]
		mov	[esp+28h+var_10], 8

loc_4028B6:				; CODE XREF: T2()+4F0j
		xorps	xmm0, xmm0
		lea	edx, [edi+10h]
		movsd	qword ptr [esi], xmm0
		mov	ecx, 2

loc_4028C5:				; CODE XREF: T2()+4D7j
		movsd	xmm0, qword ptr	[edx-10h]
		comisd	xmm0, qword ptr	[esi]
		jbe	short loc_4028D7
		movsd	qword ptr [esi], xmm0
		lea	ebx, [ecx-2]

loc_4028D7:				; CODE XREF: T2()+48Ej
		movsd	xmm0, qword ptr	[edx-8]
		comisd	xmm0, qword ptr	[esi]
		jbe	short loc_4028E9
		movsd	qword ptr [esi], xmm0
		lea	ebx, [ecx-1]

loc_4028E9:				; CODE XREF: T2()+4A0j
		movsd	xmm0, qword ptr	[edx]
		comisd	xmm0, qword ptr	[esi]
		jbe	short loc_4028F9
		movsd	qword ptr [esi], xmm0
		mov	ebx, ecx

loc_4028F9:				; CODE XREF: T2()+4B1j
		movsd	xmm0, qword ptr	[edx+8]
		comisd	xmm0, qword ptr	[esi]
		jbe	short loc_40290B
		movsd	qword ptr [esi], xmm0
		lea	ebx, [ecx+1]

loc_40290B:				; CODE XREF: T2()+4C2j
		add	ecx, 4
		add	edx, 20h
		lea	eax, [ecx-2]
		cmp	eax, 10h
		jl	short loc_4028C5
		movd	xmm0, ebx
		sub	edi, 0FFFFFF80h
		cvtdq2pd xmm0, xmm0
		movsd	qword ptr [esi], xmm0
		add	esi, 8
		sub	[esp+28h+var_10], 1
		jnz	short loc_4028B6
		mov	eax, [esp+28h+var_14]
		xor	ebx, ebx
		xor	esi, esi
		mov	dword_412144[eax*4], 0

loc_402945:				; CODE XREF: T2()+518j
		movsd	xmm0, qword ptr	[edi+ebx*8]
		call	sub_406DE1
		shl	esi, 4
		inc	ebx
		or	esi, eax
		cmp	ebx, 8
		jl	short loc_402945
		mov	eax, [esp+28h+var_14]
		mov	dword_412144[eax*4], esi
		add	eax, 1
		mov	[esp+28h+var_14], eax
		adc	[esp+28h+var_C], 0
		js	loc_402470
		jg	short loc_402982
		cmp	eax, 3
		jb	loc_402470

loc_402982:				; CODE XREF: T2()+537j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
@T2@0		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402990	proc near		; CODE XREF: C0()+F6p

var_8		= dword	ptr -8

		push	ebx
		mov	ebx, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+0Ch+var_8], ebp
		mov	ebp, esp
		sub	esp, 70h
		mov	[ebp-4], cl
		mov	dword ptr [ebp-18h], 1
		mov	dword ptr [ebp-14h], 0
		jmp	short loc_4029CE
; ---------------------------------------------------------------------------

loc_4029BC:				; CODE XREF: sub_402990:loc_402AC5j
		mov	eax, [ebp-18h]
		add	eax, 1
		mov	ecx, [ebp-14h]
		adc	ecx, 0
		mov	[ebp-18h], eax
		mov	[ebp-14h], ecx

loc_4029CE:				; CODE XREF: sub_402990+2Aj
		cmp	dword ptr [ebp-14h], 0
		jg	loc_402ACA
		jl	short loc_4029E7
		cmp	dword ptr [ebp-18h], 101h
		jnb	loc_402ACA

loc_4029E7:				; CODE XREF: sub_402990+48j
		push	0
		push	200h
		mov	edx, [ebp-14h]
		push	edx
		mov	eax, [ebp-18h]
		push	eax
		call	sub_406AD0
		push	0
		push	1
		push	edx
		push	eax
		call	sub_406AD0
		add	eax, offset qword_412180
		mov	[ebp-0Ch], eax
		xorps	xmm0, xmm0
		movss	dword ptr [ebp-8], xmm0
		movss	xmm0, dword ptr	[ebp-8]
		shufps	xmm0, xmm0, 0
		movaps	xmmword	ptr [ebp-50h], xmm0
		movaps	xmm0, xmmword ptr [ebp-50h]
		movaps	xmmword	ptr [ebp-60h], xmm0
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-28h], xmm0
		jmp	short loc_402A47
; ---------------------------------------------------------------------------

loc_402A35:				; CODE XREF: sub_402990:loc_402AC0j
		mov	ecx, [ebp-28h]
		add	ecx, 1
		mov	edx, [ebp-24h]
		adc	edx, 0
		mov	[ebp-28h], ecx
		mov	[ebp-24h], edx

loc_402A47:				; CODE XREF: sub_402990+A3j
		cmp	dword ptr [ebp-24h], 0
		jg	short loc_402AC5
		jl	short loc_402A55
		cmp	dword ptr [ebp-28h], 4
		jnb	short loc_402AC5

loc_402A55:				; CODE XREF: sub_402990+BDj
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-20h], xmm0
		jmp	short loc_402A71
; ---------------------------------------------------------------------------

loc_402A5F:				; CODE XREF: sub_402990+12Ej
		mov	eax, [ebp-20h]
		add	eax, 1
		mov	ecx, [ebp-1Ch]
		adc	ecx, 0
		mov	[ebp-20h], eax
		mov	[ebp-1Ch], ecx

loc_402A71:				; CODE XREF: sub_402990+CDj
		cmp	dword ptr [ebp-1Ch], 0
		jg	short loc_402AC0
		jl	short loc_402A7F
		cmp	dword ptr [ebp-20h], 4
		jnb	short loc_402AC0

loc_402A7F:				; CODE XREF: sub_402990+E7j
		movaps	xmm0, xmmword ptr [ebp-60h]
		push	0
		push	4
		mov	edx, [ebp-1Ch]
		push	edx
		mov	eax, [ebp-20h]
		push	eax
		movaps	xmmword	ptr [ebp-70h], xmm0
		call	sub_406AD0
		add	eax, [ebp-28h]
		adc	edx, [ebp-24h]
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		add	eax, [ebp-0Ch]
		movaps	xmm0, xmmword ptr [ebp-70h]
		movntps	xmmword	ptr [eax], xmm0
		jmp	short loc_402A5F
; ---------------------------------------------------------------------------

loc_402AC0:				; CODE XREF: sub_402990+E5j
					; sub_402990+EDj
		jmp	loc_402A35
; ---------------------------------------------------------------------------

loc_402AC5:				; CODE XREF: sub_402990+BBj
					; sub_402990+C3j
		jmp	loc_4029BC
; ---------------------------------------------------------------------------

loc_402ACA:				; CODE XREF: sub_402990+42j
					; sub_402990+51j
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-30h], xmm0
		jmp	short loc_402AE6
; ---------------------------------------------------------------------------

loc_402AD4:				; CODE XREF: sub_402990:loc_402B00j
		mov	ecx, [ebp-30h]
		mov	edx, [ebp-2Ch]
		add	ecx, 1
		adc	edx, 0
		mov	[ebp-30h], ecx
		mov	[ebp-2Ch], edx

loc_402AE6:				; CODE XREF: sub_402990+142j
		mov	eax, [ebp-30h]
		mov	ecx, [ebp-2Ch]
		mov	[ebp-38h], eax
		mov	[ebp-34h], ecx
		cmp	dword ptr [ebp-34h], 0
		jg	short loc_402B02
		jl	short loc_402B00
		cmp	dword ptr [ebp-38h], 64h
		jnb	short loc_402B02

loc_402B00:				; CODE XREF: sub_402990+168j
		jmp	short loc_402AD4
; ---------------------------------------------------------------------------

loc_402B02:				; CODE XREF: sub_402990+166j
					; sub_402990+16Ej
		movzx	edx, byte ptr [ebp-4]
		movzx	eax, byte ptr qword_412180[edx]
		xor	eax, 0CCh
		add	eax, 1
		shl	eax, 9
		movzx	ecx, byte ptr (qword_412180+4)[eax]
		xor	ecx, dword_412140
		mov	dword_412140, ecx
		mov	edx, dword_412140
		and	edx, 0Fh
		shl	edx, 4
		mov	eax, dword_412140
		and	eax, 0F0h
		shr	eax, 4
		or	edx, eax
		mov	dword_412140, edx
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
sub_402990	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. @C0@0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall C0()
		public @C0@0
@C0@0		proc near		; CODE XREF: sub_4034B0+11Fp
					; DATA XREF: .rdata:off_409A08o

var_860		= dword	ptr -860h
var_85C		= dword	ptr -85Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= qword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_9		= byte ptr -9
var_8		= qword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 860h
		push	ebx
		push	esi
		push	edi
		xorps	xmm0, xmm0
		movlpd	[ebp+var_24], xmm0
		jmp	short loc_402B88
; ---------------------------------------------------------------------------

loc_402B76:				; CODE XREF: C0():loc_402F3Aj
		mov	eax, dword ptr [ebp+var_24]
		add	eax, 1
		mov	ecx, dword ptr [ebp+var_24+4]
		adc	ecx, 0
		mov	dword ptr [ebp+var_24],	eax
		mov	dword ptr [ebp+var_24+4], ecx

loc_402B88:				; CODE XREF: C0()+14j
		cmp	dword ptr [ebp+var_24+4], 0
		jg	loc_402F3F
		jl	short loc_402B9E
		cmp	dword ptr [ebp+var_24],	0Ch
		jnb	loc_402F3F

loc_402B9E:				; CODE XREF: C0()+32j
		push	0
		push	1
		mov	edx, dword ptr [ebp+var_24+4]
		push	edx
		mov	eax, dword ptr [ebp+var_24]
		push	eax
		call	sub_406AD0
		mov	cl, byte ptr dword_412144[eax]
		mov	[ebp+var_9], cl

loc_402BB8:				; CODE XREF: C0():loc_402F35j
		mov	edx, 1
		test	edx, edx
		jz	loc_402F3A
		xorps	xmm0, xmm0
		movlpd	[ebp+var_8], xmm0
		jmp	short loc_402BE1
; ---------------------------------------------------------------------------

loc_402BCF:				; CODE XREF: C0()+B9j
		mov	eax, dword ptr [ebp+var_8]
		add	eax, 1
		mov	ecx, dword ptr [ebp+var_8+4]
		adc	ecx, 0
		mov	dword ptr [ebp+var_8], eax
		mov	dword ptr [ebp+var_8+4], ecx

loc_402BE1:				; CODE XREF: C0()+6Dj
		cmp	dword ptr [ebp+var_8+4], 0
		jg	short loc_402C1B
		jl	short loc_402BF2
		cmp	dword ptr [ebp+var_8], 100h
		jnb	short loc_402C1B

loc_402BF2:				; CODE XREF: C0()+87j
		push	0
		push	8
		mov	edx, dword ptr [ebp+var_8+4]
		push	edx
		mov	eax, dword ptr [ebp+var_8]
		push	eax
		call	sub_406AD0
		mov	[ebp+eax+var_860], 0
		mov	[ebp+eax+var_85C], 0
		jmp	short loc_402BCF
; ---------------------------------------------------------------------------

loc_402C1B:				; CODE XREF: C0()+85j C0()+90j
		mov	[ebp+var_2C], 190h
		mov	[ebp+var_28], 0
		jmp	short loc_402C3D
; ---------------------------------------------------------------------------

loc_402C2B:				; CODE XREF: C0():loc_402F30j
		mov	ecx, [ebp+var_2C]
		sub	ecx, 1
		mov	edx, [ebp+var_28]
		sbb	edx, 0
		mov	[ebp+var_2C], ecx
		mov	[ebp+var_28], edx

loc_402C3D:				; CODE XREF: C0()+C9j
		cmp	[ebp+var_28], 0
		jl	loc_402F35
		jg	short loc_402C53
		cmp	[ebp+var_2C], 0
		jbe	loc_402F35

loc_402C53:				; CODE XREF: C0()+E7j
		mov	cl, [ebp+var_9]
		call	sub_402990
		xorps	xmm0, xmm0
		movlpd	[ebp+var_8], xmm0
		jmp	short loc_402C77
; ---------------------------------------------------------------------------

loc_402C65:				; CODE XREF: C0():loc_402D5Bj
		mov	eax, dword ptr [ebp+var_8]
		add	eax, 1
		mov	ecx, dword ptr [ebp+var_8+4]
		adc	ecx, 0
		mov	dword ptr [ebp+var_8], eax
		mov	dword ptr [ebp+var_8+4], ecx

loc_402C77:				; CODE XREF: C0()+103j
		cmp	dword ptr [ebp+var_8+4], 0
		jg	loc_402D60
		jl	short loc_402C90
		cmp	dword ptr [ebp+var_8], 100h
		jnb	loc_402D60

loc_402C90:				; CODE XREF: C0()+121j
		push	0
		push	0A7h
		mov	edx, dword ptr [ebp+var_8+4]
		push	edx
		mov	eax, dword ptr [ebp+var_8]
		push	eax
		call	sub_406AD0
		add	eax, 0Dh
		adc	edx, 0
		and	eax, 0FFh
		and	edx, 0
		add	eax, 1
		adc	edx, 0
		push	0
		push	200h
		push	edx
		push	eax
		call	sub_406AD0
		push	0
		push	1
		push	edx
		push	eax
		call	sub_406AD0
		add	eax, offset qword_412180
		mov	[ebp+var_44], eax
		rdtscp
		mov	[ebp+var_48], ecx
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], edx
		mov	ecx, [ebp+var_44]
		movzx	edx, byte ptr [ecx]
		xor	edx, dword_412140
		mov	dword_412140, edx
		rdtscp
		mov	[ebp+var_48], ecx
		sub	eax, [ebp+var_50]
		sbb	edx, [ebp+var_4C]
		mov	[ebp+var_58], eax
		mov	[ebp+var_54], edx
		cmp	[ebp+var_54], 0
		ja	short loc_402D5B
		jb	short loc_402D17
		cmp	[ebp+var_58], 3Ch
		ja	short loc_402D5B

loc_402D17:				; CODE XREF: C0()+1AFj
		push	0
		push	8
		mov	eax, dword ptr [ebp+var_8+4]
		push	eax
		mov	ecx, dword ptr [ebp+var_8]
		push	ecx
		call	sub_406AD0
		mov	esi, [ebp+eax+var_860]
		add	esi, 1
		mov	edi, [ebp+eax+var_85C]
		adc	edi, 0
		push	0
		push	8
		mov	edx, dword ptr [ebp+var_8+4]
		push	edx
		mov	eax, dword ptr [ebp+var_8]
		push	eax
		call	sub_406AD0
		mov	[ebp+eax+var_860], esi
		mov	[ebp+eax+var_85C], edi

loc_402D5B:				; CODE XREF: C0()+1ADj	C0()+1B5j
		jmp	loc_402C65
; ---------------------------------------------------------------------------

loc_402D60:				; CODE XREF: C0()+11Bj	C0()+12Aj
		mov	[ebp+var_14], 0FFFFFFFFh
		mov	[ebp+var_10], 0FFFFFFFFh
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+var_10]
		mov	[ebp+var_18], edx
		xorps	xmm0, xmm0
		movlpd	[ebp+var_8], xmm0
		jmp	short loc_402D96
; ---------------------------------------------------------------------------

loc_402D84:				; CODE XREF: C0():loc_402EA1j
		mov	eax, dword ptr [ebp+var_8]
		add	eax, 1
		mov	ecx, dword ptr [ebp+var_8+4]
		adc	ecx, 0
		mov	dword ptr [ebp+var_8], eax
		mov	dword ptr [ebp+var_8+4], ecx

loc_402D96:				; CODE XREF: C0()+222j
		cmp	dword ptr [ebp+var_8+4], 0
		jg	loc_402EA6
		jl	short loc_402DAF
		cmp	dword ptr [ebp+var_8], 100h
		jnb	loc_402EA6

loc_402DAF:				; CODE XREF: C0()+240j
		cmp	[ebp+var_18], 0
		jl	short loc_402E15
		jg	short loc_402DBD
		cmp	[ebp+var_1C], 0
		jb	short loc_402E15

loc_402DBD:				; CODE XREF: C0()+255j
		push	0
		push	8
		mov	edx, dword ptr [ebp+var_8+4]
		push	edx
		mov	eax, dword ptr [ebp+var_8]
		push	eax
		call	sub_406AD0
		mov	esi, eax
		push	0
		push	8
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+var_1C]
		push	edx
		call	sub_406AD0
		mov	[ebp+var_30], esi
		mov	[ebp+var_34], eax
		mov	eax, [ebp+var_30]
		mov	ecx, [ebp+var_34]
		mov	edx, [ebp+eax+var_85C]
		cmp	edx, [ebp+ecx+var_85C]
		jl	short loc_402E2F
		jg	short loc_402E15
		mov	eax, [ebp+var_30]
		mov	ecx, [ebp+var_34]
		mov	edx, [ebp+eax+var_860]
		cmp	edx, [ebp+ecx+var_860]
		jb	short loc_402E2F

loc_402E15:				; CODE XREF: C0()+253j	C0()+25Bj ...
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_10], ecx
		mov	edx, dword ptr [ebp+var_8]
		mov	[ebp+var_1C], edx
		mov	eax, dword ptr [ebp+var_8+4]
		mov	[ebp+var_18], eax
		jmp	short loc_402EA1
; ---------------------------------------------------------------------------

loc_402E2F:				; CODE XREF: C0()+29Bj	C0()+2B3j
		cmp	[ebp+var_10], 0
		jl	short loc_402E95
		jg	short loc_402E3D
		cmp	[ebp+var_14], 0
		jb	short loc_402E95

loc_402E3D:				; CODE XREF: C0()+2D5j
		push	0
		push	8
		mov	ecx, dword ptr [ebp+var_8+4]
		push	ecx
		mov	edx, dword ptr [ebp+var_8]
		push	edx
		call	sub_406AD0
		mov	esi, eax
		push	0
		push	8
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	sub_406AD0
		mov	[ebp+var_38], esi
		mov	[ebp+var_3C], eax
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_3C]
		mov	ecx, [ebp+edx+var_85C]
		cmp	ecx, [ebp+eax+var_85C]
		jl	short loc_402EA1
		jg	short loc_402E95
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_3C]
		mov	ecx, [ebp+edx+var_860]
		cmp	ecx, [ebp+eax+var_860]
		jb	short loc_402EA1

loc_402E95:				; CODE XREF: C0()+2D3j	C0()+2DBj ...
		mov	edx, dword ptr [ebp+var_8]
		mov	[ebp+var_14], edx
		mov	eax, dword ptr [ebp+var_8+4]
		mov	[ebp+var_10], eax

loc_402EA1:				; CODE XREF: C0()+2CDj	C0()+31Bj ...
		jmp	loc_402D84
; ---------------------------------------------------------------------------

loc_402EA6:				; CODE XREF: C0()+23Aj	C0()+249j
		push	0
		push	8
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+var_1C]
		push	edx
		call	sub_406AD0
		mov	esi, eax
		push	0
		push	8
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	sub_406AD0
		push	0
		push	3
		mov	edx, [ebp+eax+var_85C]
		push	edx
		mov	eax, [ebp+eax+var_860]
		push	eax
		call	sub_406AD0
		add	eax, 0Ch
		adc	edx, 0
		mov	[ebp+var_40], esi
		mov	[ebp+var_60], eax
		mov	[ebp+var_5C], edx
		mov	ecx, [ebp+var_40]
		mov	edx, [ebp+ecx+var_85C]
		cmp	edx, [ebp+var_5C]
		jl	short loc_402F30
		jg	short loc_402F12
		mov	eax, [ebp+var_40]
		mov	ecx, [ebp+eax+var_860]
		cmp	ecx, [ebp+var_60]
		jb	short loc_402F30

loc_402F12:				; CODE XREF: C0()+3A1j
		mov	bl, byte ptr [ebp+var_1C]
		push	0
		push	1
		mov	edx, dword ptr [ebp+var_24+4]
		push	edx
		mov	eax, dword ptr [ebp+var_24]
		push	eax
		call	sub_406AD0
		mov	byte ptr dword_412144[eax], bl
		jmp	short loc_402F3A
; ---------------------------------------------------------------------------
		jmp	short loc_402F3A
; ---------------------------------------------------------------------------

loc_402F30:				; CODE XREF: C0()+39Fj	C0()+3B0j
		jmp	loc_402C2B
; ---------------------------------------------------------------------------

loc_402F35:				; CODE XREF: C0()+E1j C0()+EDj
		jmp	loc_402BB8
; ---------------------------------------------------------------------------

loc_402F3A:				; CODE XREF: C0()+5Fj C0()+3CCj ...
		jmp	loc_402B76
; ---------------------------------------------------------------------------

loc_402F3F:				; CODE XREF: C0()+2Cj C0()+38j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
@C0@0		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_402F50	proc near		; CODE XREF: C1()+BBp

var_8		= dword	ptr -8

		push	ebx
		mov	ebx, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+0Ch+var_8], ebp
		mov	ebp, esp
		sub	esp, 0C0h
		mov	[ebp-0Ch], dl
		mov	[ebp-8], cl
		movzx	eax, byte ptr [ebp-8]
		mov	[ebp-40h], eax
		movzx	ecx, byte ptr [ebp-0Ch]
		add	ecx, 10h
		mov	edx, 1
		imul	eax, edx, 0
		mov	byte ptr qword_412180[eax], cl
		mov	ecx, 1
		imul	edx, ecx, 0
		movss	xmm0, dword ptr	qword_412180[edx]
		movss	dword ptr [ebp-4Ch], xmm0
		mov	eax, [ebp-40h]
		xor	eax, 0Ch
		mov	ecx, 1Fh
		sub	ecx, eax
		mov	[ebp-58h], ecx
		mov	dword ptr [ebp-10h], 1
		jmp	short loc_402FC5
; ---------------------------------------------------------------------------

loc_402FBC:				; CODE XREF: sub_402F50:loc_40309Dj
		mov	edx, [ebp-10h]
		add	edx, 1
		mov	[ebp-10h], edx

loc_402FC5:				; CODE XREF: sub_402F50+6Aj
		cmp	dword ptr [ebp-10h], 101h
		jge	loc_4030A2
		mov	eax, [ebp-10h]
		shl	eax, 9
		add	eax, offset qword_412180
		mov	[ebp-48h], eax
		xorps	xmm0, xmm0
		movss	dword ptr [ebp-44h], xmm0
		movss	xmm0, dword ptr	[ebp-44h]
		shufps	xmm0, xmm0, 0
		movaps	xmmword	ptr [ebp-70h], xmm0
		movaps	xmm0, xmmword ptr [ebp-70h]
		movaps	xmmword	ptr [ebp-80h], xmm0
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-28h], xmm0
		jmp	short loc_403019
; ---------------------------------------------------------------------------

loc_403007:				; CODE XREF: sub_402F50:loc_403098j
		mov	ecx, [ebp-28h]
		add	ecx, 1
		mov	edx, [ebp-24h]
		adc	edx, 0
		mov	[ebp-28h], ecx
		mov	[ebp-24h], edx

loc_403019:				; CODE XREF: sub_402F50+B5j
		cmp	dword ptr [ebp-24h], 0
		jg	short loc_40309D
		jl	short loc_403027
		cmp	dword ptr [ebp-28h], 4
		jnb	short loc_40309D

loc_403027:				; CODE XREF: sub_402F50+CFj
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-20h], xmm0
		jmp	short loc_403043
; ---------------------------------------------------------------------------

loc_403031:				; CODE XREF: sub_402F50+146j
		mov	eax, [ebp-20h]
		add	eax, 1
		mov	ecx, [ebp-1Ch]
		adc	ecx, 0
		mov	[ebp-20h], eax
		mov	[ebp-1Ch], ecx

loc_403043:				; CODE XREF: sub_402F50+DFj
		cmp	dword ptr [ebp-1Ch], 0
		jg	short loc_403098
		jl	short loc_403051
		cmp	dword ptr [ebp-20h], 4
		jnb	short loc_403098

loc_403051:				; CODE XREF: sub_402F50+F9j
		movaps	xmm0, xmmword ptr [ebp-80h]
		push	0
		push	4
		mov	edx, [ebp-1Ch]
		push	edx
		mov	eax, [ebp-20h]
		push	eax
		movaps	xmmword	ptr [ebp-90h], xmm0
		call	sub_406AD0
		add	eax, [ebp-28h]
		adc	edx, [ebp-24h]
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		add	eax, [ebp-48h]
		movaps	xmm0, xmmword ptr [ebp-90h]
		movntps	xmmword	ptr [eax], xmm0
		jmp	short loc_403031
; ---------------------------------------------------------------------------

loc_403098:				; CODE XREF: sub_402F50+F7j
					; sub_402F50+FFj
		jmp	loc_403007
; ---------------------------------------------------------------------------

loc_40309D:				; CODE XREF: sub_402F50+CDj
					; sub_402F50+D5j
		jmp	loc_402FBC
; ---------------------------------------------------------------------------

loc_4030A2:				; CODE XREF: sub_402F50+7Cj
		mov	dword ptr [ebp-14h], 1Dh
		jmp	short loc_4030B4
; ---------------------------------------------------------------------------

loc_4030AB:				; CODE XREF: sub_402F50:loc_403221j
		mov	ecx, [ebp-14h]
		sub	ecx, 1
		mov	[ebp-14h], ecx

loc_4030B4:				; CODE XREF: sub_402F50+159j
		cmp	dword ptr [ebp-14h], 0
		jl	loc_403226
		mov	edx, 1
		imul	eax, edx, 0
		add	eax, offset qword_412180
		mov	[ebp-54h], eax
		movss	xmm0, dword ptr	[ebp-4Ch]
		movss	dword ptr [ebp-50h], xmm0
		movss	xmm0, dword ptr	[ebp-50h]
		shufps	xmm0, xmm0, 0
		movaps	xmmword	ptr [ebp-0A0h],	xmm0
		movaps	xmm0, xmmword ptr [ebp-0A0h]
		movaps	xmmword	ptr [ebp-0B0h],	xmm0
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-38h], xmm0
		jmp	short loc_403112
; ---------------------------------------------------------------------------

loc_403100:				; CODE XREF: sub_402F50:loc_403198j
		mov	ecx, [ebp-38h]
		add	ecx, 1
		mov	edx, [ebp-34h]
		adc	edx, 0
		mov	[ebp-38h], ecx
		mov	[ebp-34h], edx

loc_403112:				; CODE XREF: sub_402F50+1AEj
		cmp	dword ptr [ebp-34h], 0
		jg	loc_40319D
		jl	short loc_403124
		cmp	dword ptr [ebp-38h], 4
		jnb	short loc_40319D

loc_403124:				; CODE XREF: sub_402F50+1CCj
		xorps	xmm0, xmm0
		movlpd	qword ptr [ebp-30h], xmm0
		jmp	short loc_403140
; ---------------------------------------------------------------------------

loc_40312E:				; CODE XREF: sub_402F50+246j
		mov	eax, [ebp-30h]
		add	eax, 1
		mov	ecx, [ebp-2Ch]
		adc	ecx, 0
		mov	[ebp-30h], eax
		mov	[ebp-2Ch], ecx

loc_403140:				; CODE XREF: sub_402F50+1DCj
		cmp	dword ptr [ebp-2Ch], 0
		jg	short loc_403198
		jl	short loc_40314E
		cmp	dword ptr [ebp-30h], 4
		jnb	short loc_403198

loc_40314E:				; CODE XREF: sub_402F50+1F6j
		movaps	xmm0, xmmword ptr [ebp-0B0h]
		push	0
		push	4
		mov	edx, [ebp-2Ch]
		push	edx
		mov	eax, [ebp-30h]
		push	eax
		movaps	xmmword	ptr [ebp-0C0h],	xmm0
		call	sub_406AD0
		add	eax, [ebp-38h]
		adc	edx, [ebp-34h]
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		push	0
		push	4
		push	edx
		push	eax
		call	sub_406AD0
		add	eax, [ebp-54h]
		movaps	xmm0, xmmword ptr [ebp-0C0h]
		movntps	xmmword	ptr [eax], xmm0
		jmp	short loc_40312E
; ---------------------------------------------------------------------------

loc_403198:				; CODE XREF: sub_402F50+1F4j
					; sub_402F50+1FCj
		jmp	loc_403100
; ---------------------------------------------------------------------------

loc_40319D:				; CODE XREF: sub_402F50+1C6j
					; sub_402F50+1D2j
		mov	dword ptr [ebp-3Ch], 0
		jmp	short loc_4031AF
; ---------------------------------------------------------------------------

loc_4031A6:				; CODE XREF: sub_402F50+265j
		mov	ecx, [ebp-3Ch]
		add	ecx, 1
		mov	[ebp-3Ch], ecx

loc_4031AF:				; CODE XREF: sub_402F50+254j
		cmp	dword ptr [ebp-3Ch], 64h
		jge	short loc_4031B7
		jmp	short loc_4031A6
; ---------------------------------------------------------------------------

loc_4031B7:				; CODE XREF: sub_402F50+263j
		mov	eax, [ebp-14h]
		cdq
		mov	ecx, 6
		idiv	ecx
		sub	edx, 1
		and	edx, 0FFFF0000h
		mov	[ebp-4], edx
		mov	edx, [ebp-4]
		shr	edx, 10h
		or	edx, [ebp-4]
		mov	[ebp-4], edx
		mov	eax, [ebp-58h]
		xor	eax, [ebp-40h]
		and	eax, [ebp-4]
		xor	eax, [ebp-40h]
		mov	[ebp-4], eax
		mov	ecx, [ebp-4]
		add	ecx, 10h
		mov	[ebp-4], ecx
		mov	edx, 1
		imul	eax, edx, 0
		movzx	ecx, byte ptr qword_412180[eax]
		mov	edx, [ebp-4]
		sub	edx, ecx
		jnz	short loc_403221
		mov	eax, [ebp-4]
		shl	eax, 9
		movzx	ecx, byte ptr qword_412180[eax]
		and	ecx, dword_412140
		mov	dword_412140, ecx

loc_403221:				; CODE XREF: sub_402F50+2B6j
		jmp	loc_4030AB
; ---------------------------------------------------------------------------

loc_403226:				; CODE XREF: sub_402F50+168j
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
sub_402F50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. @C1@0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall C1()
		public @C1@0
@C1@0		proc near		; CODE XREF: sub_4034B0+129p
					; DATA XREF: .rdata:off_409A08o

var_434		= dword	ptr -434h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_9		= byte ptr -9
var_8		= dword	ptr -8
var_2		= byte ptr -2
var_1		= byte ptr -1

		push	ebp
		mov	ebp, esp
		sub	esp, 434h
		push	ebx
		mov	[ebp+var_1], 0
		jmp	short loc_403248
; ---------------------------------------------------------------------------

loc_403240:				; CODE XREF: C1()+268j
		mov	al, [ebp+var_1]
		add	al, 1
		mov	[ebp+var_1], al

loc_403248:				; CODE XREF: C1()+Ej
		movzx	ecx, [ebp+var_1]
		cmp	ecx, 18h
		jge	loc_40349D
		movzx	eax, [ebp+var_1]
		cdq
		sub	eax, edx
		sar	eax, 1
		movzx	edx, byte ptr dword_412144[eax]
		movzx	eax, [ebp+var_1]
		mov	ecx, eax
		and	ecx, 80000001h
		jns	short loc_403278
		dec	ecx
		or	ecx, 0FFFFFFFEh
		inc	ecx

loc_403278:				; CODE XREF: C1()+41j
		shl	ecx, 2
		sar	edx, cl
		and	edx, 0Fh
		mov	[ebp+var_9], dl

loc_403283:				; CODE XREF: C1()+206j
		mov	[ebp+var_8], 0
		jmp	short loc_403295
; ---------------------------------------------------------------------------

loc_40328C:				; CODE XREF: C1()+7Cj
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx

loc_403295:				; CODE XREF: C1()+5Aj
		cmp	[ebp+var_8], 100h
		jge	short loc_4032AE
		mov	edx, [ebp+var_8]
		mov	[ebp+edx*4+var_434], 0
		jmp	short loc_40328C
; ---------------------------------------------------------------------------

loc_4032AE:				; CODE XREF: C1()+6Cj
		mov	[ebp+var_2], 0
		jmp	short loc_4032BC
; ---------------------------------------------------------------------------

loc_4032B4:				; CODE XREF: C1():loc_40338Fj
		mov	al, [ebp+var_2]
		add	al, 1
		mov	[ebp+var_2], al

loc_4032BC:				; CODE XREF: C1()+82j
		movzx	ecx, [ebp+var_2]
		cmp	ecx, 10h
		jge	loc_403394
		mov	[ebp+var_18], 80h
		jmp	short loc_4032DB
; ---------------------------------------------------------------------------

loc_4032D2:				; CODE XREF: C1():loc_40338Aj
		mov	edx, [ebp+var_18]
		sub	edx, 1
		mov	[ebp+var_18], edx

loc_4032DB:				; CODE XREF: C1()+A0j
		cmp	[ebp+var_18], 0
		jle	loc_40338F
		mov	dl, [ebp+var_2]
		mov	cl, [ebp+var_9]
		call	sub_402F50
		mov	[ebp+var_8], 0
		jmp	short loc_403302
; ---------------------------------------------------------------------------

loc_4032F9:				; CODE XREF: C1():loc_403385j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_403302:				; CODE XREF: C1()+C7j
		cmp	[ebp+var_8], 100h
		jge	short loc_40338A
		imul	ecx, [ebp+var_8], 0A7h
		add	ecx, 9
		and	ecx, 0FFh
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+var_1C]
		add	edx, 1
		shl	edx, 9
		add	edx, offset qword_412180
		mov	[ebp+var_20], edx
		rdtscp
		mov	[ebp+var_24], ecx
		mov	[ebp+var_2C], eax
		mov	[ebp+var_28], edx
		mov	eax, [ebp+var_20]
		movzx	ecx, byte ptr [eax]
		xor	ecx, dword_412140
		mov	dword_412140, ecx
		rdtscp
		mov	[ebp+var_24], ecx
		sub	eax, [ebp+var_2C]
		sbb	edx, [ebp+var_28]
		mov	[ebp+var_34], eax
		mov	[ebp+var_30], edx
		cmp	[ebp+var_30], 0
		ja	short loc_403385
		jb	short loc_40336E
		cmp	[ebp+var_34], 3Ch
		ja	short loc_403385

loc_40336E:				; CODE XREF: C1()+136j
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+edx*4+var_434]
		add	eax, 1
		mov	ecx, [ebp+var_1C]
		mov	[ebp+ecx*4+var_434], eax

loc_403385:				; CODE XREF: C1()+134j	C1()+13Cj
		jmp	loc_4032F9
; ---------------------------------------------------------------------------

loc_40338A:				; CODE XREF: C1()+D9j
		jmp	loc_4032D2
; ---------------------------------------------------------------------------

loc_40338F:				; CODE XREF: C1()+AFj
		jmp	loc_4032B4
; ---------------------------------------------------------------------------

loc_403394:				; CODE XREF: C1()+93j
		mov	[ebp+var_10], 0FFFFFFFFh
		mov	edx, [ebp+var_10]
		mov	[ebp+var_14], edx
		mov	[ebp+var_8], 1Fh
		jmp	short loc_4033B3
; ---------------------------------------------------------------------------

loc_4033AA:				; CODE XREF: C1():loc_403405j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_4033B3:				; CODE XREF: C1()+178j
		cmp	[ebp+var_8], 2Fh
		jge	short loc_403407
		cmp	[ebp+var_14], 0
		jl	short loc_4033D5
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+ecx*4+var_434]
		cmp	eax, [ebp+edx*4+var_434]
		jl	short loc_4033E3

loc_4033D5:				; CODE XREF: C1()+18Dj
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_8]
		mov	[ebp+var_14], edx
		jmp	short loc_403405
; ---------------------------------------------------------------------------

loc_4033E3:				; CODE XREF: C1()+1A3j
		cmp	[ebp+var_10], 0
		jl	short loc_4033FF
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+eax*4+var_434]
		cmp	edx, [ebp+ecx*4+var_434]
		jl	short loc_403405

loc_4033FF:				; CODE XREF: C1()+1B7j
		mov	eax, [ebp+var_8]
		mov	[ebp+var_10], eax

loc_403405:				; CODE XREF: C1()+1B1j	C1()+1CDj
		jmp	short loc_4033AA
; ---------------------------------------------------------------------------

loc_403407:				; CODE XREF: C1()+187j
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+ecx*4+var_434]
		cmp	eax, [ebp+edx*4+var_434]
		jz	short loc_40343B
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+ecx*4+var_434]
		add	edx, 32h
		mov	eax, [ebp+var_14]
		cmp	[ebp+eax*4+var_434], edx
		jge	short loc_40343B
		jmp	loc_403283
; ---------------------------------------------------------------------------

loc_40343B:				; CODE XREF: C1()+1EBj	C1()+204j
		movzx	eax, [ebp+var_1]
		cdq
		sub	eax, edx
		sar	eax, 1
		movzx	ebx, byte ptr dword_412144[eax]
		movzx	ecx, [ebp+var_1]
		add	ecx, 1
		and	ecx, 80000001h
		jns	short loc_40345F
		dec	ecx
		or	ecx, 0FFFFFFFEh
		inc	ecx

loc_40345F:				; CODE XREF: C1()+228j
		shl	ecx, 2
		mov	edx, 0Fh
		shl	edx, cl
		and	ebx, edx
		mov	eax, [ebp+var_14]
		sub	eax, 1Fh
		movzx	ecx, [ebp+var_1]
		and	ecx, 80000001h
		jns	short loc_403482
		dec	ecx
		or	ecx, 0FFFFFFFEh
		inc	ecx

loc_403482:				; CODE XREF: C1()+24Bj
		shl	ecx, 2
		shl	eax, cl
		or	ebx, eax
		movzx	eax, [ebp+var_1]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	byte ptr dword_412144[eax], bl
		jmp	loc_403240
; ---------------------------------------------------------------------------

loc_40349D:				; CODE XREF: C1()+1Fj
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
@C1@0		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4034B0	proc near		; CODE XREF: start-7Bp

Memory		= dword	ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_4034B0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_1C], 0Fh
		mov	[ebp+var_20], 0
		mov	byte ptr [ebp+Memory], 0
		mov	[ebp+var_4], 0
		mov	ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
		push	offset loc_4054E0
		mov	[ebp+var_18], 0D58084AAh
		mov	[ebp+var_14], 7B69D96Eh
		mov	[ebp+var_10], 0A1F02B8Ah
		call	sub_4052D0
		mov	ecx, eax
		call	ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> &	(*)(std::basic_ostream<char,std::char_traits<char>> &))
		mov	ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
		mov	edx, offset aWelcomeToPediy ; "Welcome to PEDIY-JD CTF 2018!"
		push	offset loc_4054E0
		call	sub_4050A0
		mov	ecx, eax
		call	ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> &	(*)(std::basic_ostream<char,std::char_traits<char>> &))
		mov	ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
		mov	edx, offset aPleaseInputYou ; "Please input your flag: "
		call	sub_4050A0
		mov	esi, ds:?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A	; std::basic_istream<char,std::char_traits<char>> std::cin
		push	0Ah
		mov	eax, [esi]
		mov	ecx, [eax+4]
		add	ecx, esi
		call	ds:?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char>>::widen(char)
		movzx	eax, al
		lea	edx, [ebp+Memory]
		push	eax
		mov	ecx, esi
		call	sub_4059F0
		mov	edx, [ebp+var_1C]
		lea	esi, [ebp+Memory]
		mov	edi, [ebp+Memory]
		cmp	edx, 10h
		mov	ebx, ds:isalnum
		cmovnb	esi, edi
		nop	dword ptr [eax+00000000h]

loc_403580:				; CODE XREF: sub_4034B0+F6j
		mov	eax, [ebp+var_20]
		lea	ecx, [ebp+Memory]
		cmp	edx, 10h
		cmovnb	ecx, edi
		add	eax, ecx
		cmp	esi, eax
		jz	short loc_4035A8
		movsx	eax, byte ptr [esi]
		push	eax		; C
		call	ebx ; isalnum
		add	esp, 4
		test	eax, eax
		jz	short loc_40360B
		mov	edx, [ebp+var_1C]
		inc	esi
		mov	edi, [ebp+Memory]
		jmp	short loc_403580
; ---------------------------------------------------------------------------

loc_4035A8:				; CODE XREF: sub_4034B0+E0j
		cmp	edx, 10h
		lea	eax, [ebp+Memory]
		cmovnb	eax, edi
		sub	esi, eax
		cmp	esi, 10h
		jnz	short loc_40360B
		cmp	edx, esi
		lea	ecx, [ebp+Memory]
		cmovnb	ecx, edi
		call	sub_401DF0
		call	sub_401E80
		call	@T0@0		; T0()
		call	@C0@0		; C0()
		call	@T1@0		; T1()
		call	@C1@0		; C1()
		call	@T2@0		; T2()
		lea	ecx, [ebp+var_18]
		mov	eax, [ecx]
		cmp	eax, dword_412144
		jnz	short loc_40360B
		mov	eax, [ecx+4]
		cmp	eax, dword_412148
		jnz	short loc_40360B
		mov	eax, [ecx+8]
		mov	edx, offset aCongratulation ; "Congratulations!"
		cmp	eax, dword_41214C
		jz	short loc_403610

loc_40360B:				; CODE XREF: sub_4034B0+EDj
					; sub_4034B0+106j ...
		mov	edx, offset aWrongFlagTryHa ; "Wrong flag, try harder."

loc_403610:				; CODE XREF: sub_4034B0+159j
		mov	ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout
		push	offset loc_4054E0
		call	sub_4050A0
		mov	ecx, eax
		call	ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(std::basic_ostream<char,std::char_traits<char>> &	(*)(std::basic_ostream<char,std::char_traits<char>> &))
		mov	eax, [ebp+var_1C]
		pop	edi
		pop	esi
		pop	ebx
		cmp	eax, 10h
		jb	short loc_403679
		mov	ecx, [ebp+Memory]
		inc	eax
		cmp	eax, 1000h
		jb	short loc_403670
		test	cl, 1Fh
		jz	short loc_403649
		call	ds:_invalid_parameter_noinfo_noreturn

loc_403649:				; CODE XREF: sub_4034B0+191j
		mov	eax, [ecx-4]
		cmp	eax, ecx
		jb	short loc_403656
		call	ds:_invalid_parameter_noinfo_noreturn

loc_403656:				; CODE XREF: sub_4034B0+19Ej
		sub	ecx, eax
		cmp	ecx, 4
		jnb	short loc_403663
		call	ds:_invalid_parameter_noinfo_noreturn

loc_403663:				; CODE XREF: sub_4034B0+1ABj
		cmp	ecx, 23h
		jbe	short loc_40366E
		call	ds:_invalid_parameter_noinfo_noreturn

loc_40366E:				; CODE XREF: sub_4034B0+1B6j
		mov	ecx, eax

loc_403670:				; CODE XREF: sub_4034B0+18Cj
		push	ecx		; Memory
		call	j_free
		add	esp, 4

loc_403679:				; CODE XREF: sub_4034B0+181j
		mov	ecx, [ebp+var_C]
		xor	eax, eax
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_4034B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403690	proc near		; CODE XREF: T0()+24Ap

var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403750
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, ds:?_Get_amp_trace@details@Concurrency@@YAPAV_Amp_runtime_trace@12@XZ ; Concurrency::details::_Get_amp_trace(void)
		lea	eax, [esi+14h]
		push	eax
		call	edi ; Concurrency::details::_Get_amp_trace(void) ; Concurrency::details::_Get_amp_trace(void)
		mov	ecx, eax
		call	ds:?_Start_array_view_synchronize_event_helper@_Amp_runtime_trace@details@Concurrency@@QAEKABU_Buffer_descriptor@23@@Z ; Concurrency::details::_Amp_runtime_trace::_Start_array_view_synchronize_event_helper(Concurrency::details::_Buffer_descriptor const &)
		mov	ebx, eax
		mov	[ebp+var_10], 0
		mov	[ebp+var_4], 0
		mov	ecx, [esi+18h]
		mov	dl, [ecx+18h]
		test	dl, dl
		jz	short loc_403712
		sub	esp, 8
		push	esp
		call	ds:?_Get_master_accelerator_view@_Ubiquitous_buffer@details@Concurrency@@QBE?AVaccelerator_view@3@XZ ; Concurrency::details::_Ubiquitous_buffer::_Get_master_accelerator_view(void)
		lea	eax, [ebp+var_10]
		push	eax
		push	1
		lea	edx, [esi+14h]
		lea	ecx, [ebp+var_14]
		call	sub_401D70
		mov	ecx, eax
		mov	byte ptr [ebp+var_4], 1
		call	ds:?_Get@_Event@details@Concurrency@@QAEXXZ ; Concurrency::details::_Event::_Get(void)
		lea	ecx, [ebp+var_14]
		mov	byte ptr [ebp+var_4], 0
		call	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)

loc_403712:				; CODE XREF: sub_403690+4Cj
		push	ebx
		call	edi ; Concurrency::details::_Get_amp_trace(void) ; Concurrency::details::_Get_amp_trace(void)
		mov	ecx, eax
		call	ds:?_Write_end_event@_Amp_runtime_trace@details@Concurrency@@QAEXK@Z ; Concurrency::details::_Amp_runtime_trace::_Write_end_event(ulong)
		mov	[ebp+var_4], 2
		mov	ecx, [ebp+var_10]
		test	ecx, ecx
		jz	short loc_40373C
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_40373C
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_40373C:				; CODE XREF: sub_403690+99j
					; sub_403690+A4j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_403690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403750	proc near		; CODE XREF: T0()+157p

var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403750
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, ds:?_Get_amp_trace@details@Concurrency@@YAPAV_Amp_runtime_trace@12@XZ ; Concurrency::details::_Get_amp_trace(void)
		lea	eax, [esi+24h]
		push	eax
		call	edi ; Concurrency::details::_Get_amp_trace(void) ; Concurrency::details::_Get_amp_trace(void)
		mov	ecx, eax
		call	ds:?_Start_array_view_synchronize_event_helper@_Amp_runtime_trace@details@Concurrency@@QAEKABU_Buffer_descriptor@23@@Z ; Concurrency::details::_Amp_runtime_trace::_Start_array_view_synchronize_event_helper(Concurrency::details::_Buffer_descriptor const &)
		mov	ebx, eax
		mov	[ebp+var_10], 0
		mov	[ebp+var_4], 0
		mov	ecx, [esi+28h]
		mov	dl, [ecx+18h]
		test	dl, dl
		jz	short loc_4037D2
		sub	esp, 8
		push	esp
		call	ds:?_Get_master_accelerator_view@_Ubiquitous_buffer@details@Concurrency@@QBE?AVaccelerator_view@3@XZ ; Concurrency::details::_Ubiquitous_buffer::_Get_master_accelerator_view(void)
		lea	eax, [ebp+var_10]
		push	eax
		push	1
		lea	edx, [esi+24h]
		lea	ecx, [ebp+var_14]
		call	sub_401D70
		mov	ecx, eax
		mov	byte ptr [ebp+var_4], 1
		call	ds:?_Get@_Event@details@Concurrency@@QAEXXZ ; Concurrency::details::_Event::_Get(void)
		lea	ecx, [ebp+var_14]
		mov	byte ptr [ebp+var_4], 0
		call	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)

loc_4037D2:				; CODE XREF: sub_403750+4Cj
		push	ebx
		call	edi ; Concurrency::details::_Get_amp_trace(void) ; Concurrency::details::_Get_amp_trace(void)
		mov	ecx, eax
		call	ds:?_Write_end_event@_Amp_runtime_trace@details@Concurrency@@QAEXK@Z ; Concurrency::details::_Amp_runtime_trace::_Write_end_event(ulong)
		mov	[ebp+var_4], 2
		mov	ecx, [ebp+var_10]
		test	ecx, ecx
		jz	short loc_4037FC
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4037FC
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_4037FC:				; CODE XREF: sub_403750+99j
					; sub_403750+A4j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_403750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403810	proc near		; CODE XREF: sub_407040+3j
					; sub_407083+3j ...

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403810
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		push	ecx
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	short loc_403840
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_403840
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403840:				; CODE XREF: sub_403810+1Dj
					; sub_403810+28j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_403810	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_40707B

loc_403850:				; CODE XREF: sub_40707B+3j
					; sub_4070FB+3j ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+14h]
		cmp	eax, 8
		jb	short loc_403864
		inc	eax
		push	eax		; int
		push	dword ptr [esi]	; Memory
		call	sub_4047F0

loc_403864:				; CODE XREF: sub_40707B-3822j
		mov	dword ptr [esi+14h], 7
		cmp	dword ptr [esi+14h], 8
		mov	dword ptr [esi+10h], 0
		jb	short loc_403881
		mov	eax, [esi]
		xor	ecx, ecx
		pop	esi
		mov	[eax], cx
		retn
; ---------------------------------------------------------------------------

loc_403881:				; CODE XREF: sub_40707B-3805j
		xor	eax, eax
		mov	[esi], ax
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_40707B
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_407300

loc_403890:				; CODE XREF: sub_407020+3j
					; sub_407300+5j
		push	esi
		mov	esi, ecx
		mov	eax, [esi+14h]
		cmp	eax, 10h
		jb	short loc_4038E0
		mov	ecx, [esi]
		inc	eax
		cmp	eax, 1000h
		jb	short loc_4038D7
		test	cl, 1Fh
		jz	short loc_4038B0
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4038B0:				; CODE XREF: sub_407300-3A58j
		mov	eax, [ecx-4]
		cmp	eax, ecx
		jb	short loc_4038BD
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4038BD:				; CODE XREF: sub_407300-3A4Bj
		sub	ecx, eax
		cmp	ecx, 4
		jnb	short loc_4038CA
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4038CA:				; CODE XREF: sub_407300-3A3Ej
		cmp	ecx, 23h
		jbe	short loc_4038D5
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4038D5:				; CODE XREF: sub_407300-3A33j
		mov	ecx, eax

loc_4038D7:				; CODE XREF: sub_407300-3A5Dj
		push	ecx		; Memory
		call	j_free
		add	esp, 4

loc_4038E0:				; CODE XREF: sub_407300-3A67j
		mov	dword ptr [esi+14h], 0Fh
		cmp	dword ptr [esi+14h], 10h
		mov	dword ptr [esi+10h], 0
		jb	short loc_4038F6
		mov	esi, [esi]

loc_4038F6:				; CODE XREF: sub_407300-3A0Ej
		mov	byte ptr [esi],	0
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_407300
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403900	proc near		; CODE XREF: T0()+81p

Memory		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403900
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	ebx, ecx
		push	edi
		mov	[ebp+var_10], ebx
		mov	esi, [ebp+arg_4]
		push	esi
		push	ecx
		call	sub_404500
		lea	eax, [ebx+14h]
		mov	dword ptr [eax], 0
		mov	[ebp+var_14], eax
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 40000000h
		mov	[ebp+var_4], 0
		xor	eax, eax
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		mov	[ebp+var_20], 7
		mov	[ebp+var_24], 0
		mov	word ptr [ebp+Memory], ax
		cmp	[edx], ax
		jnz	short loc_403978
		xor	ecx, ecx
		jmp	short loc_40398F
; ---------------------------------------------------------------------------

loc_403978:				; CODE XREF: sub_403900+72j
		mov	ecx, edx
		lea	edi, [ecx+2]
		nop	dword ptr [eax]

loc_403980:				; CODE XREF: sub_403900+89j
		mov	ax, [ecx]
		add	ecx, 2
		test	ax, ax
		jnz	short loc_403980
		sub	ecx, edi
		sar	ecx, 1

loc_40398F:				; CODE XREF: sub_403900+76j
		push	ecx		; int
		push	edx		; Src
		lea	ecx, [ebp+Memory]
		call	sub_403F90
		push	4
		push	dword ptr [esi]
		mov	[ebp+arg_4], 0
		mov	byte ptr [ebp+var_4], 2
		lea	eax, [ebp+Memory]
		cmp	[ebp+var_20], 8
		lea	ecx, [ebp+arg_4]
		cmovnb	eax, [ebp+Memory]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+arg_4]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		push	offset dword_412144
		call	ds:?_Create_buffer@_Buffer@details@Concurrency@@SAPAV123@PAXVaccelerator_view@3@II@Z ; Concurrency::details::_Buffer::_Create_buffer(void *,Concurrency::accelerator_view,uint,uint)
		mov	ebx, eax
		add	esp, 14h
		mov	[ebp+var_18], ebx
		test	ebx, ebx
		jz	short loc_4039E9
		lock inc dword ptr [ebx+4]

loc_4039E9:				; CODE XREF: sub_403900+E3j
		lea	ecx, [ebp+arg_4]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	byte ptr [ebp+var_4], 6
		mov	eax, [ebp+var_20]
		cmp	eax, 8
		jb	short loc_403A08
		inc	eax
		push	eax		; int
		push	[ebp+Memory]	; Memory
		call	sub_4047F0

loc_403A08:				; CODE XREF: sub_403900+FCj
		xor	eax, eax
		mov	[ebp+var_20], 7
		mov	word ptr [ebp+Memory], ax
		mov	[ebp+var_24], 0
		push	ecx
		mov	eax, esp
		mov	[eax], ebx
		test	ebx, ebx
		jz	short loc_403A29
		lock inc dword ptr [ebx+4]

loc_403A29:				; CODE XREF: sub_403900+123j
		call	ds:?_Create_ubiquitous_buffer@_Ubiquitous_buffer@details@Concurrency@@SAPAV123@V?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@@Z ; Concurrency::details::_Ubiquitous_buffer::_Create_ubiquitous_buffer(Concurrency::details::_Reference_counted_obj_ptr<Concurrency::details::_Buffer>)
		mov	edi, eax
		add	esp, 4
		mov	[ebp+arg_4], edi
		test	edi, edi
		jz	short loc_403A3F
		lock inc dword ptr [edi+4]

loc_403A3F:				; CODE XREF: sub_403900+139j
		xor	esi, esi
		mov	[ebp+var_2C], offset dword_412144
		mov	[ebp+var_28], esi
		mov	[ebp+var_24], 3
		mov	[ebp+var_20], 3
		test	edi, edi
		jz	short loc_403A66
		mov	esi, edi
		mov	[ebp+var_28], esi
		lock inc dword ptr [edi+4]

loc_403A66:				; CODE XREF: sub_403900+15Bj
		mov	ecx, [ebp+var_14]
		lea	edx, [ebp+var_2C]
		or	eax, 0FFFFFFFFh
		mov	byte ptr [ebp+var_4], 8
		cmp	ecx, edx
		jz	short loc_403AB7
		mov	edx, [ecx+4]
		mov	dword ptr [ecx], offset	dword_412144
		mov	dword ptr [ecx+8], 3
		mov	dword ptr [ecx+0Ch], 3
		cmp	edx, esi
		jz	short loc_403AB7
		test	edx, edx
		jz	short loc_403AAC
		lock xadd [edx+4], eax
		dec	eax
		jnz	short loc_403AA9
		mov	ecx, edx
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		mov	ecx, [ebp+var_14]

loc_403AA9:				; CODE XREF: sub_403900+19Cj
		or	eax, 0FFFFFFFFh

loc_403AAC:				; CODE XREF: sub_403900+194j
		mov	[ecx+4], esi
		test	esi, esi
		jz	short loc_403AB7
		lock inc dword ptr [esi+4]

loc_403AB7:				; CODE XREF: sub_403900+175j
					; sub_403900+190j ...
		mov	byte ptr [ebp+var_4], 7
		test	esi, esi
		jz	short loc_403ACF
		lock xadd [esi+4], eax
		dec	eax
		jnz	short loc_403ACF
		mov	ecx, esi
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403ACF:				; CODE XREF: sub_403900+1BDj
					; sub_403900+1C5j
		push	ecx
		mov	ecx, [ebp+var_10]
		call	sub_404320
		or	esi, 0FFFFFFFFh
		mov	byte ptr [ebp+var_4], 9
		test	edi, edi
		jz	short loc_403AF9
		mov	eax, esi
		lock xadd [edi+4], eax
		dec	eax
		jnz	short loc_403AF9
		mov	ecx, edi
		mov	edi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		call	edi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)
		jmp	short loc_403AFF
; ---------------------------------------------------------------------------

loc_403AF9:				; CODE XREF: sub_403900+1E1j
					; sub_403900+1EBj
		mov	edi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403AFF:				; CODE XREF: sub_403900+1F7j
		mov	byte ptr [ebp+var_4], 0Ah
		test	ebx, ebx
		jz	short loc_403B13
		lock xadd [ebx+4], esi
		dec	esi
		jnz	short loc_403B13
		mov	ecx, ebx
		call	edi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_403B13:				; CODE XREF: sub_403900+205j
					; sub_403900+20Dj
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_403900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403B30	proc near		; CODE XREF: T0()+B0p T0()+1FDp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403B30
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		push	ecx
		mov	edx, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	ebx, [edx+14h]
		mov	[ebp+var_10], edi
		lea	esi, [edi+14h]
		mov	eax, [edx]
		mov	[edi], eax
		mov	eax, [edx+4]
		mov	[edi+4], eax
		mov	eax, [edx+8]
		mov	[edi+8], eax
		mov	eax, [edx+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [edx+10h]
		mov	[edi+10h], eax
		mov	eax, [ebx]
		mov	[esi], eax
		mov	dword ptr [esi+4], 0
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_403B9B
		mov	[esi+4], eax
		lock inc dword ptr [eax+4]

loc_403B9B:				; CODE XREF: sub_403B30+62j
		push	ebx
		mov	[ebp+var_4], 0
		mov	ecx, [edi+18h]
		push	esi
		call	ds:?_Register_view_copy@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@0@Z ; Concurrency::details::_Ubiquitous_buffer::_Register_view_copy(Concurrency::details::_Buffer_descriptor *,Concurrency::details::_Buffer_descriptor *)
		cmp	esi, ebx
		jz	short loc_403BEB
		mov	eax, [ebx]
		mov	ecx, [esi+4]
		mov	[esi], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		mov	ebx, [ebx+4]
		cmp	ecx, ebx
		jz	short loc_403BEB
		test	ecx, ecx
		jz	short loc_403BE0
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_403BE0
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403BE0:				; CODE XREF: sub_403B30+9Dj
					; sub_403B30+A8j
		mov	[esi+4], ebx
		test	ebx, ebx
		jz	short loc_403BEB
		lock inc dword ptr [ebx+4]

loc_403BEB:				; CODE XREF: sub_403B30+7Fj
					; sub_403B30+99j ...
		mov	ecx, [ebp+var_C]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_403B30	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403C00	proc near		; CODE XREF: T0()+3Dp T0()+66p

Memory		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403C00
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 28h
		push	ebx
		mov	ebx, ecx
		mov	[ebp+var_14], ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, [edi]
		mov	[ebx], eax
		mov	eax, [edi+4]
		mov	[ebx+4], eax
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+10h], 0
		mov	dword ptr [ebx+14h], 0
		mov	dword ptr [ebx+18h], 0
		mov	eax, [edi]
		mov	[ebx+1Ch], eax
		mov	eax, [edi+4]
		mov	[ebx+20h], eax
		call	sub_405510
		mov	eax, [ebx+4]
		mov	[ebx+8], eax
		lea	eax, [ebx+24h]
		mov	[ebp+var_10], eax
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 40000000h
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_4], 0
		test	esi, esi
		jnz	short loc_403CB9
		push	80070057h
		push	offset aInvalidPointer ; "Invalid pointer argument (NULL) to arra"...
		lea	ecx, [ebp+var_2C]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [ebp+var_2C]
		push	eax
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_403CB9:				; CODE XREF: sub_403C00+96j
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		xor	eax, eax
		mov	[ebp+var_20], 7
		mov	[ebp+var_24], 0
		mov	word ptr [ebp+Memory], ax
		cmp	[edx], ax
		jnz	short loc_403CDC
		xor	ecx, ecx
		jmp	short loc_403CF3
; ---------------------------------------------------------------------------

loc_403CDC:				; CODE XREF: sub_403C00+D6j
		mov	ecx, edx
		lea	edi, [ecx+2]

loc_403CE1:				; CODE XREF: sub_403C00+EAj
		mov	ax, [ecx]
		add	ecx, 2
		test	ax, ax
		jnz	short loc_403CE1
		sub	ecx, edi
		mov	edi, [ebp+arg_4]
		sar	ecx, 1

loc_403CF3:				; CODE XREF: sub_403C00+DAj
		push	ecx		; int
		push	edx		; Src
		lea	ecx, [ebp+Memory]
		call	sub_403F90
		mov	eax, [edi+4]
		imul	eax, [edi]
		push	4
		mov	[ebp+arg_4], 0
		push	eax
		mov	byte ptr [ebp+var_4], 2
		lea	eax, [ebp+Memory]
		cmp	[ebp+var_20], 8
		lea	ecx, [ebp+arg_4]
		cmovnb	eax, [ebp+Memory]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+arg_4]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		push	esi
		call	ds:?_Create_buffer@_Buffer@details@Concurrency@@SAPAV123@PAXVaccelerator_view@3@II@Z ; Concurrency::details::_Buffer::_Create_buffer(void *,Concurrency::accelerator_view,uint,uint)
		mov	ebx, eax
		add	esp, 14h
		mov	[ebp+var_18], ebx
		test	ebx, ebx
		jz	short loc_403D4E
		lock inc dword ptr [ebx+4]

loc_403D4E:				; CODE XREF: sub_403C00+148j
		lea	ecx, [ebp+arg_4]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	byte ptr [ebp+var_4], 6
		mov	eax, [ebp+var_20]
		cmp	eax, 8
		jb	short loc_403D6D
		inc	eax
		push	eax		; int
		push	[ebp+Memory]	; Memory
		call	sub_4047F0

loc_403D6D:				; CODE XREF: sub_403C00+161j
		xor	eax, eax
		mov	[ebp+var_20], 7
		mov	word ptr [ebp+Memory], ax
		mov	[ebp+var_24], 0
		push	ecx
		mov	eax, esp
		mov	[eax], ebx
		test	ebx, ebx
		jz	short loc_403D8E
		lock inc dword ptr [ebx+4]

loc_403D8E:				; CODE XREF: sub_403C00+188j
		call	ds:?_Create_ubiquitous_buffer@_Ubiquitous_buffer@details@Concurrency@@SAPAV123@V?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@@Z ; Concurrency::details::_Ubiquitous_buffer::_Create_ubiquitous_buffer(Concurrency::details::_Reference_counted_obj_ptr<Concurrency::details::_Buffer>)
		mov	edi, eax
		add	esp, 4
		mov	[ebp+var_1C], edi
		test	edi, edi
		jz	short loc_403DA4
		lock inc dword ptr [edi+4]

loc_403DA4:				; CODE XREF: sub_403C00+19Ej
		mov	[ebp+var_2C], esi
		xor	esi, esi
		mov	[ebp+var_28], esi
		mov	[ebp+var_24], 3
		mov	[ebp+var_20], 3
		test	edi, edi
		jz	short loc_403DC7
		mov	esi, edi
		mov	[ebp+var_28], esi
		lock inc dword ptr [edi+4]

loc_403DC7:				; CODE XREF: sub_403C00+1BCj
		mov	ecx, [ebp+var_10]
		lea	edx, [ebp+var_2C]
		or	eax, 0FFFFFFFFh
		mov	byte ptr [ebp+var_4], 8
		cmp	ecx, edx
		mov	edx, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		jz	short loc_403E31
		mov	edx, [ebp+arg_0]
		mov	[ecx], edx
		mov	edx, [ecx+4]
		cmp	edx, esi
		mov	[ebp+arg_4], edx
		mov	edx, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		mov	dword ptr [ecx+8], 3
		mov	dword ptr [ecx+0Ch], 3
		jz	short loc_403E31
		cmp	[ebp+arg_4], 0
		jz	short loc_403E26
		mov	ecx, [ebp+arg_4]
		lock xadd [ecx+4], eax
		dec	eax
		mov	ecx, [ebp+var_10]
		jnz	short loc_403E23
		mov	ecx, [ebp+arg_4]
		call	edx ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)
		mov	ecx, [ebp+var_10]
		mov	edx, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403E23:				; CODE XREF: sub_403C00+213j
		or	eax, 0FFFFFFFFh

loc_403E26:				; CODE XREF: sub_403C00+205j
		mov	[ecx+4], esi
		test	esi, esi
		jz	short loc_403E31
		lock inc dword ptr [esi+4]

loc_403E31:				; CODE XREF: sub_403C00+1DCj
					; sub_403C00+1FFj ...
		mov	byte ptr [ebp+var_4], 7
		test	esi, esi
		jz	short loc_403E45
		lock xadd [esi+4], eax
		dec	eax
		jnz	short loc_403E45
		mov	ecx, esi
		call	edx ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_403E45:				; CODE XREF: sub_403C00+237j
					; sub_403C00+23Fj
		push	ecx
		mov	ecx, [ebp+var_14]
		call	sub_404610
		or	esi, 0FFFFFFFFh
		mov	byte ptr [ebp+var_4], 9
		test	edi, edi
		jz	short loc_403E6F
		mov	eax, esi
		lock xadd [edi+4], eax
		dec	eax
		jnz	short loc_403E6F
		mov	ecx, edi
		mov	edi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)
		call	edi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)
		jmp	short loc_403E75
; ---------------------------------------------------------------------------

loc_403E6F:				; CODE XREF: sub_403C00+257j
					; sub_403C00+261j
		mov	edi, ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403E75:				; CODE XREF: sub_403C00+26Dj
		mov	byte ptr [ebp+var_4], 0Ah
		test	ebx, ebx
		jz	short loc_403E89
		lock xadd [ebx+4], esi
		dec	esi
		jnz	short loc_403E89
		mov	ecx, ebx
		call	edi ; Concurrency::details::_Reference_counter::_Release(void) ; Concurrency::details::_Reference_counter::_Release(void)

loc_403E89:				; CODE XREF: sub_403C00+27Bj
					; sub_403C00+283j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_403C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403EA0	proc near		; CODE XREF: T0()+97p T0()+1C8p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_403EA0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		push	ecx
		mov	edx, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	ebx, [edx+24h]
		mov	[ebp+var_10], edi
		lea	esi, [edi+24h]
		mov	eax, [edx]
		mov	[edi], eax
		mov	eax, [edx+4]
		mov	[edi+4], eax
		mov	eax, [edx+8]
		mov	[edi+8], eax
		mov	eax, [edx+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [edx+10h]
		mov	[edi+10h], eax
		mov	eax, [edx+14h]
		mov	[edi+14h], eax
		mov	eax, [edx+18h]
		mov	[edi+18h], eax
		mov	eax, [edx+1Ch]
		mov	[edi+1Ch], eax
		mov	eax, [edx+20h]
		mov	[edi+20h], eax
		mov	eax, [ebx]
		mov	[esi], eax
		mov	dword ptr [esi+4], 0
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_403F23
		mov	[esi+4], eax
		lock inc dword ptr [eax+4]

loc_403F23:				; CODE XREF: sub_403EA0+7Aj
		push	ebx
		mov	[ebp+var_4], 0
		mov	ecx, [edi+28h]
		push	esi
		call	ds:?_Register_view_copy@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@0@Z ; Concurrency::details::_Ubiquitous_buffer::_Register_view_copy(Concurrency::details::_Buffer_descriptor *,Concurrency::details::_Buffer_descriptor *)
		cmp	esi, ebx
		jz	short loc_403F73
		mov	eax, [ebx]
		mov	ecx, [esi+4]
		mov	[esi], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [ebx+0Ch]
		mov	[esi+0Ch], eax
		mov	ebx, [ebx+4]
		cmp	ecx, ebx
		jz	short loc_403F73
		test	ecx, ecx
		jz	short loc_403F68
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_403F68
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_403F68:				; CODE XREF: sub_403EA0+B5j
					; sub_403EA0+C0j
		mov	[esi+4], ebx
		test	ebx, ebx
		jz	short loc_403F73
		lock inc dword ptr [ebx+4]

loc_403F73:				; CODE XREF: sub_403EA0+97j
					; sub_403EA0+B1j ...
		mov	ecx, [ebp+var_C]
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_403EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_403F90(void	*Src, int)
sub_403F90	proc near		; CODE XREF: sub_403900+94p
					; sub_403C00+F8p ...

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+Src]
		push	esi
		mov	esi, ecx
		test	ebx, ebx
		jz	short loc_403FE4
		mov	ecx, [esi+14h]
		cmp	ecx, 8
		jb	short loc_403FA8
		mov	eax, [esi]
		jmp	short loc_403FAA
; ---------------------------------------------------------------------------

loc_403FA8:				; CODE XREF: sub_403F90+12j
		mov	eax, esi

loc_403FAA:				; CODE XREF: sub_403F90+16j
		cmp	ebx, eax
		jb	short loc_403FE4
		cmp	ecx, 8
		jb	short loc_403FB7
		mov	edx, [esi]
		jmp	short loc_403FB9
; ---------------------------------------------------------------------------

loc_403FB7:				; CODE XREF: sub_403F90+21j
		mov	edx, esi

loc_403FB9:				; CODE XREF: sub_403F90+25j
		mov	eax, [esi+10h]
		lea	eax, [edx+eax*2]
		cmp	eax, ebx
		jbe	short loc_403FE4
		cmp	ecx, 8
		jb	short loc_403FCC
		mov	eax, [esi]
		jmp	short loc_403FCE
; ---------------------------------------------------------------------------

loc_403FCC:				; CODE XREF: sub_403F90+36j
		mov	eax, esi

loc_403FCE:				; CODE XREF: sub_403F90+3Aj
		push	[esp+8+arg_4]
		sub	ebx, eax
		mov	ecx, esi
		sar	ebx, 1
		push	ebx
		push	esi
		call	sub_404850
		pop	esi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_403FE4:				; CODE XREF: sub_403F90+Aj
					; sub_403F90+1Cj ...
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	edi, 7FFFFFFEh
		jbe	short loc_403FFC
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_403FFC:				; CODE XREF: sub_403F90+5Fj
		cmp	[esi+14h], edi
		jnb	short loc_40401A
		push	dword ptr [esi+10h]
		mov	ecx, esi
		push	edi
		call	sub_404C70
		test	edi, edi
		jz	short loc_404078

loc_404010:				; CODE XREF: sub_403F90+8Cj
		cmp	dword ptr [esi+14h], 8
		jb	short loc_404043
		mov	ecx, [esi]
		jmp	short loc_404045
; ---------------------------------------------------------------------------

loc_40401A:				; CODE XREF: sub_403F90+6Fj
		test	edi, edi
		jnz	short loc_404010
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], edi
		jb	short loc_404036
		mov	eax, [esi]
		xor	ecx, ecx
		pop	edi
		mov	[eax], cx
		mov	eax, esi
		pop	esi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_404036:				; CODE XREF: sub_403F90+95j
		mov	eax, esi
		xor	ecx, ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	[eax], cx
		retn	8
; ---------------------------------------------------------------------------

loc_404043:				; CODE XREF: sub_403F90+84j
		mov	ecx, esi

loc_404045:				; CODE XREF: sub_403F90+88j
		test	edi, edi
		jz	short loc_404057
		lea	eax, [edi+edi]
		push	eax		; Size
		push	ebx		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_404057:				; CODE XREF: sub_403F90+B7j
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], edi
		jb	short loc_404070
		mov	eax, [esi]
		xor	ecx, ecx
		mov	[eax+edi*2], cx
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_404070:				; CODE XREF: sub_403F90+CEj
		mov	eax, esi
		xor	ecx, ecx
		mov	[eax+edi*2], cx

loc_404078:				; CODE XREF: sub_403F90+7Ej
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn	8
sub_403F90	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_404080(void *Dst, char, size_t Size)
sub_404080	proc near		; CODE XREF: sub_405021+7p

arg_0		= byte ptr  4
Size		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+Size]
		mov	esi, ecx
		jz	short loc_4040ED
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_4040ED
		mov	ebx, [esi]
		test	edi, edi
		jz	short loc_4040A7
		push	edi		; Size
		push	ebx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_4040A7:				; CODE XREF: sub_404080+1Aj
		mov	eax, [esi+14h]
		inc	eax
		cmp	eax, 1000h
		jb	short loc_4040E4
		test	bl, 1Fh
		jz	short loc_4040BD
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4040BD:				; CODE XREF: sub_404080+35j
		mov	eax, [ebx-4]
		cmp	eax, ebx
		jb	short loc_4040CA
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4040CA:				; CODE XREF: sub_404080+42j
		sub	ebx, eax
		cmp	ebx, 4
		jnb	short loc_4040D7
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4040D7:				; CODE XREF: sub_404080+4Fj
		cmp	ebx, 23h
		jbe	short loc_4040E2
		call	ds:_invalid_parameter_noinfo_noreturn

loc_4040E2:				; CODE XREF: sub_404080+5Aj
		mov	ebx, eax

loc_4040E4:				; CODE XREF: sub_404080+30j
		push	ebx		; Memory
		call	j_free
		add	esp, 4

loc_4040ED:				; CODE XREF: sub_404080+Ej
					; sub_404080+14j
		mov	dword ptr [esi+14h], 0Fh
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edi
		jb	short loc_4040FF
		mov	esi, [esi]

loc_4040FF:				; CODE XREF: sub_404080+7Bj
		mov	byte ptr [esi+edi], 0
		pop	edi
		pop	esi
		pop	ebx
		retn	8
sub_404080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_404110(int,	size_t Size)
sub_404110	proc near		; CODE XREF: sub_401C50+2Bp

Size		= dword	ptr  8

		mov	edx, dword_432394
		cmp	edx, 10h
		mov	ecx, Size
		push	ebx
		mov	ebx, Dst
		push	edi
		mov	edi, offset Dst
		mov	eax, edi
		cmovnb	eax, ebx
		cmp	eax, offset a_	; "			       :/:.	  "...
		ja	short loc_404166
		cmp	edx, 10h
		mov	eax, edi
		cmovnb	eax, ebx
		add	eax, ecx
		cmp	eax, offset a_	; "			       :/:.	  "...
		jbe	short loc_404166
		push	[esp+8+Size]
		cmp	edx, 10h
		mov	eax, offset a_	; "			       :/:.	  "...
		cmovnb	edi, ebx
		sub	eax, edi
		push	eax
		push	ecx
		call	sub_404200
		pop	edi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_404166:				; CODE XREF: sub_404110+26j
					; sub_404110+37j
		push	esi
		mov	esi, [esp+0Ch+Size]
		cmp	esi, 0FFFFFFFEh
		jbe	short loc_40417B
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_40417B:				; CODE XREF: sub_404110+5Ej
		cmp	edx, esi
		jnb	short loc_4041D9
		push	ecx		; Size
		push	esi		; int
		mov	ecx, edi
		call	sub_404EA0
		mov	edx, dword_432394
		mov	ebx, Dst
		test	esi, esi
		jz	short loc_4041D1

loc_404198:				; CODE XREF: sub_404110+CBj
		cmp	edx, 10h
		mov	eax, edi
		cmovnb	eax, ebx
		test	esi, esi
		jz	short loc_4041BF
		push	esi		; Size
		push	offset a_	; "			       :/:.	  "...
		push	eax		; Dst
		call	memcpy
		mov	edx, dword_432394
		add	esp, 0Ch
		mov	ebx, Dst

loc_4041BF:				; CODE XREF: sub_404110+92j
		cmp	edx, 10h
		mov	Size, esi
		mov	ecx, edi
		cmovnb	ecx, ebx
		mov	byte ptr [ecx+esi], 0

loc_4041D1:				; CODE XREF: sub_404110+86j
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_4041D9:				; CODE XREF: sub_404110+6Dj
		test	esi, esi
		jnz	short loc_404198
		mov	eax, edi
		mov	Size, esi
		cmp	edx, 10h
		pop	esi
		cmovnb	eax, ebx
		mov	byte ptr [eax],	0
		mov	eax, edi
		pop	edi
		pop	ebx
		retn	8
sub_404110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404200	proc near		; CODE XREF: sub_404110+4Cp

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_4]
		push	esi
		mov	esi, Size
		cmp	esi, edx
		jnb	short loc_40421A
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_40421A:				; CODE XREF: sub_404200+Dj
		mov	eax, [esp+4+arg_8]
		mov	ecx, esi
		sub	ecx, edx
		cmp	eax, ecx
		cmova	eax, ecx
		add	eax, edx
		cmp	esi, eax
		jnb	short loc_404238
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_404238:				; CODE XREF: sub_404200+2Bj
		cmp	dword_432394, 10h
		mov	ecx, offset Dst
		push	edx
		cmovnb	ecx, Dst
		mov	Size, eax
		push	ecx
		mov	byte ptr [ecx+eax], 0
		call	sub_404960
		mov	eax, offset Dst
		pop	esi
		retn	0Ch
sub_404200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404270	proc near		; CODE XREF: T0()+FCp T0()+253p ...

var_24		= byte ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404270
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		lea	ecx, [ebp+var_24]
		mov	[ebp+var_1C], 0
		xor	bh, bh
		call	sub_401D30
		mov	[ebp+var_4], 0
		push	eax
		mov	[ebp+var_1C], 1
		call	ds:?__ExceptionPtrToBool@@YA_NPBX@Z ; __ExceptionPtrToBool(void	const *)
		test	al, al
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	eax, [ebp+var_24]
		push	eax
		setz	bl
		call	ds:?__ExceptionPtrDestroy@@YAXPAX@Z ; __ExceptionPtrDestroy(void *)
		add	esp, 8
		movzx	eax, bh
		mov	ecx, 1
		test	bl, bl
		mov	[ebp+var_4], ecx
		cmovnz	eax, ecx
		mov	ecx, [esi+18h]
		mov	[ebp+var_18], al
		lea	eax, [esi+14h]
		push	eax
		call	ds:?_Unregister_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@@Z ; Concurrency::details::_Ubiquitous_buffer::_Unregister_view(Concurrency::details::_Buffer_descriptor *)

loc_4042F2:				; DATA XREF: sub_404305:loc_404314o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_404270	endp


; =============== S U B	R O U T	I N E =======================================


sub_404305	proc near		; DATA XREF: .rdata:00409548o
		cmp	byte ptr [ebp-18h], 0
		jz	short loc_404314
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_404314:				; CODE XREF: sub_404305+4j
		mov	eax, offset loc_4042F2
		retn
sub_404305	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404320	proc near		; CODE XREF: sub_403900+1D3p

var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Memory		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404610
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 44h
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		xor	eax, eax
		push	ebx
		push	esi
		mov	[ebp+var_24], 7
		mov	esi, ecx
		mov	[ebp+var_28], 0
		mov	word ptr [ebp+Memory], ax
		push	edi
		cmp	[edx], ax
		jz	short loc_404373
		mov	eax, edx
		lea	edi, [eax+2]

loc_404364:				; CODE XREF: sub_404320+4Dj
		mov	cx, [eax]
		add	eax, 2
		test	cx, cx
		jnz	short loc_404364
		sub	eax, edi
		sar	eax, 1

loc_404373:				; CODE XREF: sub_404320+3Dj
		push	eax		; int
		push	edx		; Src
		lea	ecx, [ebp+Memory]
		call	sub_403F90
		push	0
		mov	ecx, esi
		mov	[ebp+var_4], 0
		call	sub_404AA0
		push	ecx
		mov	[ebp+var_20], esp
		mov	ecx, esp
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_40439D
		lock inc dword ptr [eax+4]

loc_40439D:				; CODE XREF: sub_404320+77j
		mov	[ebp+var_14], 0
		mov	byte ptr [ebp+var_4], 2
		lea	eax, [ebp+Memory]
		cmp	[ebp+var_24], 8
		lea	ecx, [ebp+var_14]
		cmovnb	eax, [ebp+Memory]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_14]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		mov	ecx, [esi+18h]
		lea	edi, [esi+14h]
		mov	byte ptr [ebp+var_4], 4
		push	edi
		call	ds:?_Register_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@Vaccelerator_view@3@V?$_Reference_counted_obj_ptr@V_View_shape@details@Concurrency@@@23@QAU423@@Z ; Concurrency::details::_Ubiquitous_buffer::_Register_view(Concurrency::details::_Buffer_descriptor *,Concurrency::accelerator_view,Concurrency::details::_Reference_counted_obj_ptr<Concurrency::details::_View_shape>,Concurrency::details::_Buffer_descriptor * const)
		lea	ecx, [ebp+var_14]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_24]
		cmp	eax, 8
		jb	short loc_404401
		inc	eax
		push	eax		; int
		push	[ebp+Memory]	; Memory
		call	sub_4047F0

loc_404401:				; CODE XREF: sub_404320+D5j
		cmp	dword ptr [esi+1Ch], 0
		jz	loc_4044EC
		mov	[ebp+var_1C], 0
		mov	[ebp+var_4], 5
		xor	eax, eax
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		mov	[ebp+var_3C], 7
		mov	[ebp+var_40], 0
		mov	word ptr [ebp+var_50], ax
		cmp	[edx], ax
		jnz	short loc_40443C
		xor	ecx, ecx
		jmp	short loc_404450
; ---------------------------------------------------------------------------

loc_40443C:				; CODE XREF: sub_404320+116j
		mov	ecx, edx
		lea	ebx, [ecx+2]

loc_404441:				; CODE XREF: sub_404320+12Aj
		mov	ax, [ecx]
		add	ecx, 2
		test	ax, ax
		jnz	short loc_404441
		sub	ecx, ebx
		sar	ecx, 1

loc_404450:				; CODE XREF: sub_404320+11Aj
		push	ecx		; int
		push	edx		; Src
		lea	ecx, [ebp+var_50]
		call	sub_403F90
		mov	[ebp+var_18], 0
		mov	byte ptr [ebp+var_4], 7
		lea	eax, [ebp+var_50]
		cmp	[ebp+var_3C], 8
		lea	ecx, [ebp+var_18]
		cmovnb	eax, [ebp+var_50]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 8
		lea	ecx, [ebp+var_18]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		lea	eax, [ebp+var_1C]
		mov	edx, edi
		push	eax
		push	dword ptr [esi+1Ch]
		lea	ecx, [ebp+var_20]
		call	sub_401D70
		mov	ecx, eax
		mov	byte ptr [ebp+var_4], 9
		call	ds:?_Get@_Event@details@Concurrency@@QAEXXZ ; Concurrency::details::_Event::_Get(void)
		lea	ecx, [ebp+var_20]
		call	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)
		lea	ecx, [ebp+var_18]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	eax, [ebp+var_3C]
		cmp	eax, 8
		jb	short loc_4044CC
		inc	eax
		push	eax		; int
		push	[ebp+var_50]	; Memory
		call	sub_4047F0

loc_4044CC:				; CODE XREF: sub_404320+1A0j
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx+14h]
		mov	[edi], eax
		mov	[ebp+var_4], 0Ah
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4044EC
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_4044EC:				; CODE XREF: sub_404320+E5j
					; sub_404320+1C4j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_404320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404500	proc near		; CODE XREF: sub_403900+28p

var_1C		= byte ptr -1Ch
var_14		= byte ptr -14h
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		sub	esp, 14h
		mov	eax, [edx]
		mov	[ecx], eax
		mov	dword ptr [ecx+4], 0
		mov	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+0Ch], 0
		mov	eax, [edx]
		mov	[ecx+10h], eax
		xor	eax, eax

loc_404527:				; CODE XREF: sub_404500+31j
		cmp	dword ptr [ecx+eax*4], 0
		jle	short loc_40453B
		inc	eax
		cmp	eax, 1
		jl	short loc_404527
		mov	eax, ecx
		add	esp, 14h
		retn	8
; ---------------------------------------------------------------------------

loc_40453B:				; CODE XREF: sub_404500+2Bj
		push	80070057h
		push	offset aInvalidValuesF ; "Invalid - values for each dimension mus"...
		lea	ecx, [esp+1Ch+var_14]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [esp+20h+var_1C]
		push	eax
		call	_CxxThrowException
sub_404500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404560	proc near		; CODE XREF: T0()+131p	T0()+287p ...

var_24		= byte ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404560
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		lea	ecx, [ebp+var_24]
		mov	[ebp+var_1C], 0
		xor	bh, bh
		call	sub_401D30
		mov	[ebp+var_4], 0
		push	eax
		mov	[ebp+var_1C], 1
		call	ds:?__ExceptionPtrToBool@@YA_NPBX@Z ; __ExceptionPtrToBool(void	const *)
		test	al, al
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	eax, [ebp+var_24]
		push	eax
		setz	bl
		call	ds:?__ExceptionPtrDestroy@@YAXPAX@Z ; __ExceptionPtrDestroy(void *)
		add	esp, 8
		movzx	eax, bh
		mov	ecx, 1
		test	bl, bl
		mov	[ebp+var_4], ecx
		cmovnz	eax, ecx
		mov	ecx, [esi+28h]
		mov	[ebp+var_18], al
		lea	eax, [esi+24h]
		push	eax
		call	ds:?_Unregister_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@@Z ; Concurrency::details::_Ubiquitous_buffer::_Unregister_view(Concurrency::details::_Buffer_descriptor *)

loc_4045E2:				; DATA XREF: sub_4045F5:loc_404604o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_404560	endp


; =============== S U B	R O U T	I N E =======================================


sub_4045F5	proc near		; DATA XREF: .rdata:0040962Co
		cmp	byte ptr [ebp-18h], 0
		jz	short loc_404604
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_404604:				; CODE XREF: sub_4045F5+4j
		mov	eax, offset loc_4045E2
		retn
sub_4045F5	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404610	proc near		; CODE XREF: sub_403C00+249p

var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Memory		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404610
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 44h
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		xor	eax, eax
		push	ebx
		push	esi
		mov	[ebp+var_24], 7
		mov	esi, ecx
		mov	[ebp+var_28], 0
		mov	word ptr [ebp+Memory], ax
		push	edi
		cmp	[edx], ax
		jz	short loc_404663
		mov	eax, edx
		lea	edi, [eax+2]

loc_404654:				; CODE XREF: sub_404610+4Dj
		mov	cx, [eax]
		add	eax, 2
		test	cx, cx
		jnz	short loc_404654
		sub	eax, edi
		sar	eax, 1

loc_404663:				; CODE XREF: sub_404610+3Dj
		push	eax		; int
		push	edx		; Src
		lea	ecx, [ebp+Memory]
		call	sub_403F90
		push	0
		mov	ecx, esi
		mov	[ebp+var_4], 0
		call	sub_404B50
		push	ecx
		mov	[ebp+var_20], esp
		mov	ecx, esp
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_40468D
		lock inc dword ptr [eax+4]

loc_40468D:				; CODE XREF: sub_404610+77j
		mov	[ebp+var_14], 0
		mov	byte ptr [ebp+var_4], 2
		lea	eax, [ebp+Memory]
		cmp	[ebp+var_24], 8
		lea	ecx, [ebp+var_14]
		cmovnb	eax, [ebp+Memory]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_14]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		mov	ecx, [esi+28h]
		lea	edi, [esi+24h]
		mov	byte ptr [ebp+var_4], 4
		push	edi
		call	ds:?_Register_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@Vaccelerator_view@3@V?$_Reference_counted_obj_ptr@V_View_shape@details@Concurrency@@@23@QAU423@@Z ; Concurrency::details::_Ubiquitous_buffer::_Register_view(Concurrency::details::_Buffer_descriptor *,Concurrency::accelerator_view,Concurrency::details::_Reference_counted_obj_ptr<Concurrency::details::_View_shape>,Concurrency::details::_Buffer_descriptor * const)
		lea	ecx, [ebp+var_14]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_24]
		cmp	eax, 8
		jb	short loc_4046F1
		inc	eax
		push	eax		; int
		push	[ebp+Memory]	; Memory
		call	sub_4047F0

loc_4046F1:				; CODE XREF: sub_404610+D5j
		cmp	dword ptr [esi+2Ch], 0
		jz	loc_4047DC
		mov	[ebp+var_1C], 0
		mov	[ebp+var_4], 5
		xor	eax, eax
		mov	edx, ds:?cpu_accelerator@accelerator@Concurrency@@2QB_WB ; wchar_t const * const Concurrency::accelerator::cpu_accelerator
		mov	[ebp+var_3C], 7
		mov	[ebp+var_40], 0
		mov	word ptr [ebp+var_50], ax
		cmp	[edx], ax
		jnz	short loc_40472C
		xor	ecx, ecx
		jmp	short loc_404740
; ---------------------------------------------------------------------------

loc_40472C:				; CODE XREF: sub_404610+116j
		mov	ecx, edx
		lea	ebx, [ecx+2]

loc_404731:				; CODE XREF: sub_404610+12Aj
		mov	ax, [ecx]
		add	ecx, 2
		test	ax, ax
		jnz	short loc_404731
		sub	ecx, ebx
		sar	ecx, 1

loc_404740:				; CODE XREF: sub_404610+11Aj
		push	ecx		; int
		push	edx		; Src
		lea	ecx, [ebp+var_50]
		call	sub_403F90
		mov	[ebp+var_18], 0
		mov	byte ptr [ebp+var_4], 7
		lea	eax, [ebp+var_50]
		cmp	[ebp+var_3C], 8
		lea	ecx, [ebp+var_18]
		cmovnb	eax, [ebp+var_50]
		push	eax
		call	ds:?_Init@accelerator@Concurrency@@AAEXPB_W@Z ;	Concurrency::accelerator::_Init(wchar_t	const *)
		sub	esp, 8
		mov	byte ptr [ebp+var_4], 8
		lea	ecx, [ebp+var_18]
		push	esp
		call	ds:?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ ; Concurrency::accelerator::get_default_view(void)
		lea	eax, [ebp+var_1C]
		mov	edx, edi
		push	eax
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_20]
		call	sub_401D70
		mov	ecx, eax
		mov	byte ptr [ebp+var_4], 9
		call	ds:?_Get@_Event@details@Concurrency@@QAEXXZ ; Concurrency::details::_Event::_Get(void)
		lea	ecx, [ebp+var_20]
		call	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)
		lea	ecx, [ebp+var_18]
		call	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
		mov	eax, [ebp+var_3C]
		cmp	eax, 8
		jb	short loc_4047BC
		inc	eax
		push	eax		; int
		push	[ebp+var_50]	; Memory
		call	sub_4047F0

loc_4047BC:				; CODE XREF: sub_404610+1A0j
		mov	ecx, [ebp+var_1C]
		mov	eax, [ecx+14h]
		mov	[edi], eax
		mov	[ebp+var_4], 0Ah
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+4], eax
		dec	eax
		jnz	short loc_4047DC
		call	ds:?_Release@_Reference_counter@details@Concurrency@@QAEXXZ ; Concurrency::details::_Reference_counter::_Release(void)

loc_4047DC:				; CODE XREF: sub_404610+E5j
					; sub_404610+1C4j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_404610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_4047F0(void	*Memory, int)
sub_4047F0	proc near		; CODE XREF: sub_40707B-381Cp
					; sub_403900+103p ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+Memory]
		cmp	eax, 7FFFFFFFh
		jbe	short loc_404805
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404805:				; CODE XREF: sub_4047F0+Dj
		add	eax, eax
		cmp	eax, 1000h
		jb	short loc_404840
		test	cl, 1Fh
		jz	short loc_404819
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404819:				; CODE XREF: sub_4047F0+21j
		mov	eax, [ecx-4]
		cmp	eax, ecx
		jb	short loc_404826
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404826:				; CODE XREF: sub_4047F0+2Ej
		sub	ecx, eax
		cmp	ecx, 4
		jnb	short loc_404833
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404833:				; CODE XREF: sub_4047F0+3Bj
		cmp	ecx, 23h
		jbe	short loc_40483E
		call	ds:_invalid_parameter_noinfo_noreturn

loc_40483E:				; CODE XREF: sub_4047F0+46j
		mov	ecx, eax

loc_404840:				; CODE XREF: sub_4047F0+1Cj
		push	ecx		; Memory
		call	j_free
		pop	ecx
		retn	8
sub_4047F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404850	proc near		; CODE XREF: sub_403F90+4Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	eax, [ebx+10h]
		mov	esi, ecx
		cmp	eax, ebp
		jnb	short loc_40486F
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_40486F:				; CODE XREF: sub_404850+12j
		sub	eax, ebp
		push	edi
		mov	edi, [esp+10h+arg_8]
		cmp	edi, eax
		cmova	edi, eax
		cmp	esi, ebx
		jnz	short loc_4048B5
		lea	eax, [edi+ebp]
		cmp	[esi+10h], eax
		jnb	short loc_404892
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)

loc_404892:				; CODE XREF: sub_404850+35j
		mov	[esi+10h], eax
		cmp	dword ptr [esi+14h], 8
		jb	short loc_40489D
		mov	ecx, [esi]

loc_40489D:				; CODE XREF: sub_404850+49j
		xor	edx, edx
		push	ebp
		mov	[ecx+eax*2], dx
		push	ecx
		mov	ecx, esi
		call	sub_404E10
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_4048B5:				; CODE XREF: sub_404850+2Dj
		cmp	edi, 7FFFFFFEh
		jbe	short loc_4048C8
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_4048C8:				; CODE XREF: sub_404850+6Bj
		cmp	[esi+14h], edi
		jnb	short loc_4048EC
		push	dword ptr [esi+10h]
		push	edi
		call	sub_404C70
		test	edi, edi
		jz	short loc_404950

loc_4048DA:				; CODE XREF: sub_404850+9Ej
		cmp	dword ptr [ebx+14h], 8
		jb	short loc_4048E2
		mov	ebx, [ebx]

loc_4048E2:				; CODE XREF: sub_404850+8Ej
		cmp	dword ptr [esi+14h], 8
		jb	short loc_404917
		mov	ecx, [esi]
		jmp	short loc_404919
; ---------------------------------------------------------------------------

loc_4048EC:				; CODE XREF: sub_404850+7Bj
		test	edi, edi
		jnz	short loc_4048DA
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], edi
		jb	short loc_404909
		mov	eax, [esi]
		xor	ecx, ecx
		pop	edi
		mov	[eax], cx
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_404909:				; CODE XREF: sub_404850+A7j
		pop	edi
		mov	eax, esi
		xor	ecx, ecx
		pop	esi
		pop	ebp
		pop	ebx
		mov	[eax], cx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_404917:				; CODE XREF: sub_404850+96j
		mov	ecx, esi

loc_404919:				; CODE XREF: sub_404850+9Aj
		test	edi, edi
		jz	short loc_40492E
		lea	eax, [edi+edi]
		push	eax		; Size
		lea	eax, [ebx+ebp*2]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_40492E:				; CODE XREF: sub_404850+CBj
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], edi
		jb	short loc_404948
		mov	eax, [esi]
		xor	ecx, ecx
		mov	[eax+edi*2], cx
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_404948:				; CODE XREF: sub_404850+E5j
		mov	eax, esi
		xor	ecx, ecx
		mov	[eax+edi*2], cx

loc_404950:				; CODE XREF: sub_404850+88j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
sub_404850	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404960	proc near		; CODE XREF: sub_404200+56p

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, Size
		cmp	esi, eax
		ja	short loc_404998
		cmp	dword_432394, 10h
		mov	ecx, offset Dst
		mov	Size, 0
		mov	eax, offset Dst
		cmovnb	ecx, Dst
		pop	esi
		mov	byte ptr [ecx],	0
		retn	8
; ---------------------------------------------------------------------------

loc_404998:				; CODE XREF: sub_404960+Dj
		test	eax, eax
		jz	short loc_4049E8
		mov	edx, dword_432394
		mov	ecx, offset Dst
		cmp	edx, 10h
		push	edi
		mov	edi, Dst
		cmovnb	ecx, edi
		sub	esi, eax
		jz	short loc_4049D2
		push	esi		; Size
		add	eax, ecx
		push	eax		; Src
		push	ecx		; Dst
		call	ds:memmove
		mov	edx, dword_432394
		add	esp, 0Ch
		mov	edi, Dst

loc_4049D2:				; CODE XREF: sub_404960+56j
		cmp	edx, 10h
		mov	Size, esi
		mov	eax, offset Dst
		cmovnb	eax, edi
		pop	edi
		mov	byte ptr [eax+esi], 0

loc_4049E8:				; CODE XREF: sub_404960+3Aj
		mov	eax, offset Dst
		pop	esi
		retn	8
sub_404960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404A00	proc near		; CODE XREF: sub_4059F0+E1p

arg_4		= byte ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esi+10h]
		mov	eax, ecx
		not	eax
		cmp	eax, 1
		ja	short loc_404A1A
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_404A1A:				; CODE XREF: sub_404A00+Dj
		push	edi
		lea	edi, [ecx+1]
		cmp	edi, 0FFFFFFFEh
		jbe	short loc_404A2E
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)

loc_404A2E:				; CODE XREF: sub_404A00+21j
		cmp	[esi+14h], edi
		jnb	short loc_404A4D
		push	ecx		; Size
		push	edi		; int
		mov	ecx, esi
		call	sub_404EA0
		test	edi, edi
		jz	short loc_404A95

loc_404A40:				; CODE XREF: sub_404A00+4Fj
		cmp	dword ptr [esi+14h], 10h
		mov	edx, [esi+10h]
		jb	short loc_404A70
		mov	ecx, [esi]
		jmp	short loc_404A72
; ---------------------------------------------------------------------------

loc_404A4D:				; CODE XREF: sub_404A00+31j
		test	edi, edi
		jnz	short loc_404A40
		mov	[esi+10h], edi
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_404A66
		mov	eax, [esi]
		pop	edi
		mov	byte ptr [eax],	0
		mov	eax, esi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_404A66:				; CODE XREF: sub_404A00+58j
		mov	eax, esi
		pop	edi
		pop	esi
		mov	byte ptr [eax],	0
		retn	8
; ---------------------------------------------------------------------------

loc_404A70:				; CODE XREF: sub_404A00+47j
		mov	ecx, esi

loc_404A72:				; CODE XREF: sub_404A00+4Bj
		mov	al, [esp+8+arg_4]
		mov	[ecx+edx], al
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edi
		jb	short loc_404A8F
		mov	eax, [esi]
		mov	byte ptr [eax+edi], 0
		mov	eax, esi
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_404A8F:				; CODE XREF: sub_404A00+80j
		mov	eax, esi
		mov	byte ptr [eax+edi], 0

loc_404A95:				; CODE XREF: sub_404A00+3Ej
		pop	edi
		mov	eax, esi
		pop	esi
		retn	8
sub_404A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404AA0	proc near		; CODE XREF: sub_404320+68p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h

		sub	esp, 24h
		mov	eax, [ecx+18h]
		mov	edx, [ecx+8]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [eax+10h]
		lea	ebp, ds:0[edx*4]
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		mov	ebx, [ecx+10h]
		shl	eax, 2
		xor	edx, edx
		div	esi
		push	edi
		mov	edi, [ecx]
		shl	edi, 2
		shl	ebx, 2
		mov	[esp+34h+var_18], eax
		test	edx, edx
		jnz	short loc_404B25
		mov	eax, edi
		div	esi
		mov	edi, eax
		test	edx, edx
		jnz	short loc_404B25
		mov	eax, ebp
		div	esi
		mov	ecx, eax
		test	edx, edx
		jnz	short loc_404B25
		mov	eax, ebx
		div	esi
		test	edx, edx
		jnz	short loc_404B25
		push	edx
		mov	[esp+38h+var_24], eax
		lea	eax, [esp+38h+var_24]
		push	eax
		lea	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_1C], edi
		push	eax
		lea	eax, [esp+40h+var_1C]
		mov	[esp+40h+var_20], ecx
		push	eax
		push	[esp+44h+var_18]
		push	1
		call	ds:?_Create_view_shape@_View_shape@details@Concurrency@@SAPAV123@IIPBI00PB_N@Z ; Concurrency::details::_View_shape::_Create_view_shape(uint,uint,uint const *,uint const *,uint	const *,bool const *)
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_404B25:				; CODE XREF: sub_404AA0+34j
					; sub_404AA0+3Ej ...
		push	80004005h
		push	offset aTheArray_viewB ; "The array_view base extent, view offset"...
		lea	ecx, [esp+3Ch+var_14]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [esp+40h+var_1C]
		push	eax
		call	_CxxThrowException
sub_404AA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404B50	proc near		; CODE XREF: sub_404610+68p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h

		sub	esp, 34h
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi+28h]
		mov	edx, [esi+18h]
		mov	edi, [esi+4]
		mov	ebx, [esi+14h]
		mov	ecx, [eax+10h]
		mov	eax, [esi+8]
		imul	eax, [esi+10h]
		mov	ebp, [esi+20h]
		shl	edi, 2
		shl	ebx, 2
		shl	ebp, 2
		sub	edx, eax
		sub	edx, [esi+14h]
		shl	edx, 2
		mov	eax, edx
		xor	edx, edx
		div	ecx
		mov	[esp+44h+var_30], eax
		test	edx, edx
		jnz	short loc_404BFA
		mov	eax, edi
		div	ecx
		mov	[esp+44h+var_34], eax
		test	edx, edx
		jnz	short loc_404BFA
		mov	eax, ebx
		div	ecx
		mov	edi, eax
		test	edx, edx
		jnz	short loc_404BFA
		mov	eax, ebp
		div	ecx
		test	edx, edx
		jnz	short loc_404BFA
		mov	ecx, [esi]
		push	edx
		mov	[esp+48h+var_28], eax
		lea	eax, [esp+48h+var_2C]
		push	eax
		lea	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_1C], ecx
		mov	ecx, [esi+10h]
		push	eax
		lea	eax, [esp+50h+var_1C]
		mov	[esp+50h+var_24], ecx
		mov	ecx, [esi+1Ch]
		push	eax
		push	[esp+54h+var_30]
		mov	[esp+58h+var_2C], ecx
		mov	ecx, [esp+58h+var_34]
		push	2
		mov	[esp+5Ch+var_18], ecx
		mov	[esp+5Ch+var_20], edi
		call	ds:?_Create_view_shape@_View_shape@details@Concurrency@@SAPAV123@IIPBI00PB_N@Z ; Concurrency::details::_View_shape::_Create_view_shape(uint,uint,uint const *,uint const *,uint	const *,bool const *)
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_404BFA:				; CODE XREF: sub_404B50+3Fj
					; sub_404B50+4Bj ...
		push	80004005h
		push	offset aTheArray_viewB ; "The array_view base extent, view offset"...
		lea	ecx, [esp+4Ch+var_14]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [esp+50h+var_1C]
		push	eax
		call	_CxxThrowException
sub_404B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_404C20(size_t Size)
sub_404C20	proc near		; CODE XREF: sub_404EA0+B4p

Size		= dword	ptr  4

		mov	eax, [esp+Size]
		test	eax, eax
		jnz	short loc_404C2F
		xor	ecx, ecx
		mov	eax, ecx
		retn	4
; ---------------------------------------------------------------------------

loc_404C2F:				; CODE XREF: sub_404C20+6j
		cmp	eax, 1000h
		jb	short loc_404C5A
		lea	ecx, [eax+23h]
		cmp	ecx, eax
		ja	short loc_404C43
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_404C43:				; CODE XREF: sub_404C20+1Bj
		push	ecx		; Size
		call	sub_405BAE
		add	esp, 4
		lea	ecx, [eax+23h]
		and	ecx, 0FFFFFFE0h
		mov	[ecx-4], eax
		mov	eax, ecx
		retn	4
; ---------------------------------------------------------------------------

loc_404C5A:				; CODE XREF: sub_404C20+14j
		push	eax		; Size
		call	sub_405BAE
		add	esp, 4
		mov	ecx, eax
		retn	4
sub_404C20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404C70	proc near		; CODE XREF: sub_403F90+77p
					; sub_404850+81p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404C70
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, eax
		mov	[ebp+var_10], esp
		or	edi, 7
		mov	esi, ecx
		mov	[ebp+var_14], esi
		cmp	edi, 7FFFFFFEh
		jbe	short loc_404CAA
		mov	edi, eax
		jmp	short loc_404CD1
; ---------------------------------------------------------------------------

loc_404CAA:				; CODE XREF: sub_404C70+34j
		mov	ebx, [esi+14h]
		mov	eax, 0AAAAAAABh
		mul	edi
		mov	ecx, ebx
		shr	ecx, 1
		shr	edx, 1
		cmp	ecx, edx
		jbe	short loc_404CD1
		mov	eax, 7FFFFFFEh
		lea	edi, [ecx+ebx]
		sub	eax, ecx
		cmp	ebx, eax
		jbe	short loc_404CD1
		mov	edi, 7FFFFFFEh

loc_404CD1:				; CODE XREF: sub_404C70+38j
					; sub_404C70+4Cj ...
		lea	eax, [edi+1]
		mov	[ebp+var_4], 0
		test	eax, eax
		jnz	short loc_404CE3
		xor	ebx, ebx
		jmp	short loc_404D4D
; ---------------------------------------------------------------------------

loc_404CE3:				; CODE XREF: sub_404C70+6Dj
		cmp	eax, 7FFFFFFFh
		jbe	short loc_404CF0
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_404CF0:				; CODE XREF: sub_404C70+78j
		add	eax, eax
		cmp	eax, 1000h
		jb	short loc_404D1A
		lea	ecx, [eax+23h]
		cmp	ecx, eax
		ja	short loc_404D06
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_404D06:				; CODE XREF: sub_404C70+8Ej
		push	ecx		; Size
		call	sub_405BAE
		add	esp, 4
		lea	ebx, [eax+23h]
		and	ebx, 0FFFFFFE0h
		mov	[ebx-4], eax
		jmp	short loc_404D4D
; ---------------------------------------------------------------------------

loc_404D1A:				; CODE XREF: sub_404C70+87j
		push	eax		; Size
		call	sub_405BAE
		add	esp, 4
		mov	ebx, eax
		jmp	short loc_404D4D
; ---------------------------------------------------------------------------

loc_404D27:				; DATA XREF: .rdata:004096B8o
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		inc	eax
		mov	[ebp+var_10], esp
		push	eax
		mov	byte ptr [ebp+var_4], 2
		call	sub_405040
		mov	[ebp+var_18], eax
		mov	eax, offset loc_404D44
		retn
; ---------------------------------------------------------------------------

loc_404D44:				; DATA XREF: sub_404C70+CEo
		mov	esi, [ebp+var_14]
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+var_18]

loc_404D4D:				; CODE XREF: sub_404C70+71j
					; sub_404C70+A8j ...
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_404D71
		cmp	dword ptr [esi+14h], 8
		jb	short loc_404D5E
		mov	ecx, [esi]
		jmp	short loc_404D60
; ---------------------------------------------------------------------------

loc_404D5E:				; CODE XREF: sub_404C70+E8j
		mov	ecx, esi

loc_404D60:				; CODE XREF: sub_404C70+ECj
		test	eax, eax
		jz	short loc_404D71
		add	eax, eax
		push	eax		; Size
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_404D71:				; CODE XREF: sub_404C70+E2j
					; sub_404C70+F2j
		mov	eax, [esi+14h]
		cmp	eax, 8
		jb	short loc_404D82
		inc	eax
		push	eax		; int
		push	dword ptr [esi]	; Memory
		call	sub_4047F0

loc_404D82:				; CODE XREF: sub_404C70+107j
		mov	dword ptr [esi+14h], 7
		cmp	dword ptr [esi+14h], 8
		mov	dword ptr [esi+10h], 0
		jb	short loc_404D9A
		mov	eax, [esi]
		jmp	short loc_404D9C
; ---------------------------------------------------------------------------

loc_404D9A:				; CODE XREF: sub_404C70+124j
		mov	eax, esi

loc_404D9C:				; CODE XREF: sub_404C70+128j
		xor	ecx, ecx
		mov	[eax], cx
		mov	eax, [ebp+arg_4]
		mov	[esi], ebx
		mov	[esi+14h], edi
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], eax
		jb	short loc_404DB4
		mov	esi, ebx

loc_404DB4:				; CODE XREF: sub_404C70+140j
		xor	ecx, ecx
		mov	[esi+eax*2], cx
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_404C70	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_404DCD	proc near		; DATA XREF: .rdata:004096A8o
		mov	esi, [ebp-14h]
		mov	eax, [esi+14h]
		cmp	eax, 8
		jb	short loc_404DE1
		inc	eax
		push	eax		; int
		push	dword ptr [esi]	; Memory
		call	sub_4047F0

loc_404DE1:				; CODE XREF: sub_404DCD+9j
		mov	dword ptr [esi+14h], 7
		cmp	dword ptr [esi+14h], 8
		mov	dword ptr [esi+10h], 0
		jb	short loc_404DF7
		mov	esi, [esi]

loc_404DF7:				; CODE XREF: sub_404DCD+26j
		xor	eax, eax
		push	eax
		push	eax
		mov	[esi], ax
		call	_CxxThrowException
sub_404DCD	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404E10	proc near		; CODE XREF: sub_404850+57p

arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		push	edi
		mov	edi, [esi+10h]
		cmp	edi, ecx
		ja	short loc_404E46
		mov	dword ptr [esi+10h], 0
		cmp	dword ptr [esi+14h], 8
		jb	short loc_404E3A
		mov	eax, [esi]
		xor	ecx, ecx
		pop	edi
		mov	[eax], cx
		mov	eax, esi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_404E3A:				; CODE XREF: sub_404E10+1Aj
		mov	eax, esi
		xor	ecx, ecx
		pop	edi
		pop	esi
		mov	[eax], cx
		retn	8
; ---------------------------------------------------------------------------

loc_404E46:				; CODE XREF: sub_404E10+Dj
		test	ecx, ecx
		jz	short loc_404E8C
		cmp	dword ptr [esi+14h], 8
		jb	short loc_404E54
		mov	edx, [esi]
		jmp	short loc_404E56
; ---------------------------------------------------------------------------

loc_404E54:				; CODE XREF: sub_404E10+3Ej
		mov	edx, esi

loc_404E56:				; CODE XREF: sub_404E10+42j
		sub	edi, ecx
		jz	short loc_404E6C
		lea	eax, [edi+edi]
		push	eax		; Size
		lea	eax, [edx+ecx*2]
		push	eax		; Src
		push	edx		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_404E6C:				; CODE XREF: sub_404E10+48j
		cmp	dword ptr [esi+14h], 8
		mov	[esi+10h], edi
		jb	short loc_404E84
		mov	eax, [esi]
		xor	ecx, ecx
		mov	[eax+edi*2], cx
		mov	eax, esi
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_404E84:				; CODE XREF: sub_404E10+63j
		mov	eax, esi
		xor	ecx, ecx
		mov	[eax+edi*2], cx

loc_404E8C:				; CODE XREF: sub_404E10+38j
		pop	edi
		mov	eax, esi
		pop	esi
		retn	8
sub_404E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_404EA0(int,	size_t Size)
sub_404EA0	proc near		; CODE XREF: sub_404110+73p
					; sub_404A00+37p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_404EA0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, eax
		mov	[ebp+var_10], esp
		or	edi, 0Fh
		mov	esi, ecx
		mov	[ebp+var_14], esi
		cmp	edi, 0FFFFFFFEh
		jbe	short loc_404ED7
		mov	edi, eax
		jmp	short loc_404EFE
; ---------------------------------------------------------------------------

loc_404ED7:				; CODE XREF: sub_404EA0+31j
		mov	ebx, [esi+14h]
		mov	eax, 0AAAAAAABh
		mul	edi
		mov	ecx, ebx
		shr	ecx, 1
		shr	edx, 1
		cmp	ecx, edx
		jbe	short loc_404EFE
		mov	eax, 0FFFFFFFEh
		lea	edi, [ecx+ebx]
		sub	eax, ecx
		cmp	ebx, eax
		jbe	short loc_404EFE
		mov	edi, 0FFFFFFFEh

loc_404EFE:				; CODE XREF: sub_404EA0+35j
					; sub_404EA0+49j ...
		lea	eax, [edi+1]
		mov	[ebp+var_4], 0
		test	eax, eax
		jnz	short loc_404F10
		xor	ebx, ebx
		jmp	short loc_404F6B
; ---------------------------------------------------------------------------

loc_404F10:				; CODE XREF: sub_404EA0+6Aj
		cmp	eax, 1000h
		jb	short loc_404F38
		lea	ecx, [eax+23h]
		cmp	ecx, eax
		ja	short loc_404F24
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_404F24:				; CODE XREF: sub_404EA0+7Cj
		push	ecx		; Size
		call	sub_405BAE
		add	esp, 4
		lea	ebx, [eax+23h]
		and	ebx, 0FFFFFFE0h
		mov	[ebx-4], eax
		jmp	short loc_404F6B
; ---------------------------------------------------------------------------

loc_404F38:				; CODE XREF: sub_404EA0+75j
		push	eax		; Size
		call	sub_405BAE
		add	esp, 4
		mov	ebx, eax
		jmp	short loc_404F6B
; ---------------------------------------------------------------------------

loc_404F45:				; DATA XREF: .rdata:00409744o
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		inc	eax
		mov	[ebp+var_10], esp
		push	eax		; Size
		mov	byte ptr [ebp+var_4], 2
		call	sub_404C20
		mov	[ebp+var_18], eax
		mov	eax, offset loc_404F62
		retn
; ---------------------------------------------------------------------------

loc_404F62:				; DATA XREF: sub_404EA0+BCo
		mov	esi, [ebp+var_14]
		mov	edi, [ebp+arg_0]
		mov	ebx, [ebp+var_18]

loc_404F6B:				; CODE XREF: sub_404EA0+6Ej
					; sub_404EA0+96j ...
		mov	eax, [ebp+Size]
		test	eax, eax
		jz	short loc_404F8D
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_404F7C
		mov	ecx, [esi]
		jmp	short loc_404F7E
; ---------------------------------------------------------------------------

loc_404F7C:				; CODE XREF: sub_404EA0+D6j
		mov	ecx, esi

loc_404F7E:				; CODE XREF: sub_404EA0+DAj
		test	eax, eax
		jz	short loc_404F8D
		push	eax		; Size
		push	ecx		; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_404F8D:				; CODE XREF: sub_404EA0+D0j
					; sub_404EA0+E0j
		mov	eax, [esi+14h]
		cmp	eax, 10h
		jb	short loc_404FDA
		mov	ecx, [esi]
		inc	eax
		cmp	eax, 1000h
		jb	short loc_404FD1
		test	cl, 1Fh
		jz	short loc_404FAA
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404FAA:				; CODE XREF: sub_404EA0+102j
		mov	eax, [ecx-4]
		cmp	eax, ecx
		jb	short loc_404FB7
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404FB7:				; CODE XREF: sub_404EA0+10Fj
		sub	ecx, eax
		cmp	ecx, 4
		jnb	short loc_404FC4
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404FC4:				; CODE XREF: sub_404EA0+11Cj
		cmp	ecx, 23h
		jbe	short loc_404FCF
		call	ds:_invalid_parameter_noinfo_noreturn

loc_404FCF:				; CODE XREF: sub_404EA0+127j
		mov	ecx, eax

loc_404FD1:				; CODE XREF: sub_404EA0+FDj
		push	ecx		; Memory
		call	j_free
		add	esp, 4

loc_404FDA:				; CODE XREF: sub_404EA0+F3j
		mov	dword ptr [esi+14h], 0Fh
		cmp	dword ptr [esi+14h], 10h
		mov	dword ptr [esi+10h], 0
		jb	short loc_404FF2
		mov	eax, [esi]
		jmp	short loc_404FF4
; ---------------------------------------------------------------------------

loc_404FF2:				; CODE XREF: sub_404EA0+14Cj
		mov	eax, esi

loc_404FF4:				; CODE XREF: sub_404EA0+150j
		mov	byte ptr [eax],	0
		mov	eax, [ebp+Size]
		mov	[esi], ebx
		mov	[esi+14h], edi
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], eax
		jb	short loc_40500A
		mov	esi, ebx

loc_40500A:				; CODE XREF: sub_404EA0+166j
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	byte ptr [esi+eax], 0
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_404EA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_405021	proc near		; DATA XREF: .rdata:00409734o
		mov	ecx, [ebp-14h]	; Dst
		push	0		; Size
		push	1		; char
		call	sub_404080
		push	0
		push	0
		call	_CxxThrowException
sub_405021	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_405040	proc near		; CODE XREF: sub_404C70+C6p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_40504F
		xor	ecx, ecx
		mov	eax, ecx
		retn	4
; ---------------------------------------------------------------------------

loc_40504F:				; CODE XREF: sub_405040+6j
		cmp	eax, 7FFFFFFFh
		jbe	short loc_40505C
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_40505C:				; CODE XREF: sub_405040+14j
		add	eax, eax
		cmp	eax, 1000h
		jb	short loc_405089
		lea	ecx, [eax+23h]
		cmp	ecx, eax
		ja	short loc_405072
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_405072:				; CODE XREF: sub_405040+2Aj
		push	ecx		; Size
		call	sub_405BAE
		add	esp, 4
		lea	ecx, [eax+23h]
		and	ecx, 0FFFFFFE0h
		mov	[ecx-4], eax
		mov	eax, ecx
		retn	4
; ---------------------------------------------------------------------------

loc_405089:				; CODE XREF: sub_405040+23j
		push	eax		; Size
		call	sub_405BAE
		add	esp, 4
		mov	ecx, eax
		retn	4
sub_405040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4050A0	proc near		; CODE XREF: sub_4034B0+74p
					; sub_4034B0+8Cp ...

var_2C		= qword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_4050A0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 20h
		push	ebx
		mov	eax, edx
		mov	[ebp+var_24], 0
		push	esi
		push	edi
		mov	ebx, ecx
		mov	[ebp+var_10], esp
		cmp	byte ptr [eax],	0
		mov	[ebp+var_20], eax
		mov	[ebp+var_18], ebx
		jnz	short loc_4050DB
		xor	ecx, ecx
		jmp	short loc_4050E9
; ---------------------------------------------------------------------------

loc_4050DB:				; CODE XREF: sub_4050A0+35j
		mov	ecx, eax
		lea	edx, [ecx+1]

loc_4050E0:				; CODE XREF: sub_4050A0+45j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_4050E0
		sub	ecx, edx

loc_4050E9:				; CODE XREF: sub_4050A0+39j
		mov	eax, [ebx]
		mov	[ebp+var_14], ecx
		mov	eax, [eax+4]
		mov	edi, [eax+ebx+24h]
		mov	esi, [eax+ebx+20h]
		test	edi, edi
		jl	short loc_405114
		jg	short loc_40510D
		test	esi, esi
		jz	short loc_405114
		test	edi, edi
		jl	short loc_405114
		jg	short loc_40510D
		cmp	esi, ecx
		jbe	short loc_405114

loc_40510D:				; CODE XREF: sub_4050A0+5Dj
					; sub_4050A0+67j
		sub	esi, ecx
		sbb	edi, 0
		jmp	short loc_405122
; ---------------------------------------------------------------------------

loc_405114:				; CODE XREF: sub_4050A0+5Bj
					; sub_4050A0+61j ...
		xorps	xmm0, xmm0
		movlpd	[ebp+var_2C], xmm0
		mov	edi, dword ptr [ebp+var_2C+4]
		mov	esi, dword ptr [ebp+var_2C]

loc_405122:				; CODE XREF: sub_4050A0+72j
		mov	ecx, [eax+ebx+38h]
		mov	dword ptr [ebp+var_2C],	ebx
		test	ecx, ecx
		jz	short loc_405132
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_405132:				; CODE XREF: sub_4050A0+8Bj
		mov	[ebp+var_4], 0
		mov	eax, [ebx]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+ebx+0Ch], 0
		jnz	short loc_405157
		mov	ecx, [eax+ebx+3Ch]
		test	ecx, ecx
		jz	short loc_405157
		cmp	ecx, ebx
		jz	short loc_405157
		call	ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)

loc_405157:				; CODE XREF: sub_4050A0+A3j
					; sub_4050A0+ABj ...
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		cmp	dword ptr [ecx+ebx+0Ch], 0
		setz	al
		mov	byte ptr [ebp+var_2C+4], al
		mov	[ebp+var_4], 1
		test	al, al
		jnz	short loc_40517C
		mov	ecx, 4
		jmp	loc_40526C
; ---------------------------------------------------------------------------

loc_40517C:				; CODE XREF: sub_4050A0+D0j
		mov	byte ptr [ebp+var_4], 2
		mov	eax, [ecx+ebx+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_4051D0
		db	66h
		nop

loc_405190:				; CODE XREF: sub_4050A0+12Aj
		test	edi, edi
		jl	short loc_4051CC
		jg	short loc_40519A
		test	esi, esi
		jz	short loc_4051CC

loc_40519A:				; CODE XREF: sub_4050A0+F4j
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		mov	al, [ecx+ebx+40h]
		mov	ecx, [ecx+ebx+38h]
		mov	byte ptr [ebp+var_1C], al
		push	[ebp+var_1C]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		setz	al
		test	al, al
		jz	short loc_4051C4

loc_4051BD:				; CODE XREF: sub_4050A0+14Aj
					; sub_4050A0+14Ej
		mov	ecx, 4
		jmp	short loc_40522E
; ---------------------------------------------------------------------------

loc_4051C4:				; CODE XREF: sub_4050A0+11Bj
		add	esi, 0FFFFFFFFh
		adc	edi, 0FFFFFFFFh
		jmp	short loc_405190
; ---------------------------------------------------------------------------

loc_4051CC:				; CODE XREF: sub_4050A0+F2j
					; sub_4050A0+F8j
		xor	ecx, ecx
		jnz	short loc_40522E

loc_4051D0:				; CODE XREF: sub_4050A0+ECj
		mov	eax, [ebx]
		push	0
		push	[ebp+var_14]
		mov	eax, [eax+4]
		push	[ebp+var_20]
		mov	ecx, [eax+ebx+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, [ebp+var_14]
		jnz	short loc_4051BD
		test	edx, edx
		jnz	short loc_4051BD

loc_4051F0:				; CODE XREF: sub_4050A0+18Aj
		test	edi, edi
		jl	short loc_40522C
		jg	short loc_4051FA
		test	esi, esi
		jz	short loc_40522C

loc_4051FA:				; CODE XREF: sub_4050A0+154j
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		mov	al, [ecx+ebx+40h]
		mov	ecx, [ecx+ebx+38h]
		mov	byte ptr [ebp+var_20], al
		push	[ebp+var_20]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		setz	al
		test	al, al
		jz	short loc_405224
		xor	ecx, ecx
		or	ecx, 4
		jmp	short loc_40522E
; ---------------------------------------------------------------------------

loc_405224:				; CODE XREF: sub_4050A0+17Bj
		add	esi, 0FFFFFFFFh
		adc	edi, 0FFFFFFFFh
		jmp	short loc_4051F0
; ---------------------------------------------------------------------------

loc_40522C:				; CODE XREF: sub_4050A0+152j
					; sub_4050A0+158j
		xor	ecx, ecx

loc_40522E:				; CODE XREF: sub_4050A0+122j
					; sub_4050A0+12Ej ...
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	dword ptr [eax+ebx+20h], 0
		mov	dword ptr [eax+ebx+24h], 0
		jmp	short loc_405265
; ---------------------------------------------------------------------------

loc_405245:				; DATA XREF: .rdata:004097BCo
		mov	edx, [ebp+var_18]
		push	1
		push	4
		mov	eax, [edx]
		mov	ecx, [eax+4]
		add	ecx, edx
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	eax, offset loc_40525F
		retn
; ---------------------------------------------------------------------------

loc_40525F:				; DATA XREF: sub_4050A0+1B9o
		mov	ebx, [ebp+var_18]
		mov	ecx, [ebp+var_24]

loc_405265:				; CODE XREF: sub_4050A0+1A3j
		mov	[ebp+var_4], 1

loc_40526C:				; CODE XREF: sub_4050A0+D7j
		mov	eax, [ebx]
		push	0
		push	ecx
		mov	ecx, [eax+4]
		add	ecx, ebx
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	[ebp+var_4], 4
		call	ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		mov	esi, dword ptr [ebp+var_2C]
		test	al, al
		jnz	short loc_405298
		mov	ecx, esi
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)

loc_405298:				; CODE XREF: sub_4050A0+1EEj
		mov	byte ptr [ebp+var_4], 5
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_4052AE
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_4052AE:				; CODE XREF: sub_4050A0+207j
		mov	ecx, [ebp+var_C]
		mov	eax, ebx
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4050A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4052D0	proc near		; CODE XREF: sub_4034B0+57p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_4052D0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 20h
		mov	edx, Size
		push	ebx
		mov	ebx, ecx
		mov	[ebp+var_14], offset Dst
		push	esi
		push	edi
		xor	edi, edi
		mov	[ebp+var_10], esp
		mov	eax, [ebx]
		mov	[ebp+var_1C], ebx
		mov	[ebp+var_20], edi
		mov	[ebp+var_18], edx
		mov	ecx, [eax+4]
		mov	eax, [ecx+ebx+24h]
		mov	esi, [ecx+ebx+20h]
		test	eax, eax
		jl	short loc_405330
		jg	short loc_405322
		test	esi, esi
		jz	short loc_405330

loc_405322:				; CODE XREF: sub_4052D0+4Cj
		mov	[ebp+var_28], eax
		cmp	esi, edx
		jbe	short loc_405330
		mov	[ebp+var_28], eax
		sub	esi, edx
		jmp	short loc_405332
; ---------------------------------------------------------------------------

loc_405330:				; CODE XREF: sub_4052D0+4Aj
					; sub_4052D0+50j ...
		xor	esi, esi

loc_405332:				; CODE XREF: sub_4052D0+5Ej
		mov	ecx, [ecx+ebx+38h]
		mov	[ebp+var_2C], ebx
		test	ecx, ecx
		jz	short loc_405342
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_405342:				; CODE XREF: sub_4052D0+6Bj
		mov	[ebp+var_4], 0
		mov	eax, [ebx]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+ebx+0Ch], 0
		jnz	short loc_405367
		mov	ecx, [eax+ebx+3Ch]
		test	ecx, ecx
		jz	short loc_405367
		cmp	ecx, ebx
		jz	short loc_405367
		call	ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)

loc_405367:				; CODE XREF: sub_4052D0+83j
					; sub_4052D0+8Bj ...
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		cmp	dword ptr [ecx+ebx+0Ch], 0
		setz	al
		mov	byte ptr [ebp+var_28], al
		mov	[ebp+var_4], 1
		test	al, al
		jnz	short loc_40538C
		mov	edi, 4
		jmp	loc_405482
; ---------------------------------------------------------------------------

loc_40538C:				; CODE XREF: sub_4052D0+B0j
		mov	byte ptr [ebp+var_4], 2
		mov	eax, [ecx+ebx+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_4053D8
		db	66h
		nop

loc_4053A0:				; CODE XREF: sub_4052D0+102j
		test	esi, esi
		jz	short loc_4053D4
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		mov	al, [ecx+ebx+40h]
		mov	ecx, [ecx+ebx+38h]
		mov	byte ptr [ebp+var_24], al
		push	[ebp+var_24]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		setz	al
		test	al, al
		jz	short loc_4053D1
		mov	edi, 4
		mov	[ebp+var_20], edi
		jmp	short loc_405410
; ---------------------------------------------------------------------------

loc_4053D1:				; CODE XREF: sub_4052D0+F5j
		dec	esi
		jmp	short loc_4053A0
; ---------------------------------------------------------------------------

loc_4053D4:				; CODE XREF: sub_4052D0+D2j
		test	edi, edi
		jnz	short loc_405410

loc_4053D8:				; CODE XREF: sub_4052D0+CCj
		cmp	dword_432394, 10h
		jb	short loc_4053EB
		mov	eax, offset Dst
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_4053EB:				; CODE XREF: sub_4052D0+10Fj
		mov	eax, [ebx]
		push	0
		push	[ebp+var_18]
		mov	eax, [eax+4]
		push	[ebp+var_14]
		mov	ecx, [eax+ebx+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, [ebp+var_18]
		jnz	short loc_40543F
		test	edx, edx
		jnz	short loc_40543F
		nop	dword ptr [eax+eax+00h]

loc_405410:				; CODE XREF: sub_4052D0+FFj
					; sub_4052D0+106j ...
		test	esi, esi
		jz	short loc_405444
		mov	eax, [ebx]
		mov	ecx, [eax+4]
		mov	al, [ecx+ebx+40h]
		mov	ecx, [ecx+ebx+38h]
		mov	byte ptr [ebp+var_24], al
		push	[ebp+var_24]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		setz	al
		test	al, al
		jz	short loc_40543C
		or	edi, 4
		jmp	short loc_405444
; ---------------------------------------------------------------------------

loc_40543C:				; CODE XREF: sub_4052D0+165j
		dec	esi
		jmp	short loc_405410
; ---------------------------------------------------------------------------

loc_40543F:				; CODE XREF: sub_4052D0+135j
					; sub_4052D0+139j
		mov	edi, 4

loc_405444:				; CODE XREF: sub_4052D0+142j
					; sub_4052D0+16Aj
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	dword ptr [eax+ebx+20h], 0
		mov	dword ptr [eax+ebx+24h], 0
		jmp	short loc_40547B
; ---------------------------------------------------------------------------

loc_40545B:				; DATA XREF: .rdata:00409834o
		mov	edx, [ebp+var_1C]
		push	1
		push	4
		mov	eax, [edx]
		mov	ecx, [eax+4]
		add	ecx, edx
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	eax, offset loc_405475
		retn
; ---------------------------------------------------------------------------

loc_405475:				; DATA XREF: sub_4052D0+19Fo
		mov	ebx, [ebp+var_1C]
		mov	edi, [ebp+var_20]

loc_40547B:				; CODE XREF: sub_4052D0+189j
		mov	[ebp+var_4], 1

loc_405482:				; CODE XREF: sub_4052D0+B7j
		mov	eax, [ebx]
		push	0
		push	edi
		mov	ecx, [eax+4]
		add	ecx, ebx
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	[ebp+var_4], 4
		call	ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		mov	esi, [ebp+var_2C]
		test	al, al
		jnz	short loc_4054AE
		mov	ecx, esi
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)

loc_4054AE:				; CODE XREF: sub_4052D0+1D4j
		mov	byte ptr [ebp+var_4], 5
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_4054C4
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_4054C4:				; CODE XREF: sub_4052D0+1EDj
		mov	ecx, [ebp+var_C]
		mov	eax, ebx
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4052D0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_4054E0:				; DATA XREF: sub_4034B0+3Do
					; sub_4034B0+6Fo ...
		push	esi
		mov	esi, [esp+8]
		push	0Ah
		mov	eax, [esi]
		mov	ecx, [eax+4]
		add	ecx, esi
		call	ds:?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char>>::widen(char)
		movzx	ecx, al
		push	ecx
		mov	ecx, esi
		call	ds:?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char>>::put(char)
		mov	ecx, esi
		call	ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_405510	proc near		; CODE XREF: sub_403C00+5Ep

var_1C		= byte ptr -1Ch
var_14		= byte ptr -14h

		sub	esp, 18h
		xor	eax, eax
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		nop	word ptr [eax+eax+00h]

loc_405520:				; CODE XREF: sub_405510+1Aj
		cmp	dword ptr [edi+eax*4], 0
		jle	short loc_405584
		inc	eax
		cmp	eax, 2
		jl	short loc_405520
		mov	eax, [edi]
		mov	esi, 1
		cdq
		mov	ecx, eax
		mov	ebx, edx

loc_405538:				; CODE XREF: sub_405510+48j
		mov	eax, [edi+esi*4]
		push	ebx
		cdq
		push	ecx
		push	edx
		push	eax
		call	sub_406AD0
		mov	ebx, edx
		mov	ecx, eax
		test	ebx, ebx
		ja	short loc_405561
		jb	short loc_405554
		cmp	ecx, 0FFFFFFFFh
		ja	short loc_405561

loc_405554:				; CODE XREF: sub_405510+3Dj
		inc	esi
		cmp	esi, 2
		jl	short loc_405538
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_405561:				; CODE XREF: sub_405510+3Bj
					; sub_405510+42j
		push	80070057h
		push	offset aInvalidExtentS ; "Invalid - extent size	exceeds	UINT_MAX"
		lea	ecx, [esp+2Ch+var_14]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [esp+30h+var_1C]
		push	eax
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_405584:				; CODE XREF: sub_405510+14j
		push	80070057h
		push	offset aInvalidValuesF ; "Invalid - values for each dimension mus"...
		lea	ecx, [esp+2Ch+var_14]
		call	ds:??0runtime_exception@Concurrency@@QAE@PBDJ@Z	; Concurrency::runtime_exception::runtime_exception(char const *,long)
		push	offset dword_4099A4
		lea	eax, [esp+30h+var_1C]
		push	eax
		call	_CxxThrowException
sub_405510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4055B0	proc near		; CODE XREF: T0()+E0p

var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= byte ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1B0		= dword	ptr -1B0h
var_1A0		= dword	ptr -1A0h
var_190		= dword	ptr -190h
var_180		= dword	ptr -180h
var_170		= byte ptr -170h
var_E0		= dword	ptr -0E0h
var_D0		= dword	ptr -0D0h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 218h
		push	esi
		push	edi
		push	ecx
		mov	esi, edx
		call	ds:__dpc_create_call_handle
		mov	edi, eax
		mov	[esp+224h+var_1E4], 0
		lea	ecx, [esi+24h]
		mov	[esp+224h+var_1DC], 3
		push	2
		lea	eax, [esp+228h+var_1E4]
		mov	[esp+228h+var_1E0], ecx
		push	eax
		lea	ecx, [esi+48h]
		mov	[esp+22Ch+var_1D8], 2
		push	edi
		mov	[esp+230h+var_1D4], 0
		mov	[esp+230h+var_1D0], ecx
		mov	[esp+230h+var_1CC], 3
		mov	[esp+230h+var_1C8], 2
		call	ds:__dpc_set_device_resource_info
		push	offset dword_401000
		push	edi
		call	ds:__dpc_set_kernel_shader_info
		mov	eax, [esp+238h+arg_0]
		mov	[esp+238h+var_210], eax
		mov	eax, [esp+238h+arg_4]
		mov	[esp+238h+var_20C], eax
		lea	eax, [esp+238h+var_1C4]
		push	eax
		lea	eax, [esp+23Ch+var_214]
		mov	[esp+23Ch+var_208], 1
		push	eax
		lea	eax, [esp+240h+var_218]
		mov	[esp+240h+var_204], 8
		push	eax
		lea	eax, [esp+244h+var_208]
		mov	[esp+244h+var_200], 20h
		push	eax
		push	0
		lea	eax, [esp+24Ch+var_210]
		push	eax
		push	2
		push	edi
		call	ds:__dpc_set_kernel_dispatch_info
		mov	ecx, [esp+258h+var_218]
		add	esp, 38h
		mov	edx, [esp+220h+arg_4]
		mov	eax, ecx
		imul	eax, [esp+220h+var_214]
		shl	ecx, 5
		mov	[esp+220h+var_1B0], ecx
		mov	ecx, [esp+220h+arg_0]
		mov	[esp+220h+var_180], edx
		shl	eax, 8
		mov	[esp+220h+var_1C0], eax
		mov	eax, edx
		imul	eax, ecx
		lea	edx, [esp+220h+var_170]
		mov	[esp+220h+var_190], ecx
		mov	[esp+220h+var_1A0], eax
		xor	eax, eax
		nop	word ptr [eax+eax+00h]

loc_4056C0:				; CODE XREF: sub_4055B0+11Dj
		mov	ecx, [esi+eax*4]
		lea	edx, [edx+10h]
		inc	eax
		mov	[edx-10h], ecx
		cmp	eax, 16h
		jb	short loc_4056C0
		lea	eax, [esp+220h+var_1C0]
		mov	[esp+220h+var_E0], 0
		mov	[esp+220h+var_1F0], eax
		lea	eax, [esp+220h+var_1FC]
		push	2
		push	eax
		push	edi
		mov	[esp+22Ch+var_50], 0
		mov	[esp+22Ch+var_D0], 0
		mov	[esp+22Ch+var_40], 0
		mov	[esp+22Ch+var_1FC], 0
		mov	[esp+22Ch+var_1F8], 10000h
		mov	[esp+22Ch+var_1F4], 1
		mov	[esp+22Ch+var_1EC], 1C0h
		mov	[esp+22Ch+var_1E8], 0
		call	ds:__dpc_set_const_buffer_info
		push	edi
		call	ds:__dpc_dispatch_kernel
		push	edi
		call	ds:__dpc_release_call_handle
		add	esp, 14h
		pop	edi
		pop	esi
		add	esp, 218h
		retn	8
sub_4055B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_405760	proc near		; CODE XREF: T0()+22Dp

var_2F8		= dword	ptr -2F8h
var_2F4		= dword	ptr -2F4h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2C0		= dword	ptr -2C0h
var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
var_298		= dword	ptr -298h
var_294		= byte ptr -294h
var_290		= dword	ptr -290h
var_280		= dword	ptr -280h
var_270		= dword	ptr -270h
var_260		= dword	ptr -260h
var_250		= dword	ptr -250h
var_240		= byte ptr -240h
var_1B0		= dword	ptr -1B0h
var_1A0		= dword	ptr -1A0h
var_E0		= dword	ptr -0E0h
var_D0		= dword	ptr -0D0h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2F8h
		push	esi
		push	edi
		push	ecx
		mov	esi, edx
		call	ds:__dpc_create_call_handle
		mov	edi, eax
		mov	[esp+304h+var_2C4], 0
		lea	eax, [esi+7Ch]
		mov	[esp+304h+var_2BC], 3
		mov	[esp+304h+var_2A0], eax
		lea	ecx, [esi+24h]
		push	3
		lea	eax, [esp+308h+var_2C4]
		mov	[esp+308h+var_2C0], ecx
		push	eax
		lea	ecx, [esi+58h]
		mov	[esp+30Ch+var_2B8], 2
		push	edi
		mov	[esp+310h+var_2B4], 0
		mov	[esp+310h+var_2B0], ecx
		mov	[esp+310h+var_2AC], 3
		mov	[esp+310h+var_2A8], 2
		mov	[esp+310h+var_2A4], 0
		mov	[esp+310h+var_29C], 3
		mov	[esp+310h+var_298], 2
		call	ds:__dpc_set_device_resource_info
		push	offset dword_401500
		push	edi
		call	ds:__dpc_set_kernel_shader_info
		mov	eax, [esp+318h+arg_0]
		mov	[esp+318h+var_2F0], eax
		mov	eax, [esp+318h+arg_4]
		mov	[esp+318h+var_2EC], eax
		lea	eax, [esp+318h+var_294]
		push	eax
		lea	eax, [esp+31Ch+var_2F4]
		mov	[esp+31Ch+var_2E8], 1
		push	eax
		lea	eax, [esp+320h+var_2F8]
		mov	[esp+320h+var_2E4], 8
		push	eax
		lea	eax, [esp+324h+var_2E8]
		mov	[esp+324h+var_2E0], 20h
		push	eax
		push	0
		lea	eax, [esp+32Ch+var_2F0]
		push	eax
		push	2
		push	edi
		call	ds:__dpc_set_kernel_dispatch_info
		mov	ecx, [esp+338h+var_2F8]
		add	esp, 38h
		mov	edx, [esp+300h+arg_4]
		mov	eax, ecx
		imul	eax, [esp+300h+var_2F4]
		shl	ecx, 5
		mov	[esp+300h+var_280], ecx
		mov	ecx, [esp+300h+arg_0]
		mov	[esp+300h+var_250], edx
		shl	eax, 8
		mov	[esp+300h+var_290], eax
		mov	eax, edx
		imul	eax, ecx
		lea	edx, [esp+300h+var_240]
		mov	[esp+300h+var_260], ecx
		mov	[esp+300h+var_270], eax
		xor	eax, eax
		nop

loc_405890:				; CODE XREF: sub_405760+13Dj
		mov	ecx, [esi+eax*4]
		lea	edx, [edx+10h]
		inc	eax
		mov	[edx-10h], ecx
		cmp	eax, 23h
		jb	short loc_405890
		lea	eax, [esp+300h+var_290]
		mov	[esp+300h+var_1B0], 0
		mov	[esp+300h+var_2D0], eax
		lea	eax, [esp+300h+var_2DC]
		push	2
		push	eax
		push	edi
		mov	[esp+30Ch+var_E0], 0
		mov	[esp+30Ch+var_50], 0
		mov	[esp+30Ch+var_1A0], 0
		mov	[esp+30Ch+var_D0], 0
		mov	[esp+30Ch+var_40], 0
		mov	[esp+30Ch+var_2DC], 0
		mov	[esp+30Ch+var_2D8], 10000h
		mov	[esp+30Ch+var_2D4], 1
		mov	[esp+30Ch+var_2CC], 290h
		mov	[esp+30Ch+var_2C8], 0
		call	ds:__dpc_set_const_buffer_info
		push	edi
		call	ds:__dpc_dispatch_kernel
		push	edi
		call	ds:__dpc_release_call_handle
		add	esp, 14h
		pop	edi
		pop	esi
		add	esp, 2F8h
		retn	8
sub_405760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405940	proc near		; CODE XREF: sub_407258+3j
					; sub_407288+3j

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		mov	eax, large fs:0
		push	0FFFFFFFFh
		push	offset sub_4072B7
		push	eax
		mov	large fs:0, esp
		push	esi
		mov	esi, ecx
		call	ds:?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		test	al, al
		jnz	short loc_40596D
		mov	ecx, [esi]
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)

loc_40596D:				; CODE XREF: sub_405940+23j
		mov	[ebp+var_4], 0
		mov	ecx, [esi]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_405988
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_405988:				; CODE XREF: sub_405940+41j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_405940	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4059A0	proc near		; CODE XREF: sub_401C50+5p
		mov	eax, ecx
		retn
sub_4059A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4059B0	proc near		; CODE XREF: sub_407250+3j
					; sub_407280+3j ...

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, large fs:0
		push	0FFFFFFFFh
		push	offset SEH_403810
		push	eax
		mov	large fs:0, esp
		mov	ecx, [ecx]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_4059DC
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_4059DC:				; CODE XREF: sub_4059B0+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_4059B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4059F0	proc near		; CODE XREF: sub_4034B0+AFp

var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset SEH_4059F0
		mov	eax, large fs:0
		push	eax
		mov	large fs:0, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_18], edx
		push	edi
		xor	edi, edi
		mov	[ebp+var_10], esp
		xor	bl, bl
		mov	[ebp+var_1C], esi
		mov	eax, [esi]
		mov	[ebp+var_20], edi
		mov	[ebp+var_11], bl
		mov	[ebp+var_28], esi
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_405A38
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_405A38:				; CODE XREF: sub_4059F0+41j
		push	1
		mov	ecx, esi
		mov	[ebp+var_4], 0
		call	ds:?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char>>::_Ipfx(bool)
		mov	[ebp+var_24], al
		mov	[ebp+var_4], 1
		test	al, al
		jz	loc_405B1A
		mov	eax, [ebp+var_18]
		mov	byte ptr [ebp+var_4], 2
		cmp	dword ptr [eax+14h], 10h
		mov	dword ptr [eax+10h], 0
		jb	short loc_405A71
		mov	eax, [eax]

loc_405A71:				; CODE XREF: sub_4059F0+7Dj
		mov	byte ptr [eax],	0
		movzx	eax, byte ptr [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		call	ds:?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ	; std::basic_streambuf<char,std::char_traits<char>>::sgetc(void)

loc_405A8A:				; CODE XREF: sub_4059F0+FAj
		mov	edx, eax
		cmp	edx, 0FFFFFFFFh
		setz	cl
		test	cl, cl
		jz	short loc_405A9D
		mov	edi, 1
		jmp	short loc_405B0F
; ---------------------------------------------------------------------------

loc_405A9D:				; CODE XREF: sub_4059F0+A4j
		cmp	edx, [ebp+arg_0]
		setz	al
		test	al, al
		jz	short loc_405ABD
		mov	eax, [esi]
		mov	bl, 1
		mov	[ebp+var_11], bl
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		call	ds:?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::sbumpc(void)
		jmp	short loc_405B0F
; ---------------------------------------------------------------------------

loc_405ABD:				; CODE XREF: sub_4059F0+B5j
		mov	eax, [ebp+var_18]
		cmp	dword ptr [eax+10h], 0FFFFFFFEh
		jb	short loc_405ACD
		mov	edi, 2
		jmp	short loc_405B0F
; ---------------------------------------------------------------------------

loc_405ACD:				; CODE XREF: sub_4059F0+D4j
		push	edx
		push	ecx
		mov	ecx, eax
		call	sub_404A00
		mov	eax, [esi]
		mov	bl, 1
		mov	[ebp+var_11], bl
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		call	ds:?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::snextc(void)
		jmp	short loc_405A8A
; ---------------------------------------------------------------------------

loc_405AEC:				; DATA XREF: .rdata:004098D0o
		mov	edx, [ebp+var_1C]
		push	1
		push	4
		mov	eax, [edx]
		mov	ecx, [eax+4]
		add	ecx, edx
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	eax, offset loc_405B06
		retn
; ---------------------------------------------------------------------------

loc_405B06:				; DATA XREF: sub_4059F0+110o
		mov	esi, [ebp+var_1C]
		mov	edi, [ebp+var_20]
		mov	bl, [ebp+var_11]

loc_405B0F:				; CODE XREF: sub_4059F0+ABj
					; sub_4059F0+CBj ...
		mov	[ebp+var_4], 1
		test	bl, bl
		jnz	short loc_405B1D

loc_405B1A:				; CODE XREF: sub_4059F0+65j
		or	edi, 2

loc_405B1D:				; CODE XREF: sub_4059F0+128j
		mov	eax, [esi]
		push	0
		push	edi
		mov	ecx, [eax+4]
		add	ecx, esi
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		mov	[ebp+var_4], 4
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_405B49
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_405B49:				; CODE XREF: sub_4059F0+152j
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_4059F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405B60	proc near		; CODE XREF: sub_4072D8+3j

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		mov	eax, large fs:0
		push	0FFFFFFFFh
		push	offset sub_4072B7
		push	eax
		mov	large fs:0, esp
		mov	[ebp+var_4], 0
		mov	ecx, [ecx]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_405B93
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_405B93:				; CODE XREF: sub_405B60+2Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_405B60	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION Concurrency::runtime_exception::~runtime_exception(void).	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION Concurrency::runtime_exception::runtime_exception(runtime_exception::runtime_exception const &). PRESS KEYPAD "+"	TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405BAE(size_t	Size)
sub_405BAE	proc near		; CODE XREF: sub_404C20+24p
					; sub_404C20+3Bp ...

Size		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		jmp	short loc_405BD2
; ---------------------------------------------------------------------------

loc_405BB3:				; CODE XREF: sub_405BAE+2Fj
		push	[ebp+Size]
		call	_callnewh
		pop	ecx
		test	eax, eax
		jnz	short loc_405BD2
		cmp	[ebp+Size], 0FFFFFFFFh
		jnz	short loc_405BCD
		call	sub_406177
; ---------------------------------------------------------------------------
		jmp	short loc_405BD2
; ---------------------------------------------------------------------------

loc_405BCD:				; CODE XREF: sub_405BAE+16j
		call	sub_40615A
; ---------------------------------------------------------------------------

loc_405BD2:				; CODE XREF: sub_405BAE+3j
					; sub_405BAE+10j ...
		push	[ebp+Size]	; Size
		call	malloc
		pop	ecx
		test	eax, eax
		jz	short loc_405BB3
		pop	ebp
		retn
sub_405BAE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405BE1	proc near		; CODE XREF: sub_405D2A+49p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		lea	edx, [ecx+18h]
		add	edx, eax
		movzx	eax, word ptr [ecx+6]
		imul	esi, eax, 28h
		add	esi, edx
		cmp	edx, esi
		jz	short loc_405C1C
		mov	ecx, [ebp+arg_4]

loc_405C06:				; CODE XREF: sub_405BE1+39j
		cmp	ecx, [edx+0Ch]
		jb	short loc_405C15
		mov	eax, [edx+8]
		add	eax, [edx+0Ch]
		cmp	ecx, eax
		jb	short loc_405C21

loc_405C15:				; CODE XREF: sub_405BE1+28j
		add	edx, 28h
		cmp	edx, esi
		jnz	short loc_405C06

loc_405C1C:				; CODE XREF: sub_405BE1+20j
		xor	eax, eax

loc_405C1E:				; CODE XREF: sub_405BE1+42j
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_405C21:				; CODE XREF: sub_405BE1+32j
		mov	eax, edx
		jmp	short loc_405C1E
sub_405BE1	endp


; =============== S U B	R O U T	I N E =======================================


sub_405C25	proc near		; CODE XREF: start-147p
		call	sub_406332
		test	eax, eax
		jnz	short loc_405C31
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_405C31:				; CODE XREF: sub_405C25+7j
		mov	eax, large fs:18h
		push	esi
		mov	esi, offset dword_411DC4
		mov	edx, [eax+4]
		jmp	short loc_405C46
; ---------------------------------------------------------------------------

loc_405C42:				; CODE XREF: sub_405C25+2Bj
		cmp	edx, eax
		jz	short loc_405C56

loc_405C46:				; CODE XREF: sub_405C25+1Bj
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [esi], ecx
		test	eax, eax
		jnz	short loc_405C42
		xor	al, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_405C56:				; CODE XREF: sub_405C25+1Fj
		mov	al, 1
		pop	esi
		retn
sub_405C25	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405C5A	proc near		; CODE XREF: start-161p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_405C6A
		mov	byte_411DE0, 1

loc_405C6A:				; CODE XREF: sub_405C5A+7j
		call	sub_406194
		call	sub_40661F
		test	al, al
		jnz	short loc_405C7C

loc_405C78:				; CODE XREF: sub_405C5A+33j
		xor	al, al
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_405C7C:				; CODE XREF: sub_405C5A+1Cj
		call	sub_40661F
		test	al, al
		jnz	short loc_405C8F
		push	0
		call	sub_40661F
		pop	ecx
		jmp	short loc_405C78
; ---------------------------------------------------------------------------

loc_405C8F:				; CODE XREF: sub_405C5A+29j
		mov	al, 1
		pop	ebp
		retn
sub_405C5A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405C93	proc near		; CODE XREF: sub_405E7F+23p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_405CA6
		cmp	esi, 1
		jnz	short loc_405D22

loc_405CA6:				; CODE XREF: sub_405C93+Cj
		call	sub_406332
		test	eax, eax
		jz	short loc_405CD9
		test	esi, esi
		jnz	short loc_405CD9
		push	offset dword_411DC8
		call	_initialize_onexit_table
		pop	ecx
		test	eax, eax
		jz	short loc_405CC6
		xor	al, al
		jmp	short loc_405D1D
; ---------------------------------------------------------------------------

loc_405CC6:				; CODE XREF: sub_405C93+2Dj
		push	offset dword_411DD4
		call	_initialize_onexit_table
		neg	eax
		pop	ecx
		sbb	al, al
		inc	al
		jmp	short loc_405D1D
; ---------------------------------------------------------------------------

loc_405CD9:				; CODE XREF: sub_405C93+1Aj
					; sub_405C93+1Ej
		mov	eax, dword_40C014
		lea	esi, [ebp+var_C]
		push	edi
		and	eax, 1Fh
		mov	edi, offset dword_411DC8
		push	20h
		pop	ecx
		sub	ecx, eax
		or	eax, 0FFFFFFFFh
		ror	eax, cl
		xor	eax, dword_40C014
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		movsd
		movsd
		movsd
		mov	edi, offset dword_411DD4
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		lea	esi, [ebp+var_C]
		mov	[ebp+var_4], eax
		mov	al, 1
		movsd
		movsd
		movsd
		pop	edi

loc_405D1D:				; CODE XREF: sub_405C93+31j
					; sub_405C93+44j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_405D22:				; CODE XREF: sub_405C93+11j
		push	5
		call	sub_40633E
		int	3		; Trap to Debugger
sub_405C93	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_405D2A	proc near		; CODE XREF: start-CAp	start-A5p
		push	8
		push	offset dword_4098D8
		call	sub_4064F0
		and	dword ptr [ebp-4], 0
		mov	eax, 5A4Dh
		cmp	ds:400000h, ax
		jnz	short loc_405DA5
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		jnz	short loc_405DA5
		mov	ecx, 10Bh
		cmp	[eax+400018h], cx
		jnz	short loc_405DA5
		mov	eax, [ebp+8]
		mov	ecx, 400000h
		sub	eax, ecx
		push	eax
		push	ecx
		call	sub_405BE1
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_405DA5
		cmp	dword ptr [eax+24h], 0
		jl	short loc_405DA5
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	al, 1
		jmp	short loc_405DAE
; ---------------------------------------------------------------------------

loc_405D8F:				; DATA XREF: .rdata:004098ECo
		mov	eax, [ebp-14h]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_405DA2:				; DATA XREF: .rdata:004098F0o
		mov	esp, [ebp-18h]

loc_405DA5:				; CODE XREF: sub_405D2A+1Cj
					; sub_405D2A+2Dj ...
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		xor	al, al

loc_405DAE:				; CODE XREF: sub_405D2A+63j
		call	sub_406536
		retn
sub_405D2A	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405DB4	proc near		; CODE XREF: start-DEp

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		call	sub_406332
		test	eax, eax
		jz	short loc_405DCF
		cmp	[ebp+arg_0], 0
		jnz	short loc_405DCF
		xor	eax, eax
		mov	ecx, offset dword_411DC4
		xchg	eax, [ecx]

loc_405DCF:				; CODE XREF: sub_405DB4+Aj
					; sub_405DB4+10j
		pop	ebp
		retn
sub_405DB4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405DD1	proc near		; CODE XREF: start-55p

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	byte_411DE0, 0
		jz	short loc_405DE3
		cmp	[ebp+arg_4], 0
		jnz	short loc_405DF5

loc_405DE3:				; CODE XREF: sub_405DD1+Aj
		push	[ebp+arg_0]
		call	sub_40661F
		push	[ebp+arg_0]
		call	sub_40661F
		pop	ecx
		pop	ecx

loc_405DF5:				; CODE XREF: sub_405DD1+10j
		mov	al, 1
		pop	ebp
		retn
sub_405DD1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405DF9	proc near		; CODE XREF: sub_405E34+6p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword_40C014
		mov	ecx, eax
		xor	eax, dword_411DC8
		and	ecx, 1Fh
		push	[ebp+arg_0]
		ror	eax, cl
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_405E1D
		call	_crt_atexit
		jmp	short loc_405E28
; ---------------------------------------------------------------------------

loc_405E1D:				; CODE XREF: sub_405DF9+1Bj
		push	offset dword_411DC8
		call	_register_onexit_function
		pop	ecx

loc_405E28:				; CODE XREF: sub_405DF9+22j
		neg	eax
		pop	ecx
		sbb	eax, eax
		not	eax
		and	eax, [ebp+arg_0]
		pop	ebp
		retn
sub_405DF9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405E34	proc near		; CODE XREF: sub_401C50+35p
					; sub_405E7F+3Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		call	sub_405DF9
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_405E34	endp

; [00000005 BYTES: COLLAPSED FUNCTION j_free. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405E4E(void *Memory)
sub_405E4E	proc near		; CODE XREF: sub_401CD0+20p
					; sub_405E5C+15p ...

Memory		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Memory]	; Memory
		call	j_free
		pop	ecx
		pop	ebp
		retn
sub_405E4E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_405E5C(void *Memory, char)
sub_405E5C	proc near		; DATA XREF: .rdata:off_408244o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 1
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_408244
		jz	short loc_405E78
		push	0Ch
		push	esi		; Memory
		call	sub_405E4E
		pop	ecx
		pop	ecx

loc_405E78:				; CODE XREF: sub_405E5C+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_405E5C	endp


; =============== S U B	R O U T	I N E =======================================


sub_405E7F	proc near		; DATA XREF: .rdata:00408224o
		push	esi
		push	1
		call	_set_app_type
		call	sub_40660D
		push	eax		; Mode
		call	_set_fmode
		call	__p__commode
		mov	esi, eax
		call	sub_40660A
		push	1
		mov	[esi], eax
		call	sub_405C93
		add	esp, 0Ch
		pop	esi
		test	al, al
		jz	short loc_405F1B
		fnclex
		call	sub_406685
		push	offset sub_4066B0
		call	sub_405E34
		call	sub_40632E
		push	eax
		call	_configure_narrow_argv
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_405F1B
		call	sub_406613
		call	sub_40666D
		test	eax, eax
		jz	short loc_405EEA
		push	offset sub_40660A
		call	__setusermatherr
		pop	ecx

loc_405EEA:				; CODE XREF: sub_405E7F+5Ej
		call	nullsub_1
		call	nullsub_1
		call	sub_406622
		call	sub_40660A
		push	eax
		call	_configthreadlocale
		pop	ecx
		call	sub_40661F
		test	al, al
		jz	short loc_405F13
		call	_initialize_narrow_environment

loc_405F13:				; CODE XREF: sub_405E7F+8Dj
		call	sub_40660A
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_405F1B:				; CODE XREF: sub_405E7F+2Ej
					; sub_405E7F+50j
		push	7
		call	sub_40633E
		int	3		; Trap to Debugger

loc_405F23:				; DATA XREF: .rdata:00408228o
		call	sub_406650
		xor	eax, eax
		retn
sub_405E7F	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_405F2B	proc near		; DATA XREF: .rdata:00408214o
		call	sub_40649D
		call	sub_40660A
		push	eax
		call	_set_new_mode
		pop	ecx
		retn
sub_405F2B	endp

; ---------------------------------------------------------------------------
; [0000012C BYTES: COLLAPSED CHUNK OF FUNCTION start. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_406069	proc near		; DATA XREF: .rdata:0040990Co
		mov	ecx, [ebp-14h]
		mov	eax, [ecx]
		mov	eax, [eax]
		mov	[ebp-20h], eax
		push	ecx
		push	eax
		call	_seh_filter_exe
		pop	ecx
		pop	ecx
		retn
sub_406069	endp


; =============== S U B	R O U T	I N E =======================================


sub_40607D	proc near		; DATA XREF: .rdata:00409910o
		mov	esp, [ebp-18h]
		call	sub_406459
		test	al, al
		jnz	short loc_406091
		push	dword ptr [ebp-20h] ; Code
		call	_exit
; ---------------------------------------------------------------------------

loc_406091:				; CODE XREF: sub_40607D+Aj
		cmp	byte ptr [ebp-19h], 0
		jnz	short loc_40609C
		call	_c_exit

loc_40609C:				; CODE XREF: sub_40607D+18j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	eax, [ebp-20h]
sub_40607D	endp ; sp-analysis failed

; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION start. PRESS KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4060B6	proc near		; DATA XREF: .rdata:00409948o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401C90
		mov	dword ptr [esi], offset	off_408258
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4060B6	endp


; =============== S U B	R O U T	I N E =======================================


sub_4060D1	proc near		; CODE XREF: sub_40615A+9p
		and	dword ptr [ecx+4], 0
		mov	eax, ecx
		and	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], offset aBadAllocation ; "bad	allocation"
		mov	dword ptr [ecx], offset	off_408258
		retn
sub_4060D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4060E9	proc near		; DATA XREF: .rdata:00409984o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401C90
		mov	dword ptr [esi], offset	off_408274
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4060E9	endp


; =============== S U B	R O U T	I N E =======================================


sub_406104	proc near		; CODE XREF: sub_406177+9p
		and	dword ptr [ecx+4], 0
		mov	eax, ecx
		and	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], offset aBadArrayNewLen ; "bad array new length"
		mov	dword ptr [ecx], offset	off_408274
		retn
sub_406104	endp


; =============== S U B	R O U T	I N E =======================================


sub_40611C	proc near		; DATA XREF: .rdata:00409918o
					; .rdata:00409950o
		lea	eax, [ecx+4]
		mov	dword ptr [ecx], offset	off_40824C
		push	eax
		call	__std_exception_destroy
		pop	ecx
		retn
sub_40611C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_40612D(void *Memory, char)
sub_40612D	proc near		; DATA XREF: .rdata:off_408258o
					; .rdata:off_408274o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		lea	eax, [esi+4]
		mov	dword ptr [esi], offset	off_40824C
		push	eax
		call	__std_exception_destroy
		test	[ebp+arg_0], 1
		pop	ecx
		jz	short loc_406153
		push	0Ch
		push	esi		; Memory
		call	sub_405E4E
		pop	ecx
		pop	ecx

loc_406153:				; CODE XREF: sub_40612D+1Aj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_40612D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_40615A	proc near		; CODE XREF: sub_405BAE:loc_405BCDp

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		call	sub_4060D1
		push	offset dword_409914
		lea	eax, [ebp+var_C]
		push	eax
		call	_CxxThrowException
sub_40615A	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_406177	proc near		; CODE XREF: sub_405BAE+18p

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		call	sub_406104
		push	offset dword_40994C
		lea	eax, [ebp+var_C]
		push	eax
		call	_CxxThrowException
sub_406177	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406194	proc near		; CODE XREF: sub_405C5A:loc_405C6Ap

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	dword_411DE4, 0
		sub	esp, 28h
		push	ebx
		xor	ebx, ebx
		inc	ebx
		or	dword_40C004, ebx
		push	0Ah		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	loc_406327
		and	[ebp+var_10], 0
		xor	eax, eax
		or	dword_40C004, 2
		xor	ecx, ecx
		push	esi
		push	edi
		mov	dword_411DE4, ebx
		lea	edi, [ebp+var_28]
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		mov	[edi], eax
		mov	[edi+4], esi
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_1C]
		mov	[ebp+var_8], eax
		xor	ecx, 49656E69h
		mov	eax, [ebp+var_20]
		xor	eax, 6C65746Eh
		or	ecx, eax
		mov	eax, [ebp+var_24]
		push	1
		xor	eax, 756E6547h
		or	ecx, eax
		pop	eax
		push	0
		pop	ecx
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		mov	[edi], eax
		mov	[edi+4], esi
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		jnz	short loc_406264
		mov	eax, [ebp+var_28]
		and	eax, 0FFF3FF0h
		cmp	eax, 106C0h
		jz	short loc_406253
		cmp	eax, 20660h
		jz	short loc_406253
		cmp	eax, 20670h
		jz	short loc_406253
		cmp	eax, 30650h
		jz	short loc_406253
		cmp	eax, 30660h
		jz	short loc_406253
		cmp	eax, 30670h
		jnz	short loc_406264

loc_406253:				; CODE XREF: sub_406194+9Aj
					; sub_406194+A1j ...
		mov	edi, dword_411DE8
		or	edi, 1
		mov	dword_411DE8, edi
		jmp	short loc_40626A
; ---------------------------------------------------------------------------

loc_406264:				; CODE XREF: sub_406194+8Bj
					; sub_406194+BDj
		mov	edi, dword_411DE8

loc_40626A:				; CODE XREF: sub_406194+CEj
		cmp	[ebp+var_8], 7
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_20]
		mov	[ebp+var_4], eax
		mov	[ebp+var_14], eax
		jl	short loc_4062B1
		push	7
		pop	eax
		xor	ecx, ecx
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		lea	ebx, [ebp+var_28]
		mov	[ebx], eax
		mov	[ebx+4], esi
		mov	[ebx+8], ecx
		mov	[ebx+0Ch], edx
		mov	eax, [ebp+var_24]
		test	eax, 200h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_4]
		jz	short loc_4062B1
		or	edi, 2
		mov	dword_411DE8, edi

loc_4062B1:				; CODE XREF: sub_406194+E9j
					; sub_406194+112j
		pop	edi
		pop	esi
		test	eax, 100000h
		jz	short loc_406327
		or	dword_40C004, 4
		mov	dword_411DE4, 2
		test	eax, 8000000h
		jz	short loc_406327
		test	eax, 10000000h
		jz	short loc_406327
		xor	ecx, ecx
		xgetbv
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+var_8]
		and	eax, 6
		xor	ecx, ecx
		cmp	eax, 6
		jnz	short loc_406327
		test	ecx, ecx
		jnz	short loc_406327
		mov	eax, dword_40C004
		or	eax, 8
		mov	dword_411DE4, 3
		test	byte ptr [ebp+var_10], 20h
		mov	dword_40C004, eax
		jz	short loc_406327
		or	eax, 20h
		mov	dword_411DE4, 5
		mov	dword_40C004, eax

loc_406327:				; CODE XREF: sub_406194+20j
					; sub_406194+124j ...
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_406194	endp


; =============== S U B	R O U T	I N E =======================================


sub_40632E	proc near		; CODE XREF: sub_405E7F+41p
		xor	eax, eax
		inc	eax
		retn
sub_40632E	endp


; =============== S U B	R O U T	I N E =======================================


sub_406332	proc near		; CODE XREF: sub_405C25p
					; sub_405C93:loc_405CA6p ...
		xor	eax, eax
		cmp	dword_40C01C, eax
		setnz	al
		retn
sub_406332	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40633E	proc near		; CODE XREF: sub_405C93+91p
					; sub_405E7F+9Ep ...

Dst		= dword	ptr -324h
var_298		= word ptr -298h
var_294		= word ptr -294h
var_290		= word ptr -290h
var_28C		= word ptr -28Ch
var_288		= dword	ptr -288h
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= word ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= word ptr -25Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
ExceptionInfo	= _EXCEPTION_POINTERS ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 324h
		push	ebx
		push	esi
		push	17h		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_406359
		mov	ecx, [ebp+arg_0]
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_406359:				; CODE XREF: sub_40633E+14j
		xor	esi, esi
		lea	eax, [ebp+Dst]
		push	2CCh		; Size
		push	esi		; Val
		push	eax		; Dst
		mov	dword_411DEC, esi
		call	memset
		add	esp, 0Ch
		mov	[ebp+var_274], eax
		mov	[ebp+var_278], ecx
		mov	[ebp+var_27C], edx
		mov	[ebp+var_280], ebx
		mov	[ebp+var_284], esi
		mov	[ebp+var_288], edi
		mov	[ebp+var_25C], ss
		mov	[ebp+var_268], cs
		mov	[ebp+var_28C], ds
		mov	[ebp+var_290], es
		mov	[ebp+var_294], fs
		mov	[ebp+var_298], gs
		pushf
		pop	[ebp+var_264]
		mov	eax, [ebp+4]
		mov	[ebp+var_26C], eax
		lea	eax, [ebp+4]
		mov	[ebp+var_260], eax
		mov	[ebp+Dst], 10001h
		mov	eax, [eax-4]
		push	50h		; Size
		mov	[ebp+var_270], eax
		lea	eax, [ebp+var_58]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebp+4]
		add	esp, 0Ch
		mov	[ebp+var_58], 40000015h
		mov	[ebp+var_54], 1
		mov	[ebp+var_4C], eax
		call	ds:IsDebuggerPresent
		push	esi		; lpTopLevelExceptionFilter
		lea	ebx, [eax-1]
		neg	ebx
		lea	eax, [ebp+var_58]
		mov	[ebp+ExceptionInfo.ExceptionRecord], eax
		lea	eax, [ebp+Dst]
		sbb	bl, bl
		mov	[ebp+ExceptionInfo.ContextRecord], eax
		inc	bl
		call	ds:SetUnhandledExceptionFilter
		lea	eax, [ebp+ExceptionInfo]
		push	eax		; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		test	eax, eax
		jnz	short loc_406453
		movzx	eax, bl
		neg	eax
		sbb	eax, eax
		and	dword_411DEC, eax

loc_406453:				; CODE XREF: sub_40633E+106j
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40633E	endp


; =============== S U B	R O U T	I N E =======================================


sub_406459	proc near		; CODE XREF: start-71p	sub_40607D+3p
		push	0		; lpModuleName
		call	ds:GetModuleHandleW
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_40646A

loc_406467:				; CODE XREF: sub_406459+19j
					; sub_406459+26j ...
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_40646A:				; CODE XREF: sub_406459+Cj
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jnz	short loc_406467
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_406467
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		jnz	short loc_406467
		cmp	dword ptr [eax+74h], 0Eh
		jbe	short loc_406467
		cmp	dword ptr [eax+0E8h], 0
		setnz	al
		retn
sub_406459	endp


; =============== S U B	R O U T	I N E =======================================


sub_40649D	proc near		; CODE XREF: sub_405F2Bp
		push	offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		retn
sub_40649D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_40649Do

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_4064DE
		cmp	dword ptr [eax+10h], 3
		jnz	short loc_4064DE
		mov	eax, [eax+14h]
		cmp	eax, 19930520h
		jz	short loc_4064E4
		cmp	eax, 19930521h
		jz	short loc_4064E4
		cmp	eax, 19930522h
		jz	short loc_4064E4
		cmp	eax, 1994000h
		jz	short loc_4064E4

loc_4064DE:				; CODE XREF: TopLevelExceptionFilter+Ej
					; TopLevelExceptionFilter+14j
		xor	eax, eax
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_4064E4:				; CODE XREF: TopLevelExceptionFilter+1Ej
					; TopLevelExceptionFilter+25j ...
		call	terminate
		int	3		; Trap to Debugger
TopLevelExceptionFilter	endp ; sp-analysis failed

; [00000006 BYTES: COLLAPSED FUNCTION j_nullsub_1. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_4064F0	proc near		; CODE XREF: sub_405D2A+7p start-168p

arg_4		= dword	ptr  8

		push	offset sub_40654B
		push	large dword ptr	fs:0
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+arg_4], ebp
		lea	ebp, [esp+8+arg_4]
		sub	esp, eax
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_40C014
		xor	[ebp-4], eax
		xor	eax, ebp
		push	eax
		mov	[ebp-18h], esp
		push	dword ptr [ebp-8]
		mov	eax, [ebp-4]
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	[ebp-8], eax
		lea	eax, [ebp-10h]
		mov	large fs:0, eax
		repne retn
sub_4064F0	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_406536	proc near		; CODE XREF: sub_405D2A:loc_405DAEp
					; start:loc_4060A6p
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		push	ecx
		repne retn
sub_406536	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40654B	proc near		; DATA XREF: sub_4064F0o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	offset byte_4066DB
		push	offset dword_40C014
		call	_except_handler4_common
		add	esp, 18h
		pop	ebp
		retn
sub_40654B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40656E	proc near		; CODE XREF: startp

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, dword_40C014
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_40659E
		test	esi, eax
		jz	short loc_40659E
		not	eax
		mov	dword_40C010, eax
		jmp	short loc_406604
; ---------------------------------------------------------------------------

loc_40659E:				; CODE XREF: sub_40656E+21j
					; sub_40656E+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_4065E6
		mov	ecx, 0BB40E64Fh
		jmp	short loc_4065F6
; ---------------------------------------------------------------------------

loc_4065E6:				; CODE XREF: sub_40656E+6Fj
		test	esi, ecx
		jnz	short loc_4065F6
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_4065F6:				; CODE XREF: sub_40656E+76j
					; sub_40656E+7Aj
		mov	dword_40C014, ecx
		not	ecx
		mov	dword_40C010, ecx

loc_406604:				; CODE XREF: sub_40656E+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_40656E	endp


; =============== S U B	R O U T	I N E =======================================


sub_40660A	proc near		; CODE XREF: sub_405E7F+1Ap
					; sub_405E7F+7Ap ...
		xor	eax, eax
		retn
sub_40660A	endp


; =============== S U B	R O U T	I N E =======================================


sub_40660D	proc near		; CODE XREF: sub_405E7F+8p
		mov	eax, 4000h
		retn
sub_40660D	endp


; =============== S U B	R O U T	I N E =======================================


sub_406613	proc near		; CODE XREF: sub_405E7F+52p
		push	offset ListHead	; ListHead
		call	ds:InitializeSListHead
		retn
sub_406613	endp


; =============== S U B	R O U T	I N E =======================================


sub_40661F	proc near		; CODE XREF: sub_405C5A+15p
					; sub_405C5A:loc_405C7Cp ...
		mov	al, 1
		retn
sub_40661F	endp


; =============== S U B	R O U T	I N E =======================================


sub_406622	proc near		; CODE XREF: sub_405E7F+75p
		push	30000h		; Mask
		push	10000h		; NewValue
		push	0		; CurrentState
		call	_controlfp_s
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40663B
		retn
; ---------------------------------------------------------------------------

loc_40663B:				; CODE XREF: sub_406622+16j
		push	7
		call	sub_40633E
		int	3		; Trap to Debugger
sub_406622	endp ; sp-analysis failed

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_406644	proc near		; CODE XREF: sub_406650p
		mov	eax, offset dword_411DF8
		retn
sub_406644	endp


; =============== S U B	R O U T	I N E =======================================


sub_40664A	proc near		; CODE XREF: sub_406650+Ep
		mov	eax, offset dword_411E00
		retn
sub_40664A	endp


; =============== S U B	R O U T	I N E =======================================


sub_406650	proc near		; CODE XREF: sub_405E7F:loc_405F23p
		call	sub_406644
		mov	ecx, [eax+4]
		or	dword ptr [eax], 4
		mov	[eax+4], ecx
		call	sub_40664A
		mov	ecx, [eax+4]
		or	dword ptr [eax], 2
		mov	[eax+4], ecx
		retn
sub_406650	endp


; =============== S U B	R O U T	I N E =======================================


sub_40666D	proc near		; CODE XREF: sub_405E7F+57p
		xor	eax, eax
		cmp	dword_40C018, eax
		setz	al
		retn
sub_40666D	endp


; =============== S U B	R O U T	I N E =======================================


sub_406679	proc near		; CODE XREF: start-D8p
		mov	eax, offset dword_4323A0
		retn
sub_406679	endp


; =============== S U B	R O U T	I N E =======================================


sub_40667F	proc near		; CODE XREF: start:loc_405FFBp
		mov	eax, offset dword_43239C
		retn
sub_40667F	endp


; =============== S U B	R O U T	I N E =======================================


sub_406685	proc near		; CODE XREF: sub_405E7F+32p
		push	ebx
		push	esi
		mov	esi, offset dword_409298
		mov	ebx, offset dword_409298
		cmp	esi, ebx
		jnb	short loc_4066AD
		push	edi

loc_406696:				; CODE XREF: sub_406685+25j
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_4066A5
		mov	ecx, edi
		call	j_nullsub_1
		call	edi

loc_4066A5:				; CODE XREF: sub_406685+15j
		add	esi, 4
		cmp	esi, ebx
		jb	short loc_406696
		pop	edi

loc_4066AD:				; CODE XREF: sub_406685+Ej
		pop	esi
		pop	ebx
		retn
sub_406685	endp


; =============== S U B	R O U T	I N E =======================================


sub_4066B0	proc near		; DATA XREF: sub_405E7F+37o
		push	ebx
		push	esi
		mov	esi, offset dword_4092A0
		mov	ebx, offset dword_4092A0
		cmp	esi, ebx
		jnb	short loc_4066D8
		push	edi

loc_4066C1:				; CODE XREF: sub_4066B0+25j
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_4066D0
		mov	ecx, edi
		call	j_nullsub_1
		call	edi

loc_4066D0:				; CODE XREF: sub_4066B0+15j
		add	esi, 4
		cmp	esi, ebx
		jb	short loc_4066C1
		pop	edi

loc_4066D8:				; CODE XREF: sub_4066B0+Ej
		pop	esi
		pop	ebx
		retn
sub_4066B0	endp

; ---------------------------------------------------------------------------
byte_4066DB	db 3Bh			; DATA XREF: sub_40654B+Fo
		db 0Dh
		dd offset dword_40C014
		db 0F2h, 75h, 2
; ---------------------------------------------------------------------------
		repne retn
; ---------------------------------------------------------------------------
		dw 0E9F2h
		dd 28h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4066EC(struct	_EXCEPTION_POINTERS *ExceptionInfo)
sub_4066EC	proc near		; CODE XREF: .text:00406806p

ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	[ebp+ExceptionInfo] ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		pop	ebp
		retn
sub_4066EC	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ebp, esp
		sub	esp, 324h
		push	17h
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_40672D
		push	2
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_40672D:				; CODE XREF: .text:00406726j
		mov	dword_411F08, eax
		mov	dword_411F04, ecx
		mov	dword_411F00, edx
		mov	dword_411EFC, ebx
		mov	dword_411EF8, esi
		mov	dword_411EF4, edi
		mov	word_411F20, ss
		mov	word_411F14, cs
		mov	word_411EF0, ds
		mov	word_411EEC, es
		mov	word_411EE8, fs
		mov	word_411EE4, gs
		pushf
		pop	dword_411F18
		mov	eax, [ebp+0]
		mov	dword_411F0C, eax
		mov	eax, [ebp+4]
		mov	dword_411F10, eax
		lea	eax, [ebp+8]
		mov	dword_411F1C, eax
		mov	eax, [ebp-324h]
		mov	dword_411E58, 10001h
		mov	eax, dword_411F10
		mov	dword_411E14, eax
		mov	dword_411E08, 0C0000409h
		mov	dword_411E0C, 1
		mov	dword_411E18, 1
		push	4
		pop	eax
		imul	eax, 0
		mov	dword_411E1C[eax], 2
		push	4
		pop	eax
		imul	eax, 0
		mov	ecx, dword_40C014
		mov	[ebp+eax-8], ecx
		push	4
		pop	eax
		shl	eax, 0
		mov	ecx, dword_40C010
		mov	[ebp+eax-8], ecx
		push	offset off_408294
		call	sub_4066EC
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __std_exception_destroy. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _callnewh. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _configure_narrow_argv. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initialize_narrow_environment. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initialize_onexit_table.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _register_onexit_function. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_atexit. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _cexit. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _seh_filter_exe. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _set_app_type. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __setusermatherr.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _get_initial_narrow_environment. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _set_fmode. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __p___argc. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __p___argv. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _c_exit. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _register_thread_local_exe_atexit_callback. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _configthreadlocale. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _set_new_mode. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __p__commode. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION terminate. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_4068D0	proc near		; DATA XREF: T1()+16o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= qword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 38h
		push	ebx
		mov	ebx, [esp+3Ch+arg_0]
		xorps	xmm0, xmm0
		push	ebp
		push	esi
		movlpd	[esp+44h+var_18], xmm0
		mov	ebp, dword ptr [esp+44h+var_18]
		push	edi
		mov	edi, dword ptr [esp+48h+var_18+4]
		mov	[esp+48h+var_28], edi
		mov	[esp+48h+var_38], ebp
		nop	dword ptr [eax+00h]
		nop	dword ptr [eax+eax+00000000h]

loc_406900:				; CODE XREF: sub_4068D0+1E6j
					; sub_4068D0+1F1j
		mov	esi, dword_412144[ebp*4]
		mov	[esp+48h+var_4], 0
		call	_vcomp_barrier
		lea	eax, [esp+48h+var_18]
		push	eax
		lea	eax, [esp+4Ch+var_10]
		push	eax
		push	1
		push	0
		push	1
		push	0
		push	7
		push	0
		push	0
		call	_vcomp_for_static_simple_init_i8
		mov	edx, [esp+6Ch+var_C]
		add	esp, 24h
		mov	eax, [esp+48h+var_10]
		mov	[esp+48h+var_30], eax
		mov	[esp+48h+var_2C], edx
		cmp	edx, dword ptr [esp+48h+var_18+4]
		jg	loc_406A71
		mov	ebp, dword ptr [esp+48h+var_18]
		jl	short loc_40695C
		cmp	eax, ebp
		ja	loc_406A6D

loc_40695C:				; CODE XREF: sub_4068D0+82j
		mov	ecx, esi
		shr	ecx, 1Eh
		mov	[esp+48h+var_24], ecx

loc_406965:				; CODE XREF: sub_4068D0+189j
					; sub_4068D0+193j
		mov	edi, eax
		mov	ecx, eax
		mov	ebx, edx
		and	ecx, 1
		shrd	edi, ebx, 1
		mov	eax, 1
		xor	edi, [esp+48h+var_24]
		shl	eax, cl
		sar	ebx, 1
		cdq
		xor	ebx, 0
		and	eax, edi
		and	edx, ebx
		call	sub_406BD0
		mov	ecx, edx
		xorps	xmm0, xmm0
		shld	ecx, eax, 18h
		movlpd	qword ptr [esp+40h], xmm0
		shl	eax, 18h
		mov	[esp+48h+var_20], ecx
		mov	[esp+48h+var_1C], eax
		test	ecx, ecx
		jl	short loc_406A18
		jg	short loc_4069B0
		test	eax, eax
		jz	short loc_406A18

loc_4069B0:				; CODE XREF: sub_4068D0+DAj
		mov	eax, [esp+48h+var_4]
		mov	ebp, [esp+48h+var_8]
		mov	[esp+48h+var_34], eax
		nop	dword ptr [eax+00h]

loc_4069C0:				; CODE XREF: sub_4068D0+13Aj
					; sub_4068D0+142j
		call	ds:omp_get_thread_num
		cdq
		and	esi, 3FFFFFFFh
		push	0
		mov	ebx, edx
		mov	edi, eax
		push	2
		xor	ebx, 0
		xor	edi, esi
		push	ebx
		push	edi
		call	sub_406B10
		mov	esi, eax
		mov	eax, [esp+48h+var_34]
		shld	edx, esi, 1Dh
		shrd	edi, ebx, 1
		shl	esi, 1Dh
		sar	ebx, 1
		or	esi, edi
		or	edx, ebx
		add	ebp, 1
		mov	[esp+48h+var_4], edx
		adc	eax, 0
		mov	[esp+48h+var_34], eax
		cmp	eax, [esp+48h+var_20]
		jl	short loc_4069C0
		jg	short loc_406A14
		cmp	ebp, [esp+48h+var_1C]
		jb	short loc_4069C0

loc_406A14:				; CODE XREF: sub_4068D0+13Cj
		mov	ebp, dword ptr [esp+48h+var_18]

loc_406A18:				; CODE XREF: sub_4068D0+D8j
					; sub_4068D0+DEj
		push	offset dword_432398
		call	_vcomp_enter_critsect
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx]
		and	eax, 0C0000000h
		or	eax, esi
		mov	[ebx], eax
		push	dword_432398
		call	_vcomp_leave_critsect
		add	esp, 8
		mov	eax, [esp+48h+var_30]
		mov	edx, [esp+48h+var_2C]
		add	eax, 1
		mov	[esp+48h+var_30], eax
		adc	edx, 0
		mov	[esp+48h+var_2C], edx
		cmp	edx, dword ptr [esp+48h+var_18+4]
		jl	loc_406965
		jg	short loc_406A69
		cmp	eax, ebp
		jbe	loc_406965

loc_406A69:				; CODE XREF: sub_4068D0+18Fj
		mov	edi, [esp+48h+var_28]

loc_406A6D:				; CODE XREF: sub_4068D0+86j
		mov	ebp, [esp+48h+var_38]

loc_406A71:				; CODE XREF: sub_4068D0+78j
		call	_vcomp_for_static_end
		push	0
		call	_vcomp_single_begin
		add	esp, 4
		test	eax, eax
		jz	short loc_406A95
		mov	eax, [ebx]
		and	esi, 0C0000000h
		and	eax, 3F000000h
		or	eax, esi
		mov	[ebx], eax

loc_406A95:				; CODE XREF: sub_4068D0+1B2j
		call	_vcomp_single_end
		call	_vcomp_barrier
		mov	eax, [ebx]
		mov	dword_412144[ebp*4], eax
		add	ebp, 1
		mov	[esp+48h+var_38], ebp
		adc	edi, 0
		mov	[esp+48h+var_28], edi
		js	loc_406900
		jg	short loc_406AC7
		cmp	ebp, 3
		jb	loc_406900

loc_406AC7:				; CODE XREF: sub_4068D0+1ECj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
sub_4068D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406AD0	proc near		; CODE XREF: sub_402990+66p
					; sub_402990+71p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_C]
		or	ecx, eax
		mov	ecx, [esp+arg_8]
		jnz	short loc_406AE9
		mov	eax, [esp+arg_0]
		mul	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_406AE9:				; CODE XREF: sub_406AD0+Ej
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+4+arg_0]
		mul	[esp+4+arg_C]
		add	ebx, eax
		mov	eax, [esp+4+arg_0]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
sub_406AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406B10	proc near		; CODE XREF: sub_4068D0+10Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	edi
		xor	edi, edi
		mov	eax, [esp+8+arg_4]
		or	eax, eax
		jge	short loc_406B30
		inc	edi
		mov	edx, [esp+8+arg_0]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+8+arg_4], eax
		mov	[esp+8+arg_0], edx

loc_406B30:				; CODE XREF: sub_406B10+Aj
		mov	eax, [esp+8+arg_C]
		or	eax, eax
		jge	short loc_406B4B
		mov	edx, [esp+8+arg_8]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+8+arg_C], eax
		mov	[esp+8+arg_8], edx

loc_406B4B:				; CODE XREF: sub_406B10+26j
		or	eax, eax
		jnz	short loc_406B6A
		mov	ecx, [esp+8+arg_8]
		mov	eax, [esp+8+arg_4]
		xor	edx, edx
		div	ecx
		mov	eax, [esp+8+arg_0]
		div	ecx
		mov	eax, edx
		xor	edx, edx
		dec	edi
		jns	short loc_406BB6
		jmp	short loc_406BBD
; ---------------------------------------------------------------------------

loc_406B6A:				; CODE XREF: sub_406B10+3Dj
		mov	ebx, eax
		mov	ecx, [esp+8+arg_8]
		mov	edx, [esp+8+arg_4]
		mov	eax, [esp+8+arg_0]

loc_406B78:				; CODE XREF: sub_406B10+72j
		shr	ebx, 1
		rcr	ecx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ebx, ebx
		jnz	short loc_406B78
		div	ecx
		mov	ecx, eax
		mul	[esp+8+arg_C]
		xchg	eax, ecx
		mul	[esp+8+arg_8]
		add	edx, ecx
		jb	short loc_406BA3
		cmp	edx, [esp+8+arg_4]
		ja	short loc_406BA3
		jb	short loc_406BAB
		cmp	eax, [esp+8+arg_0]
		jbe	short loc_406BAB

loc_406BA3:				; CODE XREF: sub_406B10+83j
					; sub_406B10+89j
		sub	eax, [esp+8+arg_8]
		sbb	edx, [esp+8+arg_C]

loc_406BAB:				; CODE XREF: sub_406B10+8Bj
					; sub_406B10+91j
		sub	eax, [esp+8+arg_0]
		sbb	edx, [esp+8+arg_4]
		dec	edi
		jns	short loc_406BBD

loc_406BB6:				; CODE XREF: sub_406B10+56j
		neg	edx
		neg	eax
		sbb	edx, 0

loc_406BBD:				; CODE XREF: sub_406B10+58j
					; sub_406B10+A4j
		pop	edi
		pop	ebx
		retn	10h
sub_406B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406BD0	proc near		; CODE XREF: sub_4068D0+B7p
		cmp	cl, 40h
		jnb	short loc_406BEB
		cmp	cl, 20h
		jnb	short loc_406BE0
		shrd	eax, edx, cl
		sar	edx, cl
		retn
; ---------------------------------------------------------------------------

loc_406BE0:				; CODE XREF: sub_406BD0+8j
		mov	eax, edx
		sar	edx, 1Fh
		and	cl, 1Fh
		sar	eax, cl
		retn
; ---------------------------------------------------------------------------

loc_406BEB:				; CODE XREF: sub_406BD0+3j
		sar	edx, 1Fh
		mov	eax, edx
		retn
sub_406BD0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	ecx, 1
		movsd	xmm5, ds:qword_408D98
		jmp	short loc_406C2B
; ---------------------------------------------------------------------------
		mov	ecx, 2
		movsd	xmm5, ds:qword_408DA0
		jmp	short loc_406C2B
; ---------------------------------------------------------------------------
		mov	ecx, 3
		movsd	xmm5, ds:qword_408D98

loc_406C2B:				; CODE XREF: .text:00406C0Dj
					; .text:00406C1Cj
		movd	eax, xmm0
		and	eax, 7FFFFFFFh
		cmp	eax, 7F800000h
		jnb	loc_406D8B
		cvtss2sd xmm0, xmm0
; START	OF FUNCTION CHUNK FOR sub_406DE1

loc_406C43:				; CODE XREF: sub_406DE1+4Bj
		cmp	ecx, 2
		jnz	short loc_406C60
		movsd	xmm2, qword ptr	ds:byte_408DB8
		comisd	xmm0, xmm2
		jbe	short loc_406C60
		mov	edx, 10h
		call	sub_406D9D

loc_406C60:				; CODE XREF: sub_406DE1-19Bj
					; sub_406DE1-18Dj
		comisd	xmm0, xmm5
		jnb	loc_406D8B
		movsd	xmm6, ds:qword_408D90
		comisd	xmm0, xmm6
		jb	loc_406D8B
		movdqa	xmm1, xmm0
		psllq	xmm1, 1
		psrlq	xmm1, 1
		cmp	ecx, 1
		jz	short loc_406CC9
		movsd	xmm2, ds:qword_408DB0
		comisd	xmm1, xmm2
		ja	short loc_406CC9
		xorpd	xmm2, xmm2
		comisd	xmm1, xmm2
		jz	short loc_406CC9
		push	eax
		fstcw	[esp+4+var_4]
		mov	ax, [esp+4+var_4]
		test	ax, 10h
		pop	eax
		jnz	short loc_406CC9
		mov	edx, 2
		call	sub_406D9D
		xor	eax, eax
		mov	edx, 80000000h
		retn
; ---------------------------------------------------------------------------

loc_406CC9:				; CODE XREF: sub_406DE1-154j
					; sub_406DE1-146j ...
		xorpd	xmm6, xmm6
		comisd	xmm1, xmm6
		jz	loc_406D7D
		movsd	xmm3, ds:qword_408D70
		movsd	xmm4, ds:qword_408D78
		movd	xmm5, ds:dword_408DD0
		movdqa	xmm6, xmm0
		cmpeqsd	xmm6, xmm1
		movdqa	xmm2, xmm1
		pand	xmm2, xmm3
		por	xmm2, xmm4
		psrlq	xmm1, 34h
		movdqa	xmm4, xmm1
		psubq	xmm4, xmm5
		movdqa	xmm3, xmm2
		psllq	xmm3, xmm4
		movdqa	xmm4, xmm5
		psubq	xmm4, xmm1
		movdqa	xmm7, xmm2
		psrlq	xmm7, xmm4
		pcmpgtd	xmm1, xmm5
		punpckldq xmm1,	xmm1
		pand	xmm3, xmm1
		pandn	xmm1, xmm7
		por	xmm1, xmm3
		pxor	xmm5, xmm5
		psubq	xmm5, xmm1
		pand	xmm1, xmm6
		pandn	xmm6, xmm5
		por	xmm6, xmm1
		movd	eax, xmm4
		cmp	eax, 0
		jle	short loc_406D7D
		psllq	xmm7, xmm4
		pxor	xmm2, xmm7
		movd	eax, xmm2
		psrldq	xmm2, 4
		movd	edx, xmm2
		or	eax, edx
		jz	short loc_406D7D
		mov	edx, 10h
		call	sub_406D9D

loc_406D7D:				; CODE XREF: sub_406DE1-110j
					; sub_406DE1-89j ...
		movd	eax, xmm6
		psrldq	xmm6, 4
		movd	edx, xmm6
		retn
; ---------------------------------------------------------------------------

loc_406D8B:				; CODE XREF: .text:00406C39j
					; sub_406DE1-17Dj ...
		mov	edx, 8
		call	sub_406D9D
		xor	eax, eax
		mov	edx, 80000000h
		retn
; END OF FUNCTION CHUNK	FOR sub_406DE1

; =============== S U B	R O U T	I N E =======================================


sub_406D9D	proc near		; CODE XREF: sub_406DE1-186p
					; sub_406DE1-125p ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= qword	ptr -18h
var_10		= qword	ptr -10h
var_8		= dword	ptr -8

		sub	esp, 20h
		fstcw	word ptr [esp+20h+var_20]
		movzx	eax, word ptr [esp+20h+var_20]
		cmp	edx, 8
		jz	short loc_406DB5
		test	ds:byte_408DBF[edx], al
		jnz	short loc_406DDD

loc_406DB5:				; CODE XREF: sub_406D9D+Ej
		fldcw	ds:word_408DE0
		mov	[esp+20h+var_20], edx
		mov	[esp+20h+var_1C], 0
		movsd	[esp+20h+var_18], xmm0
		movsd	[esp+20h+var_10], xmm0
		mov	[esp+20h+var_8], eax
		call	_except1
		fstp	st

loc_406DDD:				; CODE XREF: sub_406D9D+16j
		add	esp, 20h
		retn
sub_406D9D	endp


; =============== S U B	R O U T	I N E =======================================


sub_406DE1	proc near		; CODE XREF: sub_401E80+1A9p T2()+50Ap

var_4		= word ptr -4

; FUNCTION CHUNK AT 00406C43 SIZE 0000015A BYTES

		mov	ecx, 1
		movsd	xmm5, ds:qword_408D98
		jmp	short loc_406E0C
; ---------------------------------------------------------------------------
		mov	ecx, 4
		movsd	xmm5, ds:qword_408DA0
		jmp	short loc_406E0C
; ---------------------------------------------------------------------------
		mov	ecx, 5
		movsd	xmm5, ds:qword_408D98

loc_406E0C:				; CODE XREF: sub_406DE1+Dj
					; sub_406DE1+1Cj
		movdqa	xmm1, xmm0
		psrldq	xmm1, 4
		movd	eax, xmm1
		and	eax, 7FFFFFFFh
		cmp	eax, 7FF00000h
		jnb	loc_406D8B
		cmp	ecx, 1
		jz	loc_406C43
		movdqa	xmm1, xmm0
		psllq	xmm1, 1
		psrlq	xmm1, 1
		movsd	xmm2, ds:qword_408DA8
		comisd	xmm1, xmm2
		jbe	short loc_406E7D
		cmp	ecx, 4
		jz	short loc_406E69
		mov	edx, 1
		call	sub_406D9D
		mov	edx, 10h
		call	sub_406D9D
		jmp	short loc_406E7D
; ---------------------------------------------------------------------------

loc_406E69:				; CODE XREF: sub_406DE1+70j
		mov	edx, 10h
		call	sub_406D9D
		mov	edx, 1
		call	sub_406D9D

loc_406E7D:				; CODE XREF: sub_406DE1+6Bj
					; sub_406DE1+86j
		movsd	xmm2, ds:qword_408DB0
		comisd	xmm1, xmm2
		jnb	short loc_406EB2
		xorpd	xmm2, xmm2
		comisd	xmm1, xmm2
		jz	loc_406CC9
		mov	edx, 2
		call	sub_406D9D
		mov	edx, 10h
		call	sub_406D9D
		jmp	loc_406CC9
; ---------------------------------------------------------------------------

loc_406EB2:				; CODE XREF: sub_406DE1+A8j
		movdqa	xmm3, xmm0
		cmp	ecx, 4
		jnz	short loc_406ECD
		movsd	xmm2, ds:qword_408D98
		comisd	xmm3, xmm2
		jb	short loc_406ECD
		subpd	xmm3, xmm2

loc_406ECD:				; CODE XREF: sub_406DE1+D8j
					; sub_406DE1+E6j
		movdqa	xmm4, xmm3
		psllq	xmm4, 23h
		psrlq	xmm4, 23h
		movd	eax, xmm4
		or	eax, eax
		jz	short loc_406EED
		mov	edx, 10h
		call	sub_406D9D

loc_406EED:				; CODE XREF: sub_406DE1+100j
		comisd	xmm0, xmm5
		jnb	loc_406D8B
		movsd	xmm2, ds:qword_408D90
		comisd	xmm0, xmm2
		jb	loc_406D8B
		jmp	loc_406CC9
sub_406DE1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406F10	proc near		; CODE XREF: sub_401E80+17Bp
		xorps	xmm0, xmm0
		cvtsi2sd xmm0, ecx
		shr	ecx, 1Fh
		addsd	xmm0, ds:qword_408D60[ecx*8]
		test	edx, edx
		jz	short locret_406F46
		xorps	xmm1, xmm1
		cvtsi2sd xmm1, edx
		shr	edx, 1Fh
		addsd	xmm1, ds:qword_408D60[edx*8]
		mulsd	xmm1, ds:qword_408D68
		addsd	xmm0, xmm1

locret_406F46:				; CODE XREF: sub_406F10+15j
		retn
sub_406F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406F50	proc near		; CODE XREF: sub_401E80+19Ep
		xorps	xmm1, xmm1
		cvtsi2sd xmm1, edx
		xorps	xmm0, xmm0
		cvtsi2sd xmm0, ecx
		shr	ecx, 1Fh
		mulsd	xmm1, ds:qword_408D68
		addsd	xmm0, ds:qword_408D60[ecx*8]
		addsd	xmm0, xmm1
		retn
sub_406F50	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_barrier. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_enter_critsect. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_for_static_end. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_for_static_simple_init_i8.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_fork. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_leave_critsect. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_single_begin. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _vcomp_single_end. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _libm_sse2_exp_precise. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _except1.	PRESS KEYPAD "+" TO EXPAND]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406FD0	proc near		; DATA XREF: .rdata:004092D0o
		lea	ecx, [ebp+10h]
		jmp	ds:??1accelerator_view@Concurrency@@QAE@XZ ; Concurrency::accelerator_view::~accelerator_view(void)
sub_406FD0	endp


; =============== S U B	R O U T	I N E =======================================


SEH_401D70	proc near		; DATA XREF: sub_401D70+5o
		mov	eax, offset dword_4092A8
		jmp	__CxxFrameHandler3
SEH_401D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_406FF0	proc near		; DATA XREF: .rdata:004092FCo
		call	ds:__std_terminate
		retn
sub_406FF0	endp


; =============== S U B	R O U T	I N E =======================================


; t0::_seh
@T0@0_SEH	proc near		; DATA XREF: T0()+5o
		mov	eax, offset dword_4092D4
		jmp	__CxxFrameHandler3
@T0@0_SEH	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


SEH_403810	proc near		; DATA XREF: sub_402360+5o
					; sub_403810+5o ...
		mov	eax, offset dword_409300
		jmp	__CxxFrameHandler3
SEH_403810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407020	proc near		; DATA XREF: .rdata:0040934Co
		lea	ecx, [ebp-30h]
		jmp	loc_403890
sub_407020	endp


; =============== S U B	R O U T	I N E =======================================


SEH_4034B0	proc near		; DATA XREF: sub_4034B0+5o
		mov	eax, offset dword_409324
		jmp	__CxxFrameHandler3
SEH_4034B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407040	proc near		; DATA XREF: .rdata:00409378o
		lea	ecx, [ebp-10h]
		jmp	sub_403810
sub_407040	endp


; =============== S U B	R O U T	I N E =======================================


sub_407048	proc near		; DATA XREF: .rdata:00409380o
		lea	ecx, [ebp-14h]
		jmp	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)
sub_407048	endp


; =============== S U B	R O U T	I N E =======================================


sub_407051	proc near		; DATA XREF: .rdata:00409388o
		call	ds:__std_terminate
		retn
sub_407051	endp


; =============== S U B	R O U T	I N E =======================================


SEH_403750	proc near		; DATA XREF: sub_403690+5o
					; sub_403750+5o
		mov	eax, offset dword_409350
		jmp	__CxxFrameHandler3
SEH_403750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407070	proc near		; DATA XREF: .rdata:004093BCo

; FUNCTION CHUNK AT 00401D40 SIZE 00000026 BYTES

		mov	ecx, [ebp-10h]
		add	ecx, 14h
		jmp	loc_401D40
sub_407070	endp


; =============== S U B	R O U T	I N E =======================================


sub_40707B	proc near		; DATA XREF: .rdata:004093C4o

; FUNCTION CHUNK AT 00403850 SIZE 00000038 BYTES

		lea	ecx, [ebp-34h]
		jmp	loc_403850
sub_40707B	endp


; =============== S U B	R O U T	I N E =======================================


sub_407083	proc near		; DATA XREF: .rdata:004093CCo
		lea	ecx, [ebp+0Ch]
		jmp	sub_403810
sub_407083	endp


; =============== S U B	R O U T	I N E =======================================


sub_40708B	proc near		; DATA XREF: .rdata:004093D4o
		lea	ecx, [ebp+0Ch]
		jmp	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
sub_40708B	endp


; =============== S U B	R O U T	I N E =======================================


sub_407094	proc near		; DATA XREF: .rdata:004093DCo
					; .rdata:004093E4o ...
		lea	ecx, [ebp-18h]
		jmp	sub_403810
sub_407094	endp


; =============== S U B	R O U T	I N E =======================================


sub_40709C	proc near		; DATA XREF: .rdata:004093F4o
		lea	ecx, [ebp+0Ch]
		jmp	sub_403810
sub_40709C	endp


; =============== S U B	R O U T	I N E =======================================


sub_4070A4	proc near		; DATA XREF: .rdata:004093FCo
		lea	ecx, [ebp-2Ch]
		jmp	loc_401D40
sub_4070A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_4070AC	proc near		; DATA XREF: .rdata:00409404o
		call	ds:__std_terminate
		retn
sub_4070AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_4070B3	proc near		; DATA XREF: .rdata:0040940Co
		call	ds:__std_terminate
		retn
sub_4070B3	endp


; =============== S U B	R O U T	I N E =======================================


SEH_403900	proc near		; DATA XREF: sub_403900+5o
		mov	eax, offset dword_409390
		jmp	__CxxFrameHandler3
SEH_403900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4070D0	proc near		; DATA XREF: .rdata:00409438o
		mov	ecx, [ebp-10h]
		add	ecx, 14h
		jmp	loc_401D40
sub_4070D0	endp


; =============== S U B	R O U T	I N E =======================================


SEH_403B30	proc near		; DATA XREF: sub_403B30+5o
		mov	eax, offset dword_409410
		jmp	__CxxFrameHandler3
SEH_403B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4070F0	proc near		; DATA XREF: .rdata:0040946Co
		mov	ecx, [ebp-14h]
		add	ecx, 24h
		jmp	loc_401D40
sub_4070F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_4070FB	proc near		; DATA XREF: .rdata:00409474o
		lea	ecx, [ebp-34h]
		jmp	loc_403850
sub_4070FB	endp


; =============== S U B	R O U T	I N E =======================================


sub_407103	proc near		; DATA XREF: .rdata:0040947Co
		lea	ecx, [ebp+0Ch]
		jmp	sub_403810
sub_407103	endp


; =============== S U B	R O U T	I N E =======================================


sub_40710B	proc near		; DATA XREF: .rdata:00409484o
		lea	ecx, [ebp+0Ch]
		jmp	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
sub_40710B	endp


; =============== S U B	R O U T	I N E =======================================


sub_407114	proc near		; DATA XREF: .rdata:0040948Co
					; .rdata:00409494o ...
		lea	ecx, [ebp-18h]
		jmp	sub_403810
sub_407114	endp


; =============== S U B	R O U T	I N E =======================================


sub_40711C	proc near		; DATA XREF: .rdata:004094A4o
		lea	ecx, [ebp-1Ch]
		jmp	sub_403810
sub_40711C	endp


; =============== S U B	R O U T	I N E =======================================


sub_407124	proc near		; DATA XREF: .rdata:004094ACo
		lea	ecx, [ebp-2Ch]
		jmp	loc_401D40
sub_407124	endp


; =============== S U B	R O U T	I N E =======================================


sub_40712C	proc near		; DATA XREF: .rdata:004094B4o
		call	ds:__std_terminate
		retn
sub_40712C	endp


; =============== S U B	R O U T	I N E =======================================


sub_407133	proc near		; DATA XREF: .rdata:004094BCo
		call	ds:__std_terminate
		retn
sub_407133	endp


; =============== S U B	R O U T	I N E =======================================


SEH_403C00	proc near		; DATA XREF: sub_403C00+5o
		mov	eax, offset dword_409440
		jmp	__CxxFrameHandler3
SEH_403C00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407150	proc near		; DATA XREF: .rdata:004094E8o
		mov	ecx, [ebp-10h]
		add	ecx, 24h
		jmp	loc_401D40
sub_407150	endp


; =============== S U B	R O U T	I N E =======================================


SEH_403EA0	proc near		; DATA XREF: sub_403EA0+5o
		mov	eax, offset dword_4094C0
		jmp	__CxxFrameHandler3
SEH_403EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407170	proc near		; DATA XREF: .rdata:00409514o

; FUNCTION CHUNK AT 00401D00 SIZE 00000009 BYTES

		mov	eax, [ebp-1Ch]
		and	eax, 1
		jz	locret_407188
		and	dword ptr [ebp-1Ch], 0FFFFFFFEh
		lea	ecx, [ebp-24h]
		jmp	loc_401D00
; ---------------------------------------------------------------------------

locret_407188:				; CODE XREF: sub_407170+6j
		retn
sub_407170	endp


; =============== S U B	R O U T	I N E =======================================


SEH_404270	proc near		; DATA XREF: sub_404270+5o
		mov	eax, offset dword_4094EC
		jmp	__CxxFrameHandler3
SEH_404270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4071A0	proc near		; DATA XREF: .rdata:0040957Co
		lea	ecx, [ebp-38h]
		jmp	loc_403850
sub_4071A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071A8	proc near		; DATA XREF: .rdata:00409584o
		mov	ecx, [ebp-20h]
		jmp	sub_403810
sub_4071A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071B0	proc near		; DATA XREF: .rdata:0040958Co
		lea	ecx, [ebp-14h]
		jmp	sub_403810
sub_4071B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071B8	proc near		; DATA XREF: .rdata:00409594o
					; .rdata:0040959Co
		lea	ecx, [ebp-14h]
		jmp	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
sub_4071B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071C1	proc near		; DATA XREF: .rdata:004095A4o
		lea	ecx, [ebp-1Ch]
		jmp	sub_403810
sub_4071C1	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071C9	proc near		; DATA XREF: .rdata:004095ACo
		lea	ecx, [ebp-50h]
		jmp	loc_403850
sub_4071C9	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071D1	proc near		; DATA XREF: .rdata:004095B4o
		lea	ecx, [ebp-18h]
		jmp	sub_403810
sub_4071D1	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071D9	proc near		; DATA XREF: .rdata:004095BCo
		lea	ecx, [ebp-18h]
		jmp	ds:??1accelerator@Concurrency@@QAE@XZ ;	Concurrency::accelerator::~accelerator(void)
sub_4071D9	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071E2	proc near		; DATA XREF: .rdata:004095C4o
		lea	ecx, [ebp-20h]
		jmp	ds:??1_Event@details@Concurrency@@QAE@XZ ; Concurrency::details::_Event::~_Event(void)
sub_4071E2	endp


; =============== S U B	R O U T	I N E =======================================


sub_4071EB	proc near		; DATA XREF: .rdata:004095CCo
		call	ds:__std_terminate
		retn
sub_4071EB	endp


; =============== S U B	R O U T	I N E =======================================


SEH_404610	proc near		; DATA XREF: sub_404320+5o
					; sub_404610+5o
		mov	eax, offset dword_409550
		jmp	__CxxFrameHandler3
SEH_404610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407200	proc near		; DATA XREF: .rdata:004095F8o
		mov	eax, [ebp-1Ch]
		and	eax, 1
		jz	locret_407218
		and	dword ptr [ebp-1Ch], 0FFFFFFFEh
		lea	ecx, [ebp-24h]
		jmp	loc_401D00
; ---------------------------------------------------------------------------

locret_407218:				; CODE XREF: sub_407200+6j
		retn
sub_407200	endp


; =============== S U B	R O U T	I N E =======================================


SEH_404560	proc near		; DATA XREF: sub_404560+5o
		mov	eax, offset dword_4095D0
		jmp	__CxxFrameHandler3
SEH_404560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


SEH_404C70	proc near		; DATA XREF: sub_404C70+5o
		mov	eax, offset dword_409630
		jmp	__CxxFrameHandler3
SEH_404C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


SEH_404EA0	proc near		; DATA XREF: sub_404EA0+5o
		mov	eax, offset dword_4096BC
		jmp	__CxxFrameHandler3
SEH_404EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407250	proc near		; DATA XREF: .rdata:00409770o
		lea	ecx, [ebp-2Ch]
		jmp	sub_4059B0
sub_407250	endp


; =============== S U B	R O U T	I N E =======================================


sub_407258	proc near		; DATA XREF: .rdata:00409778o
		lea	ecx, [ebp-2Ch]
		jmp	sub_405940
sub_407258	endp


; =============== S U B	R O U T	I N E =======================================


sub_407260	proc near		; DATA XREF: .rdata:00409790o
		call	ds:__std_terminate
		retn
sub_407260	endp


; =============== S U B	R O U T	I N E =======================================


sub_407267	proc near		; DATA XREF: .rdata:00409798o
		call	ds:__std_terminate
		retn
sub_407267	endp


; =============== S U B	R O U T	I N E =======================================


SEH_4050A0	proc near		; DATA XREF: sub_4050A0+5o
		mov	eax, offset dword_409748
		jmp	__CxxFrameHandler3
SEH_4050A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407280	proc near		; DATA XREF: .rdata:004097E8o
		lea	ecx, [ebp-2Ch]
		jmp	sub_4059B0
sub_407280	endp


; =============== S U B	R O U T	I N E =======================================


sub_407288	proc near		; DATA XREF: .rdata:004097F0o
		lea	ecx, [ebp-2Ch]
		jmp	sub_405940
sub_407288	endp


; =============== S U B	R O U T	I N E =======================================


sub_407290	proc near		; DATA XREF: .rdata:00409808o
		call	ds:__std_terminate
		retn
sub_407290	endp


; =============== S U B	R O U T	I N E =======================================


sub_407297	proc near		; DATA XREF: .rdata:00409810o
		call	ds:__std_terminate
		retn
sub_407297	endp


; =============== S U B	R O U T	I N E =======================================


SEH_4052D0	proc near		; DATA XREF: sub_4052D0+5o
		mov	eax, offset dword_4097C0
		jmp	__CxxFrameHandler3
SEH_4052D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4072B0	proc near		; DATA XREF: .rdata:00409860o
		call	ds:__std_terminate
		retn
sub_4072B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_4072B7	proc near		; DATA XREF: sub_405940+Bo
					; sub_405B60+Bo
		mov	eax, offset dword_409838
		jmp	__CxxFrameHandler3
sub_4072B7	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4072D0	proc near		; DATA XREF: .rdata:0040988Co
		lea	ecx, [ebp-28h]
		jmp	sub_4059B0
sub_4072D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_4072D8	proc near		; DATA XREF: .rdata:00409894o
		lea	ecx, [ebp-28h]
		jmp	sub_405B60
sub_4072D8	endp


; =============== S U B	R O U T	I N E =======================================


sub_4072E0	proc near		; DATA XREF: .rdata:004098ACo
		call	ds:__std_terminate
		retn
sub_4072E0	endp


; =============== S U B	R O U T	I N E =======================================


SEH_4059F0	proc near		; DATA XREF: sub_4059F0+5o
		mov	eax, offset dword_409864
		jmp	__CxxFrameHandler3
SEH_4059F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_407300	proc near		; DATA XREF: sub_401C50+30o

; FUNCTION CHUNK AT 00403890 SIZE 0000006B BYTES

		mov	ecx, offset Dst
		jmp	loc_403890
sub_407300	endp

; ---------------------------------------------------------------------------
		align 4
		dd 3Dh dup(0)
		dd 300h	dup(?)
_text		ends

; Section 2. (virtual address 00008000)
; Virtual size			: 000030CE (  12494.)
; Section size in file		: 00003200 (  12800.)
; Offset to raw	data for section: 00006800
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; DWORD_PTR __stdcall SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask)
		extrn SetThreadAffinityMask:dword ; CODE XREF: sub_401E80+50p
					; DATA XREF: sub_401E80+50r ...
; BOOL __stdcall SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass)
		extrn SetPriorityClass:dword ; CODE XREF: sub_401E80+41p
					; DATA XREF: sub_401E80+41r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_401E80+3Ap
					; sub_4066EC+19p
					; DATA XREF: ...
; HANDLE __stdcall GetCurrentThread()
		extrn GetCurrentThread:dword ; CODE XREF: sub_401E80+49p
					; DATA XREF: sub_401E80+49r
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: sub_40633E+D5p
					; DATA XREF: sub_40633E+D5r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: sub_40633E+FEp
					; sub_4066EC+Ep
					; DATA XREF: ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_40633E+F4p
					; sub_40649D+5p ...
; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
		extrn GetModuleHandleW:dword ; CODE XREF: sub_406459+2p
					; DATA XREF: sub_406459+2r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_40656E+59p
					; DATA XREF: sub_40656E+59r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_40656E+4Cp
					; DATA XREF: sub_40656E+4Cr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_40656E+43p
					; DATA XREF: sub_40656E+43r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_40656E+34p
					; DATA XREF: sub_40656E+34r
; void __stdcall InitializeSListHead(PSLIST_HEADER ListHead)
		extrn InitializeSListHead:dword	; CODE XREF: sub_406613+5p
					; DATA XREF: sub_406613+5r
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_4066EC+20p
					; DATA XREF: sub_4066EC+20r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr

;
; Imports from MSVCP140.dll
;
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::snextc(void)
		extrn ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:dword
					; CODE XREF: sub_4059F0+F4p
					; DATA XREF: sub_4059F0+F4r ...
; public: void __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
		extrn ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:dword
					; CODE XREF: sub_4050A0+1F2p
					; sub_4052D0+1D8p ...
; public: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:dword
					; CODE XREF: sub_4050A0+1B3p
					; sub_4050A0+1D6p ...
; public: char __thiscall std::basic_ios<char, struct std::char_traits<char>>::widen(char)const
		extrn ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:dword
					; CODE XREF: sub_4034B0+A0p
					; .text:004054EEp
					; DATA XREF: ...
; public: __int64 __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:dword
					; CODE XREF: sub_4050A0+141p
					; sub_4052D0+12Cp
					; DATA XREF: ...
; public: class	std::basic_ostream<char, struct	std::char_traits<char>>	& __thiscall std::basic_ostream<char, struct std::char_traits<char>>::put(char)
		extrn ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:dword
					; CODE XREF: .text:004054FAp
					; DATA XREF: .text:004054FAr
; public: class	std::basic_ostream<char, struct	std::char_traits<char>>	& __thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:dword
					; CODE XREF: sub_4050A0+B1p
					; sub_4052D0+91p ...
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sbumpc(void)
		extrn ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:dword
					; CODE XREF: sub_4059F0+C5p
					; DATA XREF: sub_4059F0+C5r
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sgetc(void)
		extrn ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:dword
					; CODE XREF: sub_4059F0+94p
					; DATA XREF: sub_4059F0+94r
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:dword
					; CODE XREF: sub_4050A0+10Dp
					; sub_4050A0+16Dp ...
; public: class	std::basic_ostream<char, struct	std::char_traits<char>>	& __thiscall std::basic_ostream<char, struct std::char_traits<char>>::operator<<(class std::basic_ostream<char,	struct std::char_traits<char>> & (__cdecl *)(class std::basic_ostream<char, struct std::char_traits<char>> &))
		extrn ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:dword
					; CODE XREF: sub_4034B0+5Ep
					; sub_4034B0+7Bp ...
; void __cdecl __ExceptionPtrDestroy(void *)
		extrn ?__ExceptionPtrDestroy@@YAXPAX@Z:dword ; CODE XREF: sub_407170-546Fp
					; sub_404270+59p ...
; bool __cdecl __ExceptionPtrToBool(void const *)
		extrn ?__ExceptionPtrToBool@@YA_NPBX@Z:dword ; CODE XREF: sub_404270+43p
					; sub_404560+43p
					; DATA XREF: ...
; void __cdecl std::_Xlength_error(char	const *)
		extrn ?_Xlength_error@std@@YAXPBD@Z:dword ; CODE XREF: sub_403F90+66p
					; sub_404110+65p ...
; void __cdecl std::_Xout_of_range(char	const *)
		extrn ?_Xout_of_range@std@@YAXPBD@Z:dword ; CODE XREF: sub_404200+14p
					; sub_404200+32p ...
; void __cdecl std::_Xbad_alloc(void)
		extrn ?_Xbad_alloc@std@@YAXXZ:dword ; CODE XREF: sub_404C20+1Dp
					; sub_404C70+7Ap ...
; class	std::basic_istream<char, struct	std::char_traits<char>>	std::cin
		extrn ?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:dword
					; DATA XREF: sub_4034B0+91r
; bool __cdecl std::uncaught_exception(void)
		extrn ?uncaught_exception@std@@YA_NXZ:dword ; CODE XREF: sub_4050A0+1E3p
					; sub_4052D0+1C9p ...
; class	std::basic_ostream<char, struct	std::char_traits<char>>	std::cout
		extrn ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:dword
					; DATA XREF: sub_4034B0+37r
					; sub_4034B0+64r ...
; public: bool __thiscall std::basic_istream<char, struct std::char_traits<char>>::_Ipfx(bool)
		extrn ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:dword
					; CODE XREF: sub_4059F0+53p
					; DATA XREF: sub_4059F0+53r
; void __cdecl __ExceptionPtrCreate(void *)
		extrn ?__ExceptionPtrCreate@@YAXPAX@Z:dword ; CODE XREF: sub_401D10+4p
					; DATA XREF: sub_401D10+4r
; void __cdecl __ExceptionPtrCurrentException(void *)
		extrn ?__ExceptionPtrCurrentException@@YAXPAX@Z:dword
					; CODE XREF: sub_401D10+Bp
					; DATA XREF: sub_401D10+Br

;
; Imports from VCAMP140.DLL
;
; private: class Concurrency::details::_Event __thiscall Concurrency::details::_Ubiquitous_buffer::_Get_access_async(struct Concurrency::details::_Buffer_descriptor *,	class Concurrency::accelerator_view, enum  _Access_mode, class Concurrency::details::_Reference_counted_obj_ptr<class Concurrency::details::_Buffer> &,	unsigned __int64 *)
		extrn ?_Get_access_async@_Ubiquitous_buffer@details@Concurrency@@AAE?AV_Event@23@PAU_Buffer_descriptor@23@Vaccelerator_view@3@W4_Access_mode@@AAV?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@PA_K@Z:dword
					; CODE XREF: sub_401D70+4Ep
					; DATA XREF: sub_401D70+4Er ...
; public: void __thiscall Concurrency::details::_Ubiquitous_buffer::_Register_view_copy(struct Concurrency::details::_Buffer_descriptor	*, struct Concurrency::details::_Buffer_descriptor *)
		extrn ?_Register_view_copy@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@0@Z:dword
					; CODE XREF: sub_403B30+77p
					; sub_403EA0+8Fp
					; DATA XREF: ...
; public: void __thiscall Concurrency::details::_Ubiquitous_buffer::_Register_view(struct Concurrency::details::_Buffer_descriptor *, class Concurrency::accelerator_view, class Concurrency::details::_Reference_counted_obj_ptr<class	Concurrency::details::_View_shape>, struct Concurrency::details::_Buffer_descriptor * const)
		extrn ?_Register_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@Vaccelerator_view@3@V?$_Reference_counted_obj_ptr@V_View_shape@details@Concurrency@@@23@QAU423@@Z:dword
					; CODE XREF: sub_404320+B9p
					; sub_404610+B9p
					; DATA XREF: ...
; public: static class Concurrency::details::_Ubiquitous_buffer	* __cdecl Concurrency::details::_Ubiquitous_buffer::_Create_ubiquitous_buffer(class Concurrency::details::_Reference_counted_obj_ptr<class Concurrency::details::_Buffer>)
		extrn ?_Create_ubiquitous_buffer@_Ubiquitous_buffer@details@Concurrency@@SAPAV123@V?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@@Z:dword
					; CODE XREF: sub_403900:loc_403A29p
					; sub_403C00:loc_403D8Ep
					; DATA XREF: ...
; __declspec(dllimport)	public:	virtual	__thiscall Concurrency::runtime_exception::~runtime_exception(void)
		extrn __imp_??1runtime_exception@Concurrency@@UAE@XZ:dword
					; DATA XREF: Concurrency::runtime_exception::~runtime_exception(void)r
; public: __thiscall Concurrency::runtime_exception::runtime_exception(char const *, long)
		extrn ??0runtime_exception@Concurrency@@QAE@PBDJ@Z:dword
					; CODE XREF: sub_403C00+A5p
					; sub_404500+49p ...
; __declspec(dllimport)	public:	__thiscall Concurrency::runtime_exception::runtime_exception(class runtime_exception::runtime_exception	const &)
		extrn __imp_??0runtime_exception@Concurrency@@QAE@ABV01@@Z:dword
					; DATA XREF: Concurrency::runtime_exception::runtime_exception(runtime_exception::runtime_exception const &)r
; public: __thiscall Concurrency::accelerator_view::accelerator_view(class accelerator_view::accelerator_view const &)
		extrn ??0accelerator_view@Concurrency@@QAE@ABV01@@Z:dword
					; CODE XREF: sub_401D70+43p
					; DATA XREF: sub_401D70+43r
; public: __thiscall Concurrency::accelerator_view::~accelerator_view(void)
		extrn ??1accelerator_view@Concurrency@@QAE@XZ:dword
					; CODE XREF: sub_401D70+57p T0()+E8p ...
; void *Concurrency__accelerator__cpu_accelerator
		extrn ?cpu_accelerator@accelerator@Concurrency@@2QB_WB:dword
					; DATA XREF: sub_403900+57r
					; sub_403C00:loc_403CB9r ...
; private: void	__thiscall Concurrency::accelerator::_Init(wchar_t const *)
		extrn ?_Init@accelerator@Concurrency@@AAEXPB_W@Z:dword
					; CODE XREF: sub_403900+B7p
					; sub_403C00+120p ...
; public: class	Concurrency::accelerator_view __thiscall Concurrency::accelerator::get_default_view(void)const
		extrn ?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view@2@XZ:dword
					; CODE XREF: sub_403900+C8p
					; sub_403C00+131p ...
; public: static class Concurrency::accelerator_view __cdecl Concurrency::accelerator::get_auto_selection_view(void)
		extrn ?get_auto_selection_view@accelerator@Concurrency@@SA?AVaccelerator_view@2@XZ:dword
					; CODE XREF: T0()+C9p T0()+216p
					; DATA XREF: ...
; public: __thiscall Concurrency::accelerator::~accelerator(void)
		extrn ??1accelerator@Concurrency@@QAE@XZ:dword ; CODE XREF: sub_403900+ECp
					; sub_403C00+151p ...
		extrn __dpc_release_call_handle:dword ;	CODE XREF: sub_4055B0+191p
					; sub_405760+1C7p
					; DATA XREF: ...
		extrn __dpc_create_call_handle:dword ; CODE XREF: sub_4055B0+Bp
					; sub_405760+Bp
					; DATA XREF: ...
		extrn __dpc_dispatch_kernel:dword ; CODE XREF: sub_4055B0+18Ap
					; sub_405760+1C0p
					; DATA XREF: ...
		extrn __dpc_set_kernel_shader_info:dword ; CODE	XREF: sub_4055B0+65p
					; sub_405760+84p
					; DATA XREF: ...
		extrn __dpc_set_device_resource_info:dword ; CODE XREF:	sub_4055B0+59p
					; sub_405760+78p
					; DATA XREF: ...
		extrn __dpc_set_kernel_dispatch_info:dword ; CODE XREF:	sub_4055B0+B7p
					; sub_405760+D9p
					; DATA XREF: ...
; public: class	Concurrency::accelerator_view __thiscall Concurrency::details::_Ubiquitous_buffer::_Get_master_accelerator_view(void)const
		extrn ?_Get_master_accelerator_view@_Ubiquitous_buffer@details@Concurrency@@QBE?AVaccelerator_view@3@XZ:dword
					; CODE XREF: sub_403690+52p
					; sub_403750+52p
					; DATA XREF: ...
; class	Concurrency::details::_Amp_runtime_trace * __cdecl Concurrency::details::_Get_amp_trace(void)
		extrn ?_Get_amp_trace@details@Concurrency@@YAPAV_Amp_runtime_trace@12@XZ:dword
					; CODE XREF: sub_403690+2Ap
					; sub_403690+83p ...
; public: __thiscall Concurrency::details::_Event::~_Event(void)
		extrn ??1_Event@details@Concurrency@@QAE@XZ:dword
					; CODE XREF: sub_403690+7Cp
					; sub_403750+7Cp ...
; public: void __thiscall Concurrency::details::_Event::_Get(void)
		extrn ?_Get@_Event@details@Concurrency@@QAEXXZ:dword
					; CODE XREF: sub_403690+6Fp
					; sub_403750+6Fp ...
; public: void __thiscall Concurrency::details::_Amp_runtime_trace::_Write_end_event(unsigned long)
		extrn ?_Write_end_event@_Amp_runtime_trace@details@Concurrency@@QAEXK@Z:dword
					; CODE XREF: sub_403690+87p
					; sub_403750+87p
					; DATA XREF: ...
; public: unsigned long	__thiscall Concurrency::details::_Amp_runtime_trace::_Start_array_view_synchronize_event_helper(struct Concurrency::details::_Buffer_descriptor	const &)
		extrn ?_Start_array_view_synchronize_event_helper@_Amp_runtime_trace@details@Concurrency@@QAEKABU_Buffer_descriptor@23@@Z:dword
					; CODE XREF: sub_403690+2Ep
					; sub_403750+2Ep
					; DATA XREF: ...
; public: void __thiscall Concurrency::details::_Reference_counter::_Release(void)
		extrn ?_Release@_Reference_counter@details@Concurrency@@QAEXXZ:dword
					; CODE XREF: sub_407070-531Ap
					; T0()+11Ep ...
; public: static class Concurrency::details::_View_shape * __cdecl Concurrency::details::_View_shape::_Create_view_shape(unsigned int, unsigned	int, unsigned int const	*, unsigned int	const *, unsigned int const *, bool const *)
		extrn ?_Create_view_shape@_View_shape@details@Concurrency@@SAPAV123@IIPBI00PB_N@Z:dword
					; CODE XREF: sub_404AA0+74p
					; sub_404B50+99p
					; DATA XREF: ...
; public: static class Concurrency::details::_Buffer * __cdecl Concurrency::details::_Buffer::_Create_buffer(void *, class Concurrency::accelerator_view, unsigned int,	unsigned int)
		extrn ?_Create_buffer@_Buffer@details@Concurrency@@SAPAV123@PAXVaccelerator_view@3@II@Z:dword
					; CODE XREF: sub_403900+D3p
					; sub_403C00+138p
					; DATA XREF: ...
		extrn __dpc_set_const_buffer_info:dword	; CODE XREF: sub_4055B0+183p
					; sub_405760+1B9p
					; DATA XREF: ...
; public: void __thiscall Concurrency::details::_Ubiquitous_buffer::_Unregister_view(struct Concurrency::details::_Buffer_descriptor *)
		extrn ?_Unregister_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_Buffer_descriptor@23@@Z:dword
					; CODE XREF: sub_404270+7Cp
					; sub_404560+7Cp
					; DATA XREF: ...
; public: void __thiscall Concurrency::details::_Buffer_descriptor::_Get_CPU_access(enum  _Access_mode)const
		extrn ?_Get_CPU_access@_Buffer_descriptor@details@Concurrency@@QBEXW4_Access_mode@@@Z:dword
					; CODE XREF: T0()+171p	T0()+18Fp ...

;
; Imports from VCOMP140.DLL
;
		extrn __imp__vcomp_enter_critsect:dword	; DATA XREF: _vcomp_enter_critsectr
					; .rdata:00409AB0o
		extrn __imp__vcomp_for_static_end:dword	; DATA XREF: _vcomp_for_static_endr
		extrn __imp__vcomp_for_static_simple_init_i8:dword
					; DATA XREF: _vcomp_for_static_simple_init_i8r
		extrn __imp__vcomp_fork:dword ;	DATA XREF: _vcomp_forkr
		extrn __imp__vcomp_leave_critsect:dword	; DATA XREF: _vcomp_leave_critsectr
		extrn __imp__vcomp_single_begin:dword ;	DATA XREF: _vcomp_single_beginr
		extrn __imp__vcomp_single_end:dword ; DATA XREF: _vcomp_single_endr
		extrn omp_get_thread_num:dword ; CODE XREF: sub_4068D0:loc_4069C0p
					; DATA XREF: sub_4068D0:loc_4069C0r
		extrn omp_set_num_threads:dword	; CODE XREF: sub_401E80+58p
					; DATA XREF: sub_401E80+58r
		extrn __imp__vcomp_barrier:dword ; DATA	XREF: _vcomp_barrierr

;
; Imports from VCRUNTIME140.dll
;
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_404960+5Dp
					; sub_404E10+53p
					; DATA XREF: ...
		extrn __std_exception_copy:dword ; CODE	XREF: sub_401C90+1Cp
					; DATA XREF: sub_401C90+1Cr
		extrn __std_terminate:dword ; CODE XREF: sub_406FF0p
					; sub_407051p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp__CxxThrowException:dword ; DATA XREF: _CxxThrowExceptionr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
		extrn __imp___CxxFrameHandler3:dword ; DATA XREF: __CxxFrameHandler3r
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___std_exception_destroy:dword ; CODE XREF: sub_401CD0+Dp
					; DATA XREF: sub_401CD0+Dr ...

;
; Imports from api-ms-win-crt-heap-l1-1-0.dll
;
		extrn __imp__set_new_mode:dword	; DATA XREF: _set_new_moder
					; .rdata:00409B14o
		extrn __imp__callnewh:dword ; DATA XREF: _callnewhr
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer

;
; Imports from api-ms-win-crt-locale-l1-1-0.dll
;
		extrn __imp__configthreadlocale:dword ;	DATA XREF: _configthreadlocaler
					; .rdata:00409B3Co

;
; Imports from api-ms-win-crt-math-l1-1-0.dll
;
		extrn __imp__libm_sse2_exp_precise:dword
					; DATA XREF: _libm_sse2_exp_preciser
					; .rdata:00409AECo
		extrn __imp___setusermatherr:dword ; DATA XREF:	__setusermatherrr
		extrn round:dword	; CODE XREF: T2()+275p
					; DATA XREF: T2()+275r
		extrn __imp__except1:dword ; DATA XREF:	_except1r

;
; Imports from api-ms-win-crt-runtime-l1-1-0.dll
;
		extrn __imp_terminate:dword ; DATA XREF: terminater
					; .rdata:00409B00o
		extrn __imp__register_thread_local_exe_atexit_callback:dword
					; DATA XREF: _register_thread_local_exe_atexit_callbackr
		extrn __imp__crt_atexit:dword ;	DATA XREF: _crt_atexitr
		extrn __imp__c_exit:dword ; DATA XREF: _c_exitr
		extrn __imp__register_onexit_function:dword
					; DATA XREF: _register_onexit_functionr
		extrn __imp__initialize_onexit_table:dword
					; DATA XREF: _initialize_onexit_tabler
		extrn __imp__initialize_narrow_environment:dword
					; DATA XREF: _initialize_narrow_environmentr
		extrn __imp__configure_narrow_argv:dword
					; DATA XREF: _configure_narrow_argvr
		extrn __imp___p___argv:dword ; DATA XREF: __p___argvr
		extrn __imp___p___argc:dword ; DATA XREF: __p___argcr
		extrn _invalid_parameter_noinfo_noreturn:dword ; CODE XREF: sub_4034B0+193p
					; sub_4034B0+1A0p ...
; void __cdecl _exit(int Code)
		extrn __imp__exit:dword	; DATA XREF: _exitr
; void __cdecl exit(int	Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__get_initial_narrow_environment:dword
					; DATA XREF: _get_initial_narrow_environmentr
		extrn __imp__set_app_type:dword	; DATA XREF: _set_app_typer
		extrn __imp__seh_filter_exe:dword ; DATA XREF: _seh_filter_exer
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; errno_t __cdecl _controlfp_s(unsigned	int *CurrentState, unsigned int	NewValue, unsigned int Mask)
		extrn __imp__controlfp_s:dword ; DATA XREF: _controlfp_sr

;
; Imports from api-ms-win-crt-stdio-l1-1-0.dll
;
; errno_t __cdecl _set_fmode(int Mode)
		extrn __imp__set_fmode:dword ; DATA XREF: _set_fmoder
					; .rdata:00409B28o
		extrn __imp___p__commode:dword ; DATA XREF: __p__commoder

;
; Imports from api-ms-win-crt-string-l1-1-0.dll
;
; int __cdecl isalnum(int C)
		extrn isalnum:dword	; CODE XREF: sub_4034B0+E6p
					; DATA XREF: sub_4034B0+C0r ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 40820Ch
off_40820C	dd offset nullsub_1	; DATA XREF: j_nullsub_1r
					; .rdata:00408E70o
dword_408210	dd 0			; DATA XREF: start-FEo
		dd offset sub_405F2B
		dd offset sub_401C50
dword_40821C	dd 0			; DATA XREF: start:loc_405FA9o
dword_408220	dd 0			; DATA XREF: start-124o
		dd offset sub_405E7F
		dd offset loc_405F23
dword_40822C	dd 5 dup(0)		; DATA XREF: start-129o
		dd offset dword_408E84
off_408244	dd offset sub_405E5C	; DATA XREF: sub_405E5C+Ao
					; .data:off_411CF8o ...
		dd offset dword_408F68
off_40824C	dd offset sub_401CD0	; DATA XREF: sub_401C90+Ao
					; sub_401CD0+6o ...
		dd offset sub_401CC0
		dd offset dword_408ECC
off_408258	dd offset sub_40612D	; DATA XREF: sub_4060B6+Eo
					; sub_4060D1+11o
		dd offset sub_401CC0
aBadAllocation	db 'bad allocation',0   ; DATA XREF: sub_4060D1+Ao
		align 10h
		dd offset dword_408F18
off_408274	dd offset sub_40612D	; DATA XREF: sub_4060E9+Eo
					; sub_406104+11o
		dd offset sub_401CC0
aBadArrayNewLen	db 'bad array new length',0 ; DATA XREF: sub_406104+Ao
		align 4
off_408294	dd offset dword_411E08	; DATA XREF: .text:00406801o
		dd offset dword_411E58
aUnknownExcepti	db 'Unknown exception',0 ; DATA XREF: sub_401CC0+3o
		align 10h
a_		db '                            :/:.                           ',0Dh,0Ah
					; DATA XREF: sub_404110+21o
					; sub_404110+32o ...
		db '                 --        .MMMh                           ',0Dh,0Ah
		db '                oMMmo.     -MMMh       `                   ',0Dh,0Ah
		db '                /hMMMMd+`  -MMMh     `yMm `:.              ',0Dh,0Ah
		db '                  .omMMMMh/-MMMh  `/yy::. +Mm              ',0Dh,0Ah
		db '           .ooo.     -sNMMMMMMMd+hy:`      No              ',0Dh,0Ah
		db '           sMMMo       `/hMMMMMm/          mo              ',0Dh,0Ah
		db '  .`       sMMMo          `oMMMh           mo          .yd:',0Dh,0Ah
		db '`yMMh+.    sMMMo            MMMh           mo       `/yy+/`',0Dh,0Ah
		db '`yNMMMMms: yMMMo            MMMh           Ns    .+hy:`    ',0Dh,0Ah
		db '   -odMMMMNMMMM+            MMMh         `yMm :shs-        ',0Dh,0Ah
		db '      `+hMMMMMMh-           MMMh      .oys/+hMh.           ',0Dh,0Ah
		db '     `/ymMMMMMMMMNy/.      -MMMd   :syo/+ys+oNNms:`        ',0Dh,0Ah
		db '  :odMMMMMms/:smMMMMMdo:/ymMMMMMmhNo/syo+oyo:   .+yyo:     ',0Dh,0Ah
		db ' .NMMMNh/.      ./hNMMMMMMNh/-+hNMMMMssy+.          -+yhs+`',0Dh,0Ah
		db '  -yo-             `:mMMd.      `-NMMs`                -hh.',0Dh,0Ah
		db '                     hMMo         mMM/                     ',0Dh,0Ah
		db '  `-                `mMMo         NMM/                     ',0Dh,0Ah
		db ' .mMNh+.         `/yNMMMNy:`   `:yMMMd/`              -:`  ',0Dh,0Ah
		db ' /dMMMMMmy/`  -+dMMMMMmdMMMNhsdNMMMMMMMMh+.        `/yNN/  ',0Dh,0Ah
		db '   `:smMMMMMmNMMMMMh+.  `:yMMMMmo- .+hMMMMMms:  :ohs:`     ',0Dh,0Ah
		db '       .dMMMMMMNs:`        dMMM:      `:sNMMMMMMm-         ',0Dh,0Ah
		db '    -+hMMMMMMMM`           dMMM:          .mMMMMMMdo-      ',0Dh,0Ah
		db '`:smMMMMNy/MMMM            dMMM:           hMMMmmMMMMmy:`  ',0Dh,0Ah
		db '/MMMMdo-  `MMMM            dMMM:           hMMM: -odMMMMNs ',0Dh,0Ah
		db ' :y/`     `MMMM           :mMMMs`          hMMM-    `/yNd. ',0Dh,0Ah
		db '          `MMMM       .+hMMMMMMMMdo.       hMMM-           ',0Dh,0Ah
		db '          `mmmm`  `:smMMMMNMMMMMMMMMms-    hMMM.           ',0Dh,0Ah
		db '                 +MMMMMdo: hMMM`:smMMMMN+  .::-            ',0Dh,0Ah
		db '                  smh/.    dMMM`   -odMh`                  ',0Dh,0Ah
		db '                           dMMM`      `                    ',0Dh,0Ah
		db '                           dMMM`                           ',0Dh,0Ah
		db '                           hNNN`                           ',0Dh,0Ah,0
		align 10h
aWelcomeToPediy	db 'Welcome to PEDIY-JD CTF 2018!',0 ; DATA XREF: sub_4034B0+6Ao
		align 10h
aPleaseInputYou	db 'Please input your flag: ',0 ; DATA XREF: sub_4034B0+87o
		align 4
aCongratulation	db 'Congratulations!',0 ; DATA XREF: sub_4034B0+14Eo
		align 10h
aWrongFlagTryHa	db 'Wrong flag, try harder.',0 ; DATA XREF: sub_4034B0:loc_40360Bo
aInvalidPointer	db 'Invalid pointer argument (NULL) to array_view constructor',0
					; DATA XREF: sub_403C00+9Do
		align 4
aStringTooLong	db 'string too long',0  ; DATA XREF: sub_403F90+61o
					; sub_404110+60o ...
		align 8
aTheArray_viewB	db 'The array_view base extent, view offset and/or view extent is inc'
					; DATA XREF: sub_404AA0+8Ao
					; sub_404B50+AFo
		db 'ompatible with the underlying buffer',0
		align 10h
aInvalidStringP	db 'invalid string position',0 ; DATA XREF: sub_404200+Fo
					; sub_404200+2Do ...
aInvalidExtentS	db 'Invalid - extent size exceeds UINT_MAX',0 ; DATA XREF: sub_405510+56o
		align 10h
aInvalidValuesF	db 'Invalid - values for each dimension must be > 0',0
					; DATA XREF: sub_404500+40o
					; sub_405510+79o
byte_408C20	db 42h			; DATA XREF: sub_401DF0+24r
aBbbbbbbbb@bbbb	db 'BBBBBBBBB@BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB>BBB?456789:;<=BBBABBB',0
		dw 201h
		dd 6050403h, 0A090807h,	0E0D0C0Bh, 1211100Fh, 16151413h
		dd 42191817h, 42424242h, 1C1B1A42h, 201F1E1Dh, 24232221h
		dd 28272625h, 2C2B2A29h, 302F2E2Dh, 42333231h, 21h dup(42424242h)
qword_408D20	dq 3F70000000000000h	; DATA XREF: sub_401E80+180r
qword_408D28	dq 3FF0000000000000h	; DATA XREF: T2()+159r	T2()+161r ...
qword_408D30	dq 0BFF0000000000000h	; DATA XREF: T2()+97r T2()+1B6r ...
		align 10h
qword_408D40	dq 0			; DATA XREF: T2()+5Ar
		dd 0
		dd 41F00000h
xmmword_408D50	xmmword	80000000000000008000000000000000h ; DATA XREF: T2()+14Dr
					; T2()+2E0r ...
qword_408D60	dq 0			; DATA XREF: sub_406F10+Ar
					; sub_406F10+21r ...
qword_408D68	dq 41F0000000000000h	; DATA XREF: sub_406F10+2Ar
					; sub_406F50+11r
qword_408D70	dq 0FFFFFFFFFFFFFh	; DATA XREF: sub_406DE1-10Ar
qword_408D78	dq 10000000000000h	; DATA XREF: sub_406DE1-102r
		dd 0
		dd 80000000h, 0
		dd 100000h
qword_408D90	dq 0C3E0000000000000h	; DATA XREF: sub_406DE1-177r
					; sub_406DE1+116r
qword_408D98	dq 43E0000000000000h	; DATA XREF: .text:00406C05r
					; .text:00406C23r ...
qword_408DA0	dq 43F0000000000000h	; DATA XREF: .text:00406C14r
					; sub_406DE1+14r
qword_408DA8	dq 47EFFFFFF0000000h	; DATA XREF: sub_406DE1+5Fr
qword_408DB0	dq 380FFFFFF0000000h	; DATA XREF: sub_406DE1-152r
					; sub_406DE1:loc_406E7Dr
byte_408DB8	db 6 dup(0), 60h	; DATA XREF: sub_406DE1-199r
byte_408DBF	db 45h			; DATA XREF: sub_406D9D+10r
		dd 1008h, 1000000h, 0
		dd 20F00000h
dword_408DD0	dd 433h			; DATA XREF: sub_406DE1-FAr
		dd 43Fh, 800h, 17FFh
word_408DE0	dw 133Fh		; DATA XREF: sub_406D9D:loc_406DB5r
		align 4
		dd 4 dup(0)
a9		db '╫',8,'9[',0
		align 4
		dw 0Dh,	0
		dd 2E4h, 8FB0h,	77B0h, 0
a9_0		db '╫',8,'9[',0
		align 4
		dd 0Eh,	3 dup(0)
		dd 5Ch,	0Eh dup(0)
		dd offset dword_40C014
		align 10h
		dd offset off_40820C
		dd 3 dup(0)
		dd 100h
dword_408E84	dd 3 dup(0)		; DATA XREF: .rdata:00408240o
		dd offset off_411CF8
		dd offset dword_408E98
dword_408E98	dd 2 dup(0)		; DATA XREF: .rdata:00408E94o
					; .rdata:00408EC8o
		dd 1
		dd offset off_408EA8
off_408EA8	dd offset off_408EB0	; DATA XREF: .rdata:00408EA4o
		align 10h
off_408EB0	dd offset off_411CF8	; DATA XREF: .rdata:off_408EA8o
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_408E98
dword_408ECC	dd 3 dup(0)		; DATA XREF: .rdata:00408254o
		dd offset off_411D10
		dd offset dword_408EE0
dword_408EE0	dd 2 dup(0)		; DATA XREF: .rdata:00408EDCo
					; .rdata:00408F14o
		dd 2
		dd offset off_408EF0
off_408EF0	dd offset off_408EFC	; DATA XREF: .rdata:00408EECo
		dd offset off_408F7C
		dd 0
off_408EFC	dd offset off_411D10	; DATA XREF: .rdata:off_408EF0o
					; .rdata:00408F40o
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_408EE0
dword_408F18	dd 3 dup(0)		; DATA XREF: .rdata:00408270o
		dd offset off_411D2C
		dd offset dword_408F2C
dword_408F2C	dd 2 dup(0)		; DATA XREF: .rdata:00408F28o
					; .rdata:00408F64o
		dd 3
		dd offset off_408F3C
off_408F3C	dd offset off_408F4C	; DATA XREF: .rdata:00408F38o
		dd offset off_408EFC
		dd offset off_408F7C
		dd 0
off_408F4C	dd offset off_411D2C	; DATA XREF: .rdata:off_408F3Co
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_408F2C
dword_408F68	dd 3 dup(0)		; DATA XREF: .rdata:00408248o
		dd offset off_411D80
		dd offset dword_408FA0
off_408F7C	dd offset off_411D80	; DATA XREF: .rdata:00408EF4o
					; .rdata:00408F44o ...
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_408FA0
off_408F98	dd offset off_408F7C	; DATA XREF: .rdata:00408FACo
		align 10h
dword_408FA0	dd 2 dup(0)		; DATA XREF: .rdata:00408F78o
					; .rdata:00408F94o
		dd 1
		dd offset off_408F98
aGctl		db 'GCTL',0
		db 10h,	2 dup(0)
		dd 0C50h, 7865742Eh, 5F5F2474h,	637064h, 1C50h,	40h, 7865742Eh
		dd 69642474h, 0
		dd 1C90h, 5340h, 7865742Eh, 6E6D2474h, 0
		dd 6FD0h, 330h,	7865742Eh, 782474h, 7300h, 0Ah,	7865742Eh
		dd 64792474h, 0
		dd 8000h, 20Ch,	6164692Eh, 35246174h, 0
		dd 820Ch, 4, 6330302Eh,	6766h, 8210h, 4, 5452432Eh, 41435824h
		dd 0
		dd 8214h, 4, 5452432Eh,	41435824h, 41h,	8218h, 4, 5452432Eh
		dd 55435824h, 0
		dd 821Ch, 4, 5452432Eh,	5A435824h, 0
		dd 8220h, 4, 5452432Eh,	41495824h, 0
		dd 8224h, 4, 5452432Eh,	41495824h, 41h,	8228h, 4, 5452432Eh
		dd 41495824h, 43h, 822Ch, 4, 5452432Eh,	5A495824h, 0
		dd 8230h, 4, 5452432Eh,	41505824h, 0
		dd 8234h, 4, 5452432Eh,	5A505824h, 0
		dd 8238h, 4, 5452432Eh,	41545824h, 0
		dd 823Ch, 4, 5452432Eh,	5A545824h, 0
		dd 8240h, 0C44h, 6164722Eh, 6174h, 8E84h, 12Ch,	6164722Eh
		dd 72246174h, 0
		dd 8FB0h, 2E4h,	6164722Eh, 7A246174h, 62647A7Ah, 67h, 9294h
		dd 4, 6374722Eh, 41414924h, 0
		dd 9298h, 4, 6374722Eh,	5A5A4924h, 0
		dd 929Ch, 4, 6374722Eh,	41415424h, 0
		dd 92A0h, 8, 6374722Eh,	5A5A5424h, 0
		dd 92A8h, 738h,	6164782Eh, 78246174h, 0
		dd 99E0h, 84h, 6164652Eh, 6174h, 9A64h,	0DCh, 6164692Eh
		dd 32246174h, 0
		dd 9B40h, 14h, 6164692Eh, 33246174h, 0
		dd 9B54h, 20Ch,	6164692Eh, 34246174h, 0
		dd 9D60h, 136Eh, 6164692Eh, 36246174h, 0
		dd 0C000h, 5CF8h, 7461642Eh, 61h, 11CF8h, 0C8h,	7461642Eh
		dd 722461h, 11DC0h, 205E4h, 7373622Eh, 0
		dd 33000h, 4Ch,	6966672Eh, 79247364h, 0
		dd 34000h, 60h,	7273722Eh, 31302463h, 0
		dd 34060h, 180h, 7273722Eh, 32302463h, 2 dup(0)
dword_409298	dd 2 dup(0)		; DATA XREF: sub_406685+2o
					; sub_406685+7o
dword_4092A0	dd 2 dup(0)		; DATA XREF: sub_4066B0+2o
					; sub_4066B0+7o
dword_4092A8	dd 19930522h, 1		; DATA XREF: SEH_401D70o
		dd offset dword_4092CC
		dd 5 dup(0)
		dd 1
dword_4092CC	dd 0FFFFFFFFh		; DATA XREF: .rdata:004092B0o
		dd offset sub_406FD0
dword_4092D4	dd 19930522h, 1		; DATA XREF: t0::_seho
		dd offset dword_4092F8
		dd 5 dup(0)
		dd 1
dword_4092F8	dd 0FFFFFFFFh		; DATA XREF: .rdata:004092DCo
		dd offset sub_406FF0
dword_409300	dd 19930522h, 7	dup(0)	; DATA XREF: SEH_403810o
		dd 5
dword_409324	dd 19930522h, 1		; DATA XREF: SEH_4034B0o
		dd offset dword_409348
		dd 5 dup(0)
		dd 1
dword_409348	dd 0FFFFFFFFh		; DATA XREF: .rdata:0040932Co
		dd offset sub_407020
dword_409350	dd 19930522h, 3		; DATA XREF: SEH_403750o
		dd offset dword_409374
		dd 5 dup(0)
		dd 1
dword_409374	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409358o
		dd offset sub_407040
		align 10h
		dd offset sub_407048
		dd 0FFFFFFFFh
		dd offset sub_407051
		align 10h
dword_409390	dd 19930522h, 0Bh	; DATA XREF: SEH_403900o
		dd offset dword_4093B8
		dd 5 dup(0)
		dd 1, 0
dword_4093B8	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409398o
		dd offset sub_407070
		dd 0
		dd offset sub_40707B
		dd 1
		dd offset sub_407083
		dd 1
		dd offset sub_40708B
		dd 3
		dd offset sub_407094
		dd 1
		dd offset sub_407094
		dd 0
		dd offset sub_407094
		dd 6
		dd offset sub_40709C
		dd 7
		dd offset sub_4070A4
		dd 6
		dd offset sub_4070AC
		dd 0
		dd offset sub_4070B3
dword_409410	dd 19930522h, 1		; DATA XREF: SEH_403B30o
		dd offset dword_409434
		dd 5 dup(0)
		dd 1
dword_409434	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409418o
		dd offset sub_4070D0
		align 10h
dword_409440	dd 19930522h, 0Bh	; DATA XREF: SEH_403C00o
		dd offset dword_409468
		dd 5 dup(0)
		dd 1, 0
dword_409468	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409448o
		dd offset sub_4070F0
		dd 0
		dd offset sub_4070FB
		dd 1
		dd offset sub_407103
		dd 1
		dd offset sub_40710B
		dd 3
		dd offset sub_407114
		dd 1
		dd offset sub_407114
		dd 0
		dd offset sub_407114
		dd 6
		dd offset sub_40711C
		dd 7
		dd offset sub_407124
		dd 6
		dd offset sub_40712C
		dd 0
		dd offset sub_407133
dword_4094C0	dd 19930522h, 1		; DATA XREF: SEH_403EA0o
		dd offset dword_4094E4
		dd 5 dup(0)
		dd 1
dword_4094E4	dd 0FFFFFFFFh		; DATA XREF: .rdata:004094C8o
		dd offset sub_407150
dword_4094EC	dd 19930522h, 3		; DATA XREF: SEH_404270o
		dd offset dword_409510
		dd 1
		dd offset dword_409528
		dd 3 dup(0)
		dd 1
dword_409510	dd 0FFFFFFFFh		; DATA XREF: .rdata:004094F4o
		dd offset sub_407170
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 0
dword_409528	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:004094FCo
		dd offset dword_40953C
dword_40953C	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409538o
		dd offset sub_404305
		align 10h
dword_409550	dd 19930522h, 0Bh	; DATA XREF: SEH_404610o
		dd offset dword_409578
		dd 5 dup(0)
		dd 1, 0
dword_409578	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409558o
		dd offset sub_4071A0
		dd 0
		dd offset sub_4071A8
		dd 1
		dd offset sub_4071B0
		dd 1
		dd offset sub_4071B8
		dd 0
		dd offset sub_4071B8
		dd 0FFFFFFFFh
		dd offset sub_4071C1
		dd 5
		dd offset sub_4071C9
		dd 6
		dd offset sub_4071D1
		dd 6
		dd offset sub_4071D9
		dd 8
		dd offset sub_4071E2
		dd 0FFFFFFFFh
		dd offset sub_4071EB
dword_4095D0	dd 19930522h, 3		; DATA XREF: SEH_404560o
		dd offset dword_4095F4
		dd 1
		dd offset dword_40960C
		align 10h
		dd 1
dword_4095F4	dd 0FFFFFFFFh		; DATA XREF: .rdata:004095D8o
		dd offset sub_407200
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 0
dword_40960C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:004095E0o
		dd offset dword_409620
dword_409620	dd 40h,	2 dup(0)	; DATA XREF: .rdata:0040961Co
		dd offset sub_4045F5
dword_409630	dd 19930522h, 4		; DATA XREF: SEH_404C70o
		dd offset dword_409654
		dd 2
		dd offset dword_409674
		align 10h
		dd 1
dword_409654	dd 0FFFFFFFFh, 0	; DATA XREF: .rdata:00409638o
		dd 0FFFFFFFFh, 0
		dd 1, 0
		dd 1, 0
dword_409674	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:00409640o
		dd offset dword_40969C
		align 10h
		dd 3, 1
		dd offset dword_4096AC
dword_40969C	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409684o
		dd offset sub_404DCD
dword_4096AC	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409698o
		dd offset loc_404D27
dword_4096BC	dd 19930522h, 4		; DATA XREF: SEH_404EA0o
		dd offset dword_4096E0
		dd 2
		dd offset dword_409700
		dd 3 dup(0)
		dd 1
dword_4096E0	dd 0FFFFFFFFh, 0	; DATA XREF: .rdata:004096C4o
		dd 0FFFFFFFFh, 0
		dd 1, 0
		dd 1, 0
dword_409700	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:004096CCo
		dd offset dword_409728
		dd 2 dup(0)
		dd 3, 1
		dd offset dword_409738
dword_409728	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409710o
		dd offset sub_405021
dword_409738	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409724o
		dd offset loc_404F45
dword_409748	dd 19930522h, 6		; DATA XREF: SEH_4050A0o
		dd offset dword_40976C
		dd 1
		dd offset dword_40979C
		dd 3 dup(0)
		dd 1
dword_40976C	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409750o
		dd offset sub_407250
		dd 0FFFFFFFFh
		dd offset sub_407258
		dd 1, 0
		dd 1, 0
		dd 0FFFFFFFFh
		dd offset sub_407260
		dd 4
		dd offset sub_407267
dword_40979C	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:00409758o
		dd offset dword_4097B0
dword_4097B0	dd 40h,	2 dup(0)	; DATA XREF: .rdata:004097ACo
		dd offset loc_405245
dword_4097C0	dd 19930522h, 6		; DATA XREF: SEH_4052D0o
		dd offset dword_4097E4
		dd 1
		dd offset dword_409814
		align 10h
		dd 1
dword_4097E4	dd 0FFFFFFFFh		; DATA XREF: .rdata:004097C8o
		dd offset sub_407280
		dd 0FFFFFFFFh
		dd offset sub_407288
		dd 1, 0
		dd 1, 0
		dd 0FFFFFFFFh
		dd offset sub_407290
		dd 4
		dd offset sub_407297
dword_409814	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:004097D0o
		dd offset dword_409828
dword_409828	dd 40h,	2 dup(0)	; DATA XREF: .rdata:00409824o
		dd offset loc_40545B
dword_409838	dd 19930522h, 1		; DATA XREF: sub_4072B7o
		dd offset dword_40985C
		dd 5 dup(0)
		dd 5
dword_40985C	dd 0FFFFFFFFh		; DATA XREF: .rdata:00409840o
		dd offset sub_4072B0
dword_409864	dd 19930522h, 5		; DATA XREF: SEH_4059F0o
		dd offset dword_409888
		dd 1
		dd offset dword_4098B0
		dd 3 dup(0)
		dd 1
dword_409888	dd 0FFFFFFFFh		; DATA XREF: .rdata:0040986Co
		dd offset sub_4072D0
		dd 0FFFFFFFFh
		dd offset sub_4072D8
		dd 1, 0
		dd 1, 0
		dd 0FFFFFFFFh
		dd offset sub_4072E0
dword_4098B0	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:00409874o
		dd offset dword_4098C4
dword_4098C4	dd 40h,	2 dup(0)	; DATA XREF: .rdata:004098C0o
		dd offset loc_405AEC
		align 8
dword_4098D8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_405D2A+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_405D8F
		dd offset loc_405DA2
		align 8
dword_4098F8	dd 0FFFFFFFEh, 0	; DATA XREF: start-16Do
		dd 0FFFFFFCCh, 0
		dd 0FFFFFFFEh
		dd offset sub_406069
		dd offset sub_40607D
dword_409914	dd 0			; DATA XREF: sub_40615A+Eo
		dd offset sub_40611C
		align 10h
		dd offset dword_409924
dword_409924	dd 2			; DATA XREF: .rdata:00409920o
		dd offset dword_409930
		dd offset dword_4099C0
dword_409930	dd 10h			; DATA XREF: .rdata:00409928o
					; .rdata:00409964o
		dd offset off_411D10
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4060B6
dword_40994C	dd 0			; DATA XREF: sub_406177+Eo
		dd offset sub_40611C
		align 8
		dd offset dword_40995C
dword_40995C	dd 3			; DATA XREF: .rdata:00409958o
		dd offset dword_40996C
		dd offset dword_409930
		dd offset dword_4099C0
dword_40996C	dd 0			; DATA XREF: .rdata:00409960o
		dd offset off_411D2C
		align 8
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4060E9
dword_409988	dd 0			; DATA XREF: .rdata:004099B8o
		dd offset off_411D54
		dd 0
		dd 0FFFFFFFFh, 0
		dd 10h
		dd offset ??0runtime_exception@Concurrency@@QAE@ABV01@@Z ; Concurrency::runtime_exception::runtime_exception(runtime_exception::runtime_exception const	&)
dword_4099A4	dd 0			; DATA XREF: sub_403C00+ABo
					; sub_404500+4Fo ...
		dd offset ??1runtime_exception@Concurrency@@UAE@XZ ; Concurrency::runtime_exception::~runtime_exception(void)
		align 10h
		dd offset dword_4099B4
dword_4099B4	dd 2			; DATA XREF: .rdata:004099B0o
		dd offset dword_409988
		dd offset dword_4099C0
dword_4099C0	dd 0			; DATA XREF: .rdata:0040992Co
					; .rdata:00409968o ...
		dd offset off_411D80
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_401C90
		align 10h
;
; Export directory for crackme.exe
;
		dd 0			; Characteristics
		dd 5B3908D6h		; TimeDateStamp: Mon Jul 02 01:01:10 2018
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aCrackme_exe	; Name
		dd 1			; Base
		dd 5			; NumberOfFunctions
		dd 5			; NumberOfNames
		dd rva off_409A08	; AddressOfFunctions
		dd rva off_409A1C	; AddressOfNames
		dd rva word_409A30	; AddressOfNameOrdinals
;
; Export Address Table for crackme.exe
;
off_409A08	dd rva @C0@0, rva @C1@0, rva @T0@0, rva	@T1@0, rva @T2@0
					; DATA XREF: .rdata:004099FCo
					; T0()
;
; Export Names Table for crackme.exe
;
off_409A1C	dd rva a@c0@0, rva a@c1@0, rva a@t0@0, rva a@t1@0, rva a@t2@0
					; DATA XREF: .rdata:00409A00o
					; "@C0@0"
;
; Export Orfinals Table	for crackme.exe
;
word_409A30	dw 0, 1, 2, 3, 4	; DATA XREF: .rdata:00409A04o
aCrackme_exe	db 'crackme.exe',0      ; DATA XREF: .rdata:004099ECo
a@c0@0		db '@C0@0',0            ; DATA XREF: .rdata:off_409A1Co
a@c1@0		db '@C1@0',0            ; DATA XREF: .rdata:off_409A1Co
a@t0@0		db '@T0@0',0            ; DATA XREF: .rdata:off_409A1Co
a@t1@0		db '@T1@0',0            ; DATA XREF: .rdata:off_409A1Co
a@t2@0		db '@T2@0',0            ; DATA XREF: .rdata:off_409A1Co
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_409B54 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva SetThreadAffinityMask ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCP140 dd	rva off_409B94 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcp140_dll	; DLL Name
		dd rva ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; Import Address Table
__IMPORT_DESCRIPTOR_VCAMP140 dd	rva off_409BF0 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aVcamp140_dll	; DLL Name
		dd rva ?_Get_access_async@_Ubiquitous_buffer@details@Concurrency@@AAE?AV_Event@23@PAU_Buffer_descriptor@23@Vaccelerator_view@3@W4_Access_mode@@AAV?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrency@@@23@PA_K@Z	; Import Address Table
__IMPORT_DESCRIPTOR_VCOMP140 dd	rva off_409C74 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aVcomp140_dll	; DLL Name
		dd rva __imp__vcomp_enter_critsect ; Import Address Table
__IMPORT_DESCRIPTOR_VCRUNTIME140 dd rva	off_409CA0 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aVcruntime140_d	; DLL Name
		dd rva memmove		; Import Address Table
		dd rva off_409D58	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtStr	; DLL Name
		dd rva isalnum		; Import Address Table
		dd rva off_409CE4	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtMat	; DLL Name
		dd rva __imp__libm_sse2_exp_precise ; Import Address Table
		dd rva off_409CF8	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtRun	; DLL Name
		dd rva __imp_terminate	; Import Address Table
		dd rva off_409CC8	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtHea	; DLL Name
		dd rva __imp__set_new_mode ; Import Address Table
		dd rva off_409D4C	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtStd	; DLL Name
		dd rva __imp__set_fmode	; Import Address Table
		dd rva off_409CDC	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aApiMsWinCrtLoc	; DLL Name
		dd rva __imp__configthreadlocale ; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_409B54	dd rva word_409D60	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_409D78
		dd rva word_409D8C
		dd rva word_409DA0
		dd rva word_40AEE6
		dd rva word_40AEFA
		dd rva word_40AF16
		dd rva word_40AF34
		dd rva word_40AF48
		dd rva word_40AF62
		dd rva word_40AF78
		dd rva word_40AF8E
		dd rva word_40AFA8
		dd rva word_40AFBE
		dd rva word_40AECA
		dd 0
;
; Import names for MSVCP140.dll
;
off_409B94	dd rva word_409F8A	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCP140o
		dd rva word_409FCA
		dd rva word_40A008
		dd rva word_40A048
		dd rva word_40A082
		dd rva word_40A0C8
		dd rva word_40A10A
		dd rva word_40A14C
		dd rva word_40A18C
		dd rva word_40A1CC
		dd rva word_40A20C
		dd rva word_409EFA
		dd rva word_409ED6
		dd rva word_409EB6
		dd rva word_409E96
		dd rva word_409E7C
		dd rva word_409E42
		dd rva word_409E20
		dd rva word_409DE4
		dd rva word_409F4A
		dd rva word_409DC2
		dd rva word_409F1E
		dd 0
;
; Import names for VCAMP140.DLL
;
off_409BF0	dd rva word_40A570	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_VCAMP140o
		dd rva word_40A6A0
		dd rva word_40A700
		dd rva word_40A7BA
		dd rva word_40A84C
		dd rva word_40A878
		dd rva word_40A8A8
		dd rva word_40A8DA
		dd rva word_40A90A
		dd rva word_40A934
		dd rva word_40A968
		dd rva word_40A996
		dd rva word_40A9E0
		dd rva word_40AA30
		dd rva word_40AA56
		dd rva word_40AA72
		dd rva word_40AA8E
		dd rva word_40AAA6
		dd rva word_40AAC6
		dd rva word_40AAE8
		dd rva word_40A50C
		dd rva word_40A474
		dd rva word_40A44C
		dd rva word_40A420
		dd rva word_40A3DC
		dd rva word_40A366
		dd rva word_40A32A
		dd rva word_40A2DC
		dd rva word_40A288
		dd rva word_40A26A
		dd rva word_40A644
		dd rva word_40A4BA
		dd 0
;
; Import names for VCOMP140.DLL
;
off_409C74	dd rva word_40AFE4	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_VCOMP140o
		dd rva word_40AFFC
		dd rva word_40B014
		dd rva word_40B038
		dd rva word_40B046
		dd rva word_40B05E
		dd rva word_40B074
		dd rva word_40AB2E
		dd rva word_40AB18
		dd rva word_40AFD2
		dd 0
;
; Import names for VCRUNTIME140.dll
;
off_409CA0	dd rva word_40AB6C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_VCRUNTIME140o
		dd rva word_40AB76
		dd rva word_40AB8E
		dd rva word_40B09E
		dd rva word_40ABA0
		dd rva word_40ABB6
		dd rva word_40B088
		dd rva word_40ABC0
		dd rva word_40AB52
		dd 0
;
; Import names for api-ms-win-crt-heap-l1-1-0.dll
;
off_409CC8	dd rva word_40ADC8	; DATA XREF: .rdata:00409B04o
		dd rva word_40AC24
		dd rva word_40AC30
		dd rva word_40ACC6
		dd 0
;
; Import names for api-ms-win-crt-locale-l1-1-0.dll
;
off_409CDC	dd rva word_40ADB2	; DATA XREF: .rdata:00409B2Co
		dd 0
;
; Import names for api-ms-win-crt-math-l1-1-0.dll
;
off_409CE4	dd rva word_40B0A8	; DATA XREF: .rdata:00409ADCo
		dd rva word_40ACF0
		dd rva word_40ABF6
		dd rva word_40B0C2
		dd 0
;
; Import names for api-ms-win-crt-runtime-l1-1-0.dll
;
off_409CF8	dd rva word_40ADE8	; DATA XREF: .rdata:00409AF0o
		dd rva word_40AD84
		dd rva word_40ACAE
		dd rva word_40AD7A
		dd rva word_40AC92
		dd rva word_40AC76
		dd rva word_40AC54
		dd rva word_40AC3A
		dd rva word_40AD6C
		dd rva word_40AD5E
		dd rva word_40ABFE
		dd rva word_40AD48
		dd rva word_40AD40
		dd rva word_40AD32
		dd rva word_40AD26
		dd rva word_40AD04
		dd rva word_40ACE0
		dd rva word_40ACCE
		dd rva word_40ACBC
		dd rva word_40ADF4
		dd 0
;
; Import names for api-ms-win-crt-stdio-l1-1-0.dll
;
off_409D4C	dd rva word_40AD50	; DATA XREF: .rdata:00409B18o
		dd rva word_40ADD8
		dd 0
;
; Import names for api-ms-win-crt-string-l1-1-0.dll
;
off_409D58	dd rva word_40ABEC	; DATA XREF: .rdata:00409AC8o
		dd 0
word_409D60	dw 52Bh			; DATA XREF: .rdata:off_409B54o
		db 'SetThreadAffinityMask',0
word_409D78	dw 515h			; DATA XREF: .rdata:00409B58o
		db 'SetPriorityClass',0
		align 4
word_409D8C	dw 209h			; DATA XREF: .rdata:00409B5Co
		db 'GetCurrentProcess',0
word_409DA0	dw 20Dh			; DATA XREF: .rdata:00409B60o
		db 'GetCurrentThread',0
		align 4
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:00409A70o
		align 2
word_409DC2	dw 297h			; DATA XREF: .rdata:00409BE4o
		db '?__ExceptionPtrCreate@@YAXPAX@Z',0
word_409DE4	dw 2B4h			; DATA XREF: .rdata:00409BDCo
		db '?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A',0
		align 10h
word_409E20	dw 51Eh			; DATA XREF: .rdata:00409BD8o
		db '?uncaught_exception@std@@YA_NXZ',0
word_409E42	dw 2A3h			; DATA XREF: .rdata:00409BD4o
		db '?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A',0
word_409E7C	dw 28Bh			; DATA XREF: .rdata:00409BD0o
		db '?_Xbad_alloc@std@@YAXXZ',0
word_409E96	dw 28Fh			; DATA XREF: .rdata:00409BCCo
		db '?_Xout_of_range@std@@YAXPBD@Z',0
word_409EB6	dw 28Eh			; DATA XREF: .rdata:00409BC8o
		db '?_Xlength_error@std@@YAXPBD@Z',0
word_409ED6	dw 29Ch			; DATA XREF: .rdata:00409BC4o
		db '?__ExceptionPtrToBool@@YA_NPBX@Z',0
		align 2
word_409EFA	dw 299h			; DATA XREF: .rdata:00409BC0o
		db '?__ExceptionPtrDestroy@@YAXPAX@Z',0
		align 2
word_409F1E	dw 298h			; DATA XREF: .rdata:00409BE8o
		db '?__ExceptionPtrCurrentException@@YAXPAX@Z',0
word_409F4A	dw 219h			; DATA XREF: .rdata:00409BE0o
		db '?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z',0
word_409F8A	dw 4D8h			; DATA XREF: .rdata:off_409B94o
		db '?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ',0
word_409FCA	dw 244h			; DATA XREF: .rdata:00409B98o
		db '?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ',0
		align 4
word_40A008	dw 4C5h			; DATA XREF: .rdata:00409B9Co
		db '?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z',0
		align 4
word_40A048	dw 534h			; DATA XREF: .rdata:00409BA0o
		db '?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z',0
word_40A082	dw 4E1h			; DATA XREF: .rdata:00409BA4o
		db '?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@'
		db 'Z',0
		align 4
word_40A0C8	dw 461h			; DATA XREF: .rdata:00409BA8o
		db '?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z',0
		align 2
word_40A10A	dw 368h			; DATA XREF: .rdata:00409BACo
		db '?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ',0
word_40A14C	dw 495h			; DATA XREF: .rdata:00409BB0o
		db '?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ',0
word_40A18C	dw 4CFh			; DATA XREF: .rdata:00409BB4o
		db '?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ',0
		align 4
word_40A1CC	dw 4DEh			; DATA XREF: .rdata:00409BB8o
		db '?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z',0
word_40A20C	dw 106h			; DATA XREF: .rdata:00409BBCo
		db '??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01'
		db '@AAV01@@Z@Z',0
		align 4
aMsvcp140_dll	db 'MSVCP140.dll',0     ; DATA XREF: .rdata:00409A84o
		align 2
word_40A26A	dw 0A1h			; DATA XREF: .rdata:00409C64o
		db '__dpc_set_const_buffer_info',0
word_40A288	dw 32h			; DATA XREF: .rdata:00409C60o
		db '?_Create_buffer@_Buffer@details@Concurrency@@SAPAV123@PAXVacceler'
		db 'ator_view@3@II@Z',0
word_40A2DC	dw 3Ah			; DATA XREF: .rdata:00409C5Co
		db '?_Create_view_shape@_View_shape@details@Concurrency@@SAPAV123@IIP'
		db 'BI00PB_N@Z',0
word_40A32A	dw 69h			; DATA XREF: .rdata:00409C58o
		db '?_Release@_Reference_counter@details@Concurrency@@QAEXXZ',0
		align 2
word_40A366	dw 6Eh			; DATA XREF: .rdata:00409C54o
		db '?_Start_array_view_synchronize_event_helper@_Amp_runtime_trace@de'
		db 'tails@Concurrency@@QAEKABU_Buffer_descriptor@23@@Z',0
word_40A3DC	dw 7Ah			; DATA XREF: .rdata:00409C50o
		db '?_Write_end_event@_Amp_runtime_trace@details@Concurrency@@QAEXK@Z'
		db 0
word_40A420	dw 3Dh			; DATA XREF: .rdata:00409C4Co
		db '?_Get@_Event@details@Concurrency@@QAEXXZ',0
		align 4
word_40A44C	dw 16h			; DATA XREF: .rdata:00409C48o
		db '??1_Event@details@Concurrency@@QAE@XZ',0
word_40A474	dw 47h			; DATA XREF: .rdata:00409C44o
		db '?_Get_amp_trace@details@Concurrency@@YAPAV_Amp_runtime_trace@12@X'
		db 'Z',0
		align 2
word_40A4BA	dw 3Eh			; DATA XREF: .rdata:00409C6Co
		db '?_Get_CPU_access@_Buffer_descriptor@details@Concurrency@@QBEXW4_A'
		db 'ccess_mode@@@Z',0
word_40A50C	dw 4Bh			; DATA XREF: .rdata:00409C40o
		db '?_Get_master_accelerator_view@_Ubiquitous_buffer@details@Concurre'
		db 'ncy@@QBE?AVaccelerator_view@3@XZ',0
word_40A570	dw 44h			; DATA XREF: .rdata:off_409BF0o
		db '?_Get_access_async@_Ubiquitous_buffer@details@Concurrency@@AAE?AV'
		db '_Event@23@PAU_Buffer_descriptor@23@Vaccelerator_view@3@W4_Access_'
		db 'mode@@AAV?$_Reference_counted_obj_ptr@V_Buffer@details@Concurrenc'
		db 'y@@@23@PA_K@Z',0
		align 4
word_40A644	dw 79h			; DATA XREF: .rdata:00409C68o
		db '?_Unregister_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU'
		db '_Buffer_descriptor@23@@Z',0
word_40A6A0	dw 68h			; DATA XREF: .rdata:00409BF4o
		db '?_Register_view_copy@_Ubiquitous_buffer@details@Concurrency@@QAEX'
		db 'PAU_Buffer_descriptor@23@0@Z',0
word_40A700	dw 67h			; DATA XREF: .rdata:00409BF8o
		db '?_Register_view@_Ubiquitous_buffer@details@Concurrency@@QAEXPAU_B'
		db 'uffer_descriptor@23@Vaccelerator_view@3@V?$_Reference_counted_obj'
		db '_ptr@V_View_shape@details@Concurrency@@@23@QAU423@@Z',0
		align 2
word_40A7BA	dw 39h			; DATA XREF: .rdata:00409BFCo
		db '?_Create_ubiquitous_buffer@_Ubiquitous_buffer@details@Concurrency'
		db '@@SAPAV123@V?$_Reference_counted_obj_ptr@V_Buffer@details@Concurr'
		db 'ency@@@23@@Z',0
		align 4
word_40A84C	dw 19h			; DATA XREF: .rdata:00409C00o
		db '??1runtime_exception@Concurrency@@UAE@XZ',0
		align 4
word_40A878	dw 0Fh			; DATA XREF: .rdata:00409C04o
		db '??0runtime_exception@Concurrency@@QAE@PBDJ@Z',0
		align 4
word_40A8A8	dw 0Dh			; DATA XREF: .rdata:00409C08o
		db '??0runtime_exception@Concurrency@@QAE@ABV01@@Z',0
		align 2
word_40A8DA	dw 6			; DATA XREF: .rdata:00409C0Co
		db '??0accelerator_view@Concurrency@@QAE@ABV01@@Z',0
word_40A90A	dw 18h			; DATA XREF: .rdata:00409C10o
		db '??1accelerator_view@Concurrency@@QAE@XZ',0
word_40A934	dw 7Ch			; DATA XREF: .rdata:00409C14o
		db '?cpu_accelerator@accelerator@Concurrency@@2QB_WB',0
		align 4
word_40A968	dw 55h			; DATA XREF: .rdata:00409C18o
		db '?_Init@accelerator@Concurrency@@AAEXPB_W@Z',0
		align 2
word_40A996	dw 8Ch			; DATA XREF: .rdata:00409C1Co
		db '?get_default_view@accelerator@Concurrency@@QBE?AVaccelerator_view'
		db '@2@XZ',0
		align 10h
word_40A9E0	dw 89h			; DATA XREF: .rdata:00409C20o
		db '?get_auto_selection_view@accelerator@Concurrency@@SA?AVaccelerato'
		db 'r_view@2@XZ',0
		align 10h
word_40AA30	dw 17h			; DATA XREF: .rdata:00409C24o
		db '??1accelerator@Concurrency@@QAE@XZ',0
		align 2
word_40AA56	dw 0A0h			; DATA XREF: .rdata:00409C28o
		db '__dpc_release_call_handle',0
word_40AA72	dw 9Eh			; DATA XREF: .rdata:00409C2Co
		db '__dpc_create_call_handle',0
		align 2
word_40AA8E	dw 9Fh			; DATA XREF: .rdata:00409C30o
		db '__dpc_dispatch_kernel',0
word_40AAA6	dw 0A4h			; DATA XREF: .rdata:00409C34o
		db '__dpc_set_kernel_shader_info',0
		align 2
word_40AAC6	dw 0A2h			; DATA XREF: .rdata:00409C38o
		db '__dpc_set_device_resource_info',0
		align 4
word_40AAE8	dw 0A3h			; DATA XREF: .rdata:00409C3Co
		db '__dpc_set_kernel_dispatch_info',0
		align 2
aVcamp140_dll	db 'VCAMP140.DLL',0     ; DATA XREF: .rdata:00409A98o
		align 4
word_40AB18	dw 6Ch			; DATA XREF: .rdata:00409C94o
		db 'omp_set_num_threads',0
word_40AB2E	dw 62h			; DATA XREF: .rdata:00409C90o
		db 'omp_get_thread_num',0
		align 4
aVcomp140_dll	db 'VCOMP140.DLL',0     ; DATA XREF: .rdata:00409AACo
		align 2
word_40AB52	dw 22h			; DATA XREF: .rdata:00409CC0o
		db '__std_exception_destroy',0
word_40AB6C	dw 47h			; DATA XREF: .rdata:off_409CA0o
		db 'memmove',0
word_40AB76	dw 21h			; DATA XREF: .rdata:00409CA4o
		db '__std_exception_copy',0
		align 2
word_40AB8E	dw 23h			; DATA XREF: .rdata:00409CA8o
		db '__std_terminate',0
word_40ABA0	dw 1			; DATA XREF: .rdata:00409CB0o
		db '_CxxThrowException',0
		align 2
word_40ABB6	dw 48h			; DATA XREF: .rdata:00409CB4o
		db 'memset',0
		align 10h
word_40ABC0	dw 35h			; DATA XREF: .rdata:00409CBCo
		db '_except_handler4_common',0
aVcruntime140_d	db 'VCRUNTIME140.dll',0 ; DATA XREF: .rdata:00409AC0o
		align 4
word_40ABEC	dw 64h			; DATA XREF: .rdata:off_409D58o
		db 'isalnum',0
word_40ABF6	dw 126h			; DATA XREF: .rdata:00409CECo
		db 'round',0
word_40ABFE	dw 3Bh			; DATA XREF: .rdata:00409D20o
		db '_invalid_parameter_noinfo_noreturn',0
		align 4
word_40AC24	dw 8			; DATA XREF: .rdata:00409CCCo
		db '_callnewh',0
word_40AC30	dw 19h			; DATA XREF: .rdata:00409CD0o
		db 'malloc',0
		align 2
word_40AC3A	dw 19h			; DATA XREF: .rdata:00409D14o
		db '_configure_narrow_argv',0
		align 4
word_40AC54	dw 35h			; DATA XREF: .rdata:00409D10o
		db '_initialize_narrow_environment',0
		align 2
word_40AC76	dw 36h			; DATA XREF: .rdata:00409D0Co
		db '_initialize_onexit_table',0
		align 2
word_40AC92	dw 3Eh			; DATA XREF: .rdata:00409D08o
		db '_register_onexit_function',0
word_40ACAE	dw 1Fh			; DATA XREF: .rdata:00409D00o
		db '_crt_atexit',0
word_40ACBC	dw 17h			; DATA XREF: .rdata:00409D40o
		db '_cexit',0
		align 2
word_40ACC6	dw 18h			; DATA XREF: .rdata:00409CD4o
		db 'free',0
		align 2
word_40ACCE	dw 42h			; DATA XREF: .rdata:00409D3Co
		db '_seh_filter_exe',0
word_40ACE0	dw 44h			; DATA XREF: .rdata:00409D38o
		db '_set_app_type',0
word_40ACF0	dw 2Eh			; DATA XREF: .rdata:00409CE8o
		db '__setusermatherr',0
		align 4
word_40AD04	dw 2Ah			; DATA XREF: .rdata:00409D34o
		db '_get_initial_narrow_environment',0
word_40AD26	dw 38h			; DATA XREF: .rdata:00409D30o
		db '_initterm',0
word_40AD32	dw 39h			; DATA XREF: .rdata:00409D2Co
		db '_initterm_e',0
word_40AD40	dw 58h			; DATA XREF: .rdata:00409D28o
		db 'exit',0
		align 4
word_40AD48	dw 25h			; DATA XREF: .rdata:00409D24o
		db '_exit',0
word_40AD50	dw 54h			; DATA XREF: .rdata:off_409D4Co
		db '_set_fmode',0
		align 2
word_40AD5E	dw 5			; DATA XREF: .rdata:00409D1Co
		db '__p___argc',0
		align 4
word_40AD6C	dw 6			; DATA XREF: .rdata:00409D18o
		db '__p___argv',0
		align 2
word_40AD7A	dw 16h			; DATA XREF: .rdata:00409D04o
		db '_c_exit',0
word_40AD84	dw 3Fh			; DATA XREF: .rdata:00409CFCo
		db '_register_thread_local_exe_atexit_callback',0
		align 2
word_40ADB2	dw 8			; DATA XREF: .rdata:off_409CDCo
		db '_configthreadlocale',0
word_40ADC8	dw 16h			; DATA XREF: .rdata:off_409CC8o
		db '_set_new_mode',0
word_40ADD8	dw 1			; DATA XREF: .rdata:00409D50o
		db '__p__commode',0
		align 4
word_40ADE8	dw 6Ah			; DATA XREF: .rdata:off_409CF8o
		db 'terminate',0
word_40ADF4	dw 1Dh			; DATA XREF: .rdata:00409D44o
		db '_controlfp_s',0
		align 4
aApiMsWinCrtStr	db 'api-ms-win-crt-string-l1-1-0.dll',0 ; DATA XREF: .rdata:00409AD4o
		align 2
aApiMsWinCrtMat	db 'api-ms-win-crt-math-l1-1-0.dll',0 ; DATA XREF: .rdata:00409AE8o
		align 2
aApiMsWinCrtRun	db 'api-ms-win-crt-runtime-l1-1-0.dll',0 ; DATA XREF: .rdata:00409AFCo
aApiMsWinCrtHea	db 'api-ms-win-crt-heap-l1-1-0.dll',0 ; DATA XREF: .rdata:00409B10o
		align 4
aApiMsWinCrtStd	db 'api-ms-win-crt-stdio-l1-1-0.dll',0 ; DATA XREF: .rdata:00409B24o
aApiMsWinCrtLoc	db 'api-ms-win-crt-locale-l1-1-0.dll',0 ; DATA XREF: .rdata:00409B38o
		align 2
word_40AECA	dw 36Dh			; DATA XREF: .rdata:00409B8Co
		db 'IsProcessorFeaturePresent',0
word_40AEE6	dw 367h			; DATA XREF: .rdata:00409B64o
		db 'IsDebuggerPresent',0
word_40AEFA	dw 582h			; DATA XREF: .rdata:00409B68o
		db 'UnhandledExceptionFilter',0
		align 2
word_40AF16	dw 543h			; DATA XREF: .rdata:00409B6Co
		db 'SetUnhandledExceptionFilter',0
word_40AF34	dw 267h			; DATA XREF: .rdata:00409B70o
		db 'GetModuleHandleW',0
		align 4
word_40AF48	dw 42Dh			; DATA XREF: .rdata:00409B74o
		db 'QueryPerformanceCounter',0
word_40AF62	dw 20Ah			; DATA XREF: .rdata:00409B78o
		db 'GetCurrentProcessId',0
word_40AF78	dw 20Eh			; DATA XREF: .rdata:00409B7Co
		db 'GetCurrentThreadId',0
		align 2
word_40AF8E	dw 2D6h			; DATA XREF: .rdata:00409B80o
		db 'GetSystemTimeAsFileTime',0
word_40AFA8	dw 34Bh			; DATA XREF: .rdata:00409B84o
		db 'InitializeSListHead',0
word_40AFBE	dw 561h			; DATA XREF: .rdata:00409B88o
		db 'TerminateProcess',0
		align 2
word_40AFD2	dw 35h			; DATA XREF: .rdata:00409C98o
		db '_vcomp_barrier',0
		align 4
word_40AFE4	dw 38h			; DATA XREF: .rdata:off_409C74o
		db '_vcomp_enter_critsect',0
word_40AFFC	dw 3Eh			; DATA XREF: .rdata:00409C78o
		db '_vcomp_for_static_end',0
word_40B014	dw 42h			; DATA XREF: .rdata:00409C7Co
		db '_vcomp_for_static_simple_init_i8',0
		align 4
word_40B038	dw 43h			; DATA XREF: .rdata:00409C80o
		db '_vcomp_fork',0
word_40B046	dw 45h			; DATA XREF: .rdata:00409C84o
		db '_vcomp_leave_critsect',0
word_40B05E	dw 59h			; DATA XREF: .rdata:00409C88o
		db '_vcomp_single_begin',0
word_40B074	dw 5Ah			; DATA XREF: .rdata:00409C8Co
		db '_vcomp_single_end',0
word_40B088	dw 10h			; DATA XREF: .rdata:00409CB8o
		db '__CxxFrameHandler3',0
		align 2
word_40B09E	dw 46h			; DATA XREF: .rdata:00409CACo
		db 'memcpy',0
		align 4
word_40B0A8	dw 66h			; DATA XREF: .rdata:off_409CE4o
		db '_libm_sse2_exp_precise',0
		align 2
word_40B0C2	dw 40h			; DATA XREF: .rdata:00409CF0o
		db '_except1',0
		align 1000h
_rdata		ends

; Section 3. (virtual address 0000C000)
; Virtual size			: 000263A4 ( 156580.)
; Section size in file		: 00005E00 (  24064.)
; Offset to raw	data for section: 00009A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 40C000h
		dd 0FFFFFFFFh
dword_40C004	dd 1			; DATA XREF: sub_406194+11w
					; sub_406194+2Cw ...
		align 10h
dword_40C010	dd 44BF19B1h		; DATA XREF: sub_40656E+29w
					; sub_40656E+90w ...
dword_40C014	dd 0BB40E64Eh		; DATA XREF: sub_405C93:loc_405CD9r
					; sub_405C93+61r ...
dword_40C018	dd 1			; DATA XREF: sub_40666D+2r
dword_40C01C	dd 1			; DATA XREF: sub_406332+2r
dword_40C020	dd 2E58DD04h, 3FF8136Fh, 0E21FEBAFh, 3F8BB6AFh,	9A77FCB7h
					; DATA XREF: T2()+37o
		dd 3EE1F947h, 778A345Bh, 3F98CDE7h, 0D572D592h,	0BF671663h
		dd 21F522A2h, 0BF34FE65h, 0D2467200h, 0BF987D62h, 3DBE04A2h
		dd 0BFA2C9BDh, 4D065927h, 0BF886320h, 397D854Eh, 0BF78A069h
		dd 96965CF1h, 0BF976D16h, 0A0F4A9ABh, 3F591A74h, 491D3A4Dh
		dd 3F74D121h, 0E1F30FD5h, 0BF7F2052h, 0A7C183Dh, 0BFA1DF59h
		dd 0D2787849h, 3F83C22Ch, 8D716540h, 3F8CD049h,	794F8E94h
		dd 3F726E9Dh, 3CA19ADFh, 3F940DC9h, 95509074h, 0BF5878D2h
		dd 5072F43Bh, 0BF90E681h, 94AE9925h, 3FA05952h,	0E422DBAh
		dd 3F913D76h, 0A1C99CFCh, 0BF9A56D9h, 71D3A28Bh, 0BFAB369Dh
		dd 86908EE7h, 0BFB50CB4h, 7DF2BCBFh, 3F86E4E3h,	4E3ADC63h
		dd 0BFC600AEh, 2C1B96F7h, 3F995A70h, 0BB9B7A45h, 3FF1C57Bh
		dd 3038D811h, 0BF7ED8C1h, 4AE2A9BDh, 40021C30h,	0A0F52CF4h
		dd 0BF981544h, 7BB0436Bh, 3FCA81E7h, 3A145FC1h,	0BFA4DA79h
		dd 5EEE0C42h, 3FA07B66h, 0E0EEED59h, 0BFB6E0FFh, 0BA20BDD8h
		dd 3FA95903h, 7B852776h, 0BF9A13B9h, 0BEC38576h, 3FA7D4C4h
		dd 0AA94E84h, 0BF800696h, 0AB3349B1h, 3FA7E3BEh, 0E9234D7Eh
		dd 3FA3859Fh, 99E9DE43h, 3F9D60D1h, 0A19414BEh,	0BF74FCF2h
		dd 0AE7BA725h, 3FB21C11h, 1321D83Bh, 3FB218D5h,	0EB4FCF11h
		dd 3FA429DBh, 0DC45F38Eh, 0BF8BA416h, 3FACA46Ch, 3FBF81A0h
		dd 0BF3DBF5h, 3FC512DDh, 0DB99816h, 3FA48974h, 0F0C2B56Fh
		dd 0BFB65BD4h, 19E59B57h, 3FC1724Dh, 23176F5Bh,	0BFB9F8EBh
		dd 0E1ACE663h, 3FC7660Ah, 2ECA676Dh, 0BFEB1E36h, 0ACDA2145h
		dd 3FC41195h, 0AC2E8CF7h, 0BF8D0826h, 0B099AE58h, 3F72744Dh
		dd 0C894C160h, 0BF9B91A3h, 0B053A8FDh, 3F8A50EDh, 0C3A1F329h
		dd 3F9EF490h, 0E30EC361h, 0BFACC126h, 0E96B23C8h, 3FCDCED0h
		dd 74F7CDAAh, 3FCA2D63h, 0D5BE20B5h, 3FE77712h,	0E7884CD7h
		dd 3F8B3811h, 0D34576h,	3FA0021Fh, 0CFCCA336h, 3F9057DAh
		dd 68691624h, 3FB521B6h, 2F9CBCA3h, 3F79A65Dh, 80CB8870h
		dd 3FD4EC71h, 0E095576Ch, 0BFA602DFh, 46F29A3Dh, 3FF50757h
		dd 4E8FEDB0h, 3F808C30h, 0E9E674D4h, 0BFA8F677h, 0AC41CF80h
		dd 3FAFBCEAh, 82344E0Fh, 0BF93AD40h, 0A2B3FF6h,	3F9867ACh
		dd 1A96C75Dh, 0BFB556B0h, 0E3454EAFh, 3FBDA1EFh, 9FAC363Bh
		dd 0BF9634A0h, 4048733Dh, 3F8DDD15h, 6913342Bh,	0BFAAD882h
		dd 0F95F3D9Ah, 3FBC2528h, 0C58FE4C9h, 3FA7FF68h, 0E4E8DF5h
		dd 0BFC4E531h, 6C8E0EB6h, 3FB685B7h, 8119E9h, 0BFC2A2E2h
		dd 34ADC732h, 3FB125C9h, 0E4C1F8C7h, 3F71963Bh,	50AFF846h
		dd 0BFA55FFEh, 0CE57F53Bh, 3F713F84h, 0F3E389Ah, 0BFB3D6CEh
		dd 0B71B8575h, 0BF8D5E1Eh, 0D47312D4h, 3F937489h, 28A45D17h
		dd 3F59AE41h, 516495A8h, 0BFC51AA6h, 6C0F5C75h,	3FE2626Ch
		dd 7A8B69Bh, 0BFA95865h, 833A4164h, 3FC05F34h, 143BAEE3h
		dd 0BFB7F9BEh, 31B5E20Fh, 3FD1B1DEh, 180AC804h,	0BF9CDEA1h
		dd 0D8677721h, 3FC20F7Dh, 0BC985638h, 0BF62A9BBh, 3A7553B0h
		dd 0BFC344C8h, 0FAFCCDB2h, 3F62A070h, 47DB7F6Eh, 3FA7351Bh
		dd 0F99B8F33h, 0BFC406E1h, 6B27D4BEh, 3F83C953h, 9E527E19h
		dd 0BF4BAB06h, 3E5896E8h, 3FB77248h, 48091C0Ch,	0BFD5E7D0h
		dd 3D467FF6h, 3F85790Ch, 0A109FDC7h, 0BF8A513Fh, 6F1A1F8Fh
		dd 3FCBA254h, 4C61EBDCh, 0BFC17254h, 0F77819C6h, 3FBA2DABh
		dd 0BF0A795Fh, 3FB82974h, 2BA1357Eh, 3FDBBE75h,	0E7FB2D20h
		dd 3FCB07D8h, 0AC79DA24h, 3FBDB00Fh, 0DD9D34B2h, 3F8133B0h
		dd 0E4F5A4AAh, 3F9FD93Ah, 0E8377A14h, 3F812A15h, 0A71C3FB7h
		dd 3FAE5ED6h, 661003DAh, 3FA8A815h, 465E5B51h, 3F5E0206h
		dd 0E14BF5AAh, 3FA10C52h, 44478FDEh, 3FA7EE96h,	64F48D0Ch
		dd 3FD9A480h, 0EE90142Fh, 3F82751Ch, 0C09E0551h, 3FAC08A6h
		dd 0E89F5EB1h, 3F90AE2Dh, 0E687FF58h, 3FB76C6Ch, 0E182D53h
		dd 0BF6DBD3Bh, 8EFE00D3h, 3F9B74C6h, 6713DC66h,	3FA90832h
		dd 0C24F0879h, 3FC10602h, 0D437FB1Dh, 0BF85D595h, 1E39832Ch
		dd 0BF970AB6h, 0B99B4588h, 0BFB2C01Fh, 0AFDDA238h, 3FA4645Fh
		dd 6857F702h, 0BF81B384h, 634C1A9Bh, 0BFA31833h, 4268604Ch
		dd 0BFBF7594h, 8F78243Eh, 3FBF5B35h, 16CEF0EFh,	0BF96647Ah
		dd 419564Fh, 0BFAB0FD0h, 0E8512CE2h, 0BF82262Dh, 73A87088h
		dd 3FD12C9Ch, 5D8636E5h, 3FD117F7h, 0F907A25Bh,	0BF7BE8C6h
		dd 48504BE7h, 3FD1B912h, 0CB7D6D6Fh, 3FE0D994h,	34079314h
		dd 0BFBCDD15h, 0EAC9D94Eh, 3F928474h, 0EC66DE8Fh, 0BFCB10DEh
		dd 0F34F2019h, 3FA4FA9Ch, 2AF75CBCh, 0BFC0939Fh, 4652FF0h
		dd 0BFC4E796h, 63BB916Ch, 0BFC20B82h, 0BE661B8Bh, 0BF708850h
		dd 0ABAC2BBFh, 3FD7481Eh, 0F2813993h, 3FA74EC0h, 0F2A64492h
		dd 0BFA0FD0Bh, 9BE6BEF4h, 3FB49967h, 0AB30877Fh, 0BFAB6903h
		dd 0F7F2EF75h, 3FB71C37h, 4B9D9B4Dh, 3FABC5F3h,	79D7BDC5h
		dd 3FB5996Eh, 1DC08604h, 0BFB5A90Bh, 0D1246CD6h, 3F78CD18h
		dd 5A372A1h, 3FB20D6Bh,	18DD4B36h, 0BFACBB57h, 4F27C070h
		dd 3FA0CD6Ah, 2DECA1BCh, 3F8A4285h, 88DA6ACCh, 3FC3AE7Dh
		dd 4CC5A38Bh, 0BFBE348Fh, 373074Dh, 3FB1473Ah, 89C5CCD2h
		dd 3F9ADCD4h, 8316EBA3h, 0BF9CADB5h, 3B936BFh, 0BFBF6906h
		dd 6332DB35h, 3FC64631h, 8F77A7C3h, 0BFC919A6h,	263978B7h
		dd 3FA009C8h, 30B562E7h, 0BFB4CBD5h, 7EBA9488h,	3FDDAE78h
		dd 0F47EB312h, 3FAB15E9h, 1ABE4E80h, 0BFBF0962h, 5EEF037Eh
		dd 3FB847D5h, 0FF69C425h, 0BFD072D1h, 740C9045h, 3FAE9613h
		dd 5CF4E5FCh, 0BFD0BFEEh, 0B4EE1993h, 0BF62B9CEh, 0A1BBF7E7h
		dd 3FE125B5h, 2E830CD1h, 0BFF13578h, 0B4DACA77h, 3F679A16h
		dd 0E8A3AACDh, 3FBA7DFCh, 7CCC72B8h, 3F565701h,	51F8B0AAh
		dd 3FCB9BE9h, 321C063Eh, 3F8AA000h, 1E518869h, 0BFEF57E3h
		dd 21B01F52h, 3F864E9Ah, 4304CF9Dh, 0BFF95C2Ah,	1F441E67h
		dd 3F9168B2h, 9C707D70h, 0BF8D4E91h, 72E5E2C3h,	3F8E9FF9h
		dd 0FC58D8B7h, 3F86AAC0h, 1B90B10Bh, 3FA0F091h,	134D11DDh
		dd 0BF9E424Dh, 2590227Dh, 3F97D656h, 47A2F0F9h,	3F8FC4F8h
		dd 0D96CE4EBh, 3FA37A6Dh, 5F7FB1BCh, 0BF9598FCh, 51651465h
		dd 0BF724A10h, 620ADF5Eh, 3F97D1F6h, 0ABCED2D9h, 0BFA775E8h
		dd 3B0C648Ah, 3FB01BDAh, 0FFFBA873h, 0BFB17D50h, 0F22C7A72h
		dd 3FA10B01h, 0BF25364Dh, 3F757596h, 0A96D5D89h, 0BF848D79h
		dd 0E02AB222h, 3F5D5B3Ah, 9F53E31Bh, 0BF889562h, 8B1502E3h
		dd 0BF5DBD86h, 0C437E650h, 0BFACEB68h, 92CCADDDh, 0BF8DBC6Eh
		dd 0C15E9136h, 3FAB6C2Bh, 23CDAFD3h, 0BFD2243Bh, 0F3A6E3D9h
		dd 3FBA2671h, 0EF337B10h, 0BFA33EE9h, 1E4E945h,	3FCAB090h
		dd 65EC82FFh, 0BFB0769Bh, 4046472Dh, 3FA299C3h,	20D9EFDCh
		dd 0BFA86387h, 65B164BBh, 3FB33BD6h, 1FD885BBh,	3FC41F2Ch
		dd 0D1DE364h, 0BFAFD423h, 57EE7592h, 0BF821267h, 0F1A43800h
		dd 0BF9B3D73h, 7FDCF1Eh, 3FA31945h, 7127CAC0h, 0BFBBB56Fh
		dd 57797FCh, 3F9DD239h,	0BFA37DC4h, 0BF82CCF1h,	714EEEA9h
		dd 3FB4C9BAh, 13F48018h, 0BFC873BAh, 81C990F0h,	0BF96B418h
		dd 514F3D72h, 0BFD0C967h, 24FEEBB7h, 3FA49BFCh,	39D49333h
		dd 3FB72C1Dh, 16083EA6h, 0BF9FB224h, 0FE4A3B9Eh, 0BFE3767Fh
		dd 3C5EBDF5h, 3FB89C3Ah
		dd 4D8C0657h, 0BF8B69D3h, 2DE20596h, 3FA70860h,	0C5C20D18h
		dd 0BF979C74h, 7C9D1C08h, 3FBD708Bh, 1BF532F2h,	0BFAE4F13h
		dd 69084889h, 0BFB49BDBh, 5E474E6Eh, 0BFC07F6Fh, 0F11812CBh
		dd 3FBB1B7Fh, 4DD439B7h, 0BFE51182h, 0F078E59Fh, 0BF988563h
		dd 0EDC7C79Ch, 3F8F0AC7h, 0B331D47Bh, 0BF9B7783h, 4B01E248h
		dd 3FA1E4FBh, 446E5204h, 0BF7195FAh, 0FC88C6DAh, 0BFBABFA2h
		dd 6E7BB2B9h, 0BF8176D8h, 0B74F14ACh, 0BFA60A30h, 0B19D61ABh
		dd 0BFB8D50Bh, 6146CE09h, 0BFAD91DEh, 6F1DFC82h, 3FA3E961h
		dd 5D46693Eh, 3F96406Bh, 9030F7A1h, 0BFCAEC78h,	685E8C27h
		dd 0BFBFC060h, 4E6861B7h, 3FBB2939h, 8E010819h,	3FA72A71h
		dd 36F66C0Bh, 0BFDB60CBh, 0F5337158h, 0BF9AA352h, 0D87FCB9Bh
		dd 3FD28019h, 92CC67EFh, 3FA4E132h, 3B4E1929h, 0BFAC961Dh
		dd 7D46CD4Bh, 3F893D8Ah, 0E4AF44D2h, 0BFBF20A5h, 0C1B52C42h
		dd 3FCC222Ch, 0CB050720h, 0BFC30298h, 0AB566187h, 0BF7BE6B8h
		dd 600DB75Fh, 0BFD436DDh, 0C6A65564h, 0BF8C4995h, 9E0E6347h
		dd 0BFC1F95Fh, 416FF9B9h, 0BFD10A80h, 788D3984h, 3FB67185h
		dd 1D0EAD5Bh, 3F9FC2D1h, 89E977Bh, 0BFB72346h, 0CD24C5DCh
		dd 0BF8A448Ah, 0DB919457h, 3FA7FEC8h, 4816968Ch, 0BFA8AAEDh
		dd 0C7141331h, 3FB4F9F5h, 34B13D4Eh, 0BF8F0414h, 755FE80Eh
		dd 3FAD9046h, 7689A873h, 0BFAD6467h, 8ADC3CD4h,	3FC5A6B9h
		dd 9E0EBD7Bh, 0BFA01522h, 0B267F44Fh, 0BF9115BBh, 718B3394h
		dd 3F995FB9h, 0A4341433h, 3F3AA0C4h, 1CE8BAA8h,	0BFB41686h
		dd 30A30520h, 0BFA9555Ch, 0FB50DABBh, 3F852FC8h, 0DB46F72Dh
		dd 0BFA59F3Fh, 0CB700AD6h, 0BFAAA6FEh, 74C4F51Ah, 3F61A2D2h
		dd 0C671B7E7h, 3FBFFABEh, 0EEB76C1Fh, 3F280097h, 35C8BA8Fh
		dd 0BFA2B1CAh, 0C07D5510h, 0BFA52EB2h, 0DB2ABC67h, 3FC7C1FCh
		dd 0FFD7D91Fh, 3FCF1F79h, 7A14F053h, 0BF9794DFh, 975E42E9h
		dd 3FBD391Bh, 0EC7F4F2Eh, 0BFAE8F39h, 0E85A65AEh, 3FCD0C5Fh
		dd 5A49E0B2h, 0BFD1EC16h, 46C76ABh, 3FB54A04h, 9CFE1965h
		dd 0BFE7A2BCh, 575A86FBh, 3F8CAE69h, 21BFDA42h,	0BFF64B79h
		dd 0A770FF66h, 0BF5BC3BEh, 6E2F8A72h, 0BFB57D65h, 0C6C10C38h
		dd 0BF9A0A69h, 41A67ABFh, 0BFC673F2h, 0E8BE56E4h, 0BFA15A01h
		dd 0FBD0955h, 0BFA93405h, 854677E7h, 0BF899BD1h, 0EF6D6261h
		dd 0BFC811B5h, 0E6DA4768h, 0BF85D158h, 0C34CAD2Ch, 0BFAD0CD5h
		dd 9965071Ah, 0BF95EA42h, 8D1F3206h, 3F97824Bh,	0FD68FB54h
		dd 0BF9910ACh, 474F057h, 0BFBBBBD4h, 3AA4FF9Fh,	0BFAFBDC9h
		dd 1ACAC652h, 3FA67F33h, 53AB42B4h, 3F850367h, 4993CAF1h
		dd 0BFB77CD4h, 0E2AD63A4h, 0BFA7CE06h, 3EC29082h, 3FB350C1h
		dd 61EB9060h, 0BFD8DD54h, 3D8B9D24h, 0BFBCDD94h, 2C3EBC06h
		dd 3F53E4D6h, 0F316E09Eh, 0BFD91214h, 44A4E80Bh, 0BFB06C77h
		dd 0A7005B35h, 0BFBA3D06h, 2C6A4920h, 0BFC1F26Eh, 183CD0E1h
		dd 0BFCD3DD3h, 0BCD24161h, 0BFB5D95Ch, 1BE5B044h, 0BFD82FEAh
		dd 98727B86h, 0BF81B661h, 0F0DF759Eh, 3F21588Dh, 18A107ADh
		dd 3FFCECFEh, 0F8FFA5A4h, 0BFB3E598h, 0F712FCCFh, 3F78DDFFh
		dd 3DEA477Ah, 0BFC48771h, 5094FE43h, 3F8FC49Fh,	779CC350h
		dd 3FF4F246h, 19944819h, 0BF48E4D6h, 0C9C4AAE3h, 40054501h
		dd 1DB40CF9h, 0BF97433Ch, 68CF8752h, 0BF82DB39h, 0BEE0B5A0h
		dd 0BF874C75h, 0F2004D63h, 0BF66713Fh, 0D727AA7Eh, 0BF7B6E34h
		dd 0B0FAB537h, 0BF8C59CFh, 0D1BC13FEh, 0BF8EAE6Bh, 942BF7F6h
		dd 0BF7FD847h, 0F99B5C8Eh, 0BF842F3Eh, 0D7A6E274h, 0BF9E3614h
		dd 0AF231315h, 3F817327h, 0EFB34565h, 3F91A3DFh, 0B80D4AEFh
		dd 0BF753A05h, 269420A7h, 0BF9DF809h, 94FEB9A0h, 3F99436Dh
		dd 8B4F9334h, 3F8A8BB1h, 0F590533Bh, 0BF30DDA9h, 0C1DEE3C3h
		dd 3F7EC4F7h, 23E021A5h, 0BF6B5165h, 0B78C733Ah, 3F94A46Bh
		dd 0C44838BDh, 0BF74B15Dh, 2A0770EBh, 3F8DBF87h, 28838717h
		dd 0BFA3D9AFh, 2ACC073Eh, 0BF45B648h, 6BDF315Fh, 0BF9BAF9Ch
		dd 7DFFBB57h, 3FEA6EB7h, 2538F8ECh, 0BF9AD7A7h,	98453895h
		dd 3F22DC3Fh, 7031B91Fh, 0BFA7DA6Ch, 87FFB5EBh,	3F7CFA32h
		dd 0A9FABC57h, 0BFA75374h, 40271716h, 0BF874028h, 333F51Eh
		dd 0BF93D426h, 0CD732031h, 0BF360725h, 0C33B6A93h, 0BF8BE055h
		dd 0D7188B75h, 0BFADAE6Ch, 0D7DBCC5Dh, 3F931F84h, 52D4D610h
		dd 0BF942E41h, 8F607A70h, 0BF9508EDh, 0DF023F0Eh, 0BFBC2853h
		dd 0AA248677h, 3FA65236h, 6950E3C4h, 0BF976D9Bh, 93EDDB92h
		dd 0BF9E0F72h, 335068E3h, 0BF869DE4h, 0FF55ECA2h, 3FB2A0B2h
		dd 0B63BEE6Fh, 0BFAB702Bh, 32D977C8h, 3FBF6A8Fh, 62E2B63Dh
		dd 0BFB4FF8Ah, 853A4704h, 3FC0091Dh, 0E3B55F95h, 0BFD10399h
		dd 0C1C170E5h, 0BF95A77Ch, 0F0E3119h, 3FA11CD0h, 9A3BB3B2h
		dd 0BFA293C9h, 20279754h, 3FB747DAh, 1FEA7350h,	0BFA44E08h
		dd 0DEC236F8h, 0BFB8680Ch, 560537F9h, 0BF9AB275h, 7BD9D4BAh
		dd 400198CEh, 3D31A5D5h, 0BFEB2A61h, 927BC68Ch,	0BFB7538Bh
		dd 0A4EBDF8Dh, 0BFBCD902h, 0EBE265C5h, 0BFC69802h, 0FD091FA0h
		dd 0BFC6EB1Ah, 0E1193AF8h, 0BFB0BCD8h, 0B33A90B5h, 0BFAA190Dh
		dd 55B1A6EAh, 0BFA7CC0Fh, 0A976CDCEh, 3FD57146h, 76302206h
		dd 0BFAA0431h, 6316052Dh, 0BFAF3F6Bh, 8E96EA56h, 3F969EA8h
		dd 211E8E55h, 3FA2AFA8h, 0BF6ED5CEh, 0BFB66664h, 457F86BEh
		dd 0BFB53976h, 0FD11087Ch, 3FA30F13h, 0B1D5FF92h, 3FB67AA8h
		dd 771AE689h, 0BFD307E4h, 9650530Ah, 0BFAE7AB3h, 217E0434h
		dd 0BF93E103h, 862A217Fh, 3FBD1018h, 248E4B7Ah,	0BFE20FA6h
		dd 7E95ED88h, 3FA774DFh, 0B0087083h, 0BFCE5CB7h, 4AA01F56h
		dd 3FC013CEh, 85E844A0h, 3F932202h, 0D77C83A0h,	0BFAC4E5Fh
		dd 0A367EE61h, 3FA9F09Bh, 0EF4882DDh, 0BFB8A5CDh, 83C03FA3h
		dd 3F7FB8C5h, 0D2EDCA9Eh, 0BFA2C050h, 83D66DA2h, 0BFBE1222h
		dd 14D56AD6h, 0BFB11BCDh, 573AF190h, 0BFE06B53h, 5748EF57h
		dd 0BFB09B49h, 649EA45Ah, 0BFCEAD38h, 0D6BA974Bh, 0BFBE2942h
		dd 881275ADh, 0BFE18F5Ch, 59DAEBB4h, 0BFB6066Eh, 657AD8DCh
		dd 0BFD6DDDDh, 0EE74EE81h, 0BFAAA524h, 0A1395964h, 3FE30CF2h
		dd 0F2363E17h, 0BFAE8C39h, 0F7C17212h, 3FB05F39h, 0D272025Ch
		dd 0BFB60217h, 0A5683C35h, 0BF9832E2h, 345E0AAEh, 0BFBEFDA9h
		dd 1E8B6B5Eh, 3FBD3CBBh, 3D008DE5h, 0BFC2976Bh,	0E75C9C31h
		dd 0BFA5BC09h, 0B65EDBCDh, 0BFBBA2E9h, 321D4256h, 3F9DA25Ah
		dd 2F550E67h, 0BFAD082Dh, 0E3572914h, 0BFB13E7Ah, 0C7E85B7Ah
		dd 3FB12498h, 0CD77376Ch, 0BFBE610Dh, 0B7AEBBD7h, 0BF79D50Ah
		dd 11769D00h, 0BFB0C24Fh, 3DA8E617h, 3FA50C4Eh,	8834DFB2h
		dd 3F9F98DFh, 0F87A1FBDh, 3FB4EC23h, 9974C4Bh, 3FB0E72Eh
		dd 4CAADAAh, 3F92AA5Ch,	3AD0EC47h, 3FC32906h, 217CD88Dh
		dd 3F83884Eh, 0A6DFCDD9h, 3FB7D92Dh, 0D29EA12Dh, 0BFEFF93Ch
		dd 0BF4D98DFh, 0BF9E19C1h, 4C340524h, 3F9AE336h, 64F300D6h
		dd 0BFAA5EBFh, 6A9366A9h, 3FB1B554h, 5C99F13Eh,	0BFA9DFD6h
		dd 93681C50h, 3F914901h, 0E941D7D2h, 3FAFB94Dh,	0A8572E17h
		dd 0BFB0862Ah, 2CDA722Ch, 0BFA26720h, 90F855F4h, 0BF984374h
		dd 0CBAF6B75h, 0BFAD5F06h, 19475199h, 3FB27132h, 8C56B58Fh
		dd 0BFAD7712h, 0DED704ADh, 0BFA6A527h, 0CBA657C4h, 0BFB5E267h
		dd 45605BBAh, 3FCACDC1h
		dd 38388467h, 0BFB03EDAh, 69568CADh, 3FA4A86Bh,	85341C8Ah
		dd 3F59B844h, 21F78744h, 0BFE02270h, 29A4D737h,	3F83414Dh
		dd 0D1BCE0C9h, 3F9CF08Dh, 5E56DE91h, 0BF783651h, 14226E0Dh
		dd 0BFF47742h, 0C10284BFh, 0BF889739h, 533116F6h, 0BF90C1DEh
		dd 3DB0D958h, 0BF91FFD1h, 6DF39EC9h, 0BF95803Dh, 7C020AFh
		dd 0BF96A863h, 0A33C615Bh, 0BFAA43A0h, 0FFD06834h, 0BF9CE06Ah
		dd 0E79C5960h, 0BF7D775Fh, 0ED96EF4Eh, 3FE2763Ah, 1260D017h
		dd 3F915966h, 0F7FE8F04h, 0BF939CD0h, 8CCA5C96h, 3FA7AD53h
		dd 114B39ECh, 0BFAAD200h, 0DCEB0AE0h, 3FA1BA5Dh, 0C4F7D2B1h
		dd 0BFA045ABh, 22251B2Fh, 3F9E1880h, 309D46Eh, 0BFAF1351h
		dd 0DEF4F1B0h, 3F75C14Bh, 74B50B68h, 0BF803831h, 0B1423C10h
		dd 3F96A5A0h, 297C3B83h, 0BF71EA1Ch, 0B16B49BFh, 3F921912h
		dd 32FA91A8h, 0BF437DE0h, 0CEA392AAh, 3FABF36Bh, 92B446AEh
		dd 3F79F7E7h, 0A4E1408Fh, 3FCA20B1h, 3F629E03h,	0BFA9E70Fh
		dd 0E8BEEEFh, 3FB38EC5h, 98BDB921h, 3F733E95h, 6C429630h
		dd 3FF42853h, 0DED1C6AFh, 3F94E388h, 0AB7AA716h, 0BFB51300h
		dd 0ADD0865Fh, 0BF890945h, 9B22FE1Bh, 0BF78CF87h, 76C2CA77h
		dd 0BFB5BC60h, 786CA6F9h, 3F82FB26h, 0B677E07Bh, 0BFC41A96h
		dd 9B8AB622h, 0BF5647DBh, 0C00D512Dh, 0BFBFC2EBh, 0D33C4C0Bh
		dd 0BFB5D27Fh, 75D17DEBh, 3FC1AF0Dh, 15081A70h,	3FD01F08h
		dd 0A2F7700h, 3FB14312h, 0A8C2AB5h, 0BFB15B16h,	0A35EE53Eh
		dd 3FC1BD0Bh, 5F622C10h, 0BFBD5F22h, 6A8618A9h,	3F835359h
		dd 0A03D8557h, 0BFC4AB26h, 856F8F89h, 0BF993BA4h, 6261FBFDh
		dd 3FE1C63Dh, 3C574E03h, 3FAA7B29h, 266EE164h, 3FAD3ACEh
		dd 89617700h, 0BF5B307Eh, 0F42E38B8h, 0BFB58175h, 0B48F1770h
		dd 3FBA2E2Bh, 0C03F0C36h, 3FBFCE35h, 1C91E5Bh, 3F95BC18h
		dd 0BB950821h, 0BFC351ECh, 0C4B5447Ch, 3FC235FDh, 5D014444h
		dd 3FACDF6Fh, 78C8081Dh, 3FA4C167h, 64610044h, 0BFCFAF17h
		dd 0D045F8C9h, 3FD25EC1h, 4B04F315h, 0BF7B5ED0h, 1599C187h
		dd 0BFC25DD1h, 0D2B00339h, 0BFC66017h, 4477DB9h, 0BFA09C80h
		dd 6A10D1B4h, 3F788F43h, 2F8B8523h, 0BFB01014h,	0A8354F86h
		dd 3F977079h, 13878320h, 0BF8FC609h, 0CAE7B8FDh, 3FB21CE0h
		dd 759EBEF3h, 3FAF172Ch, 99F54F06h, 0BF93C9D2h,	165680C7h
		dd 0BFD93C9Eh, 0C3AA84B4h, 0BFB1B67Ah, 91241D93h, 3FA19DE3h
		dd 0E67A95CDh, 0BFC2CA78h, 60ECF0D2h, 3FACCADDh, 25CF75DFh
		dd 0BFC175E5h, 0D9DAD9D2h, 0BF807D1Eh, 38F93097h, 0BFD3916Eh
		dd 7D0E4302h, 0BFAD6B01h, 30268625h, 0BF8D6795h, 46E8C763h
		dd 3FA9DA4Bh, 471AA2B7h, 3FAE8489h, 0BC40FB23h,	0BFA8253Fh
		dd 73CB0351h, 0BF97ECD0h, 0A3B160A4h, 3FBC664Bh, 79DE19E0h
		dd 3FBE8D2Ah, 0D2522744h, 0BFB8AD4Fh, 1860EB54h, 0BFB93B2Ch
		dd 6ACC7F78h, 3FB26C64h, 69859404h, 3FC3B4AFh, 2552441h
		dd 0BFCCE2D9h, 9ECC5CD3h, 3FDF3465h, 0FC417238h, 3F8B4981h
		dd 4D361DACh, 3F901ACCh, 89DD1DC3h, 0BFDC7BC8h,	2DF5D964h
		dd 3F5387BBh, 0E91AA8D9h, 0BFB0DEA4h, 14AE794Ah, 3F8B33F0h
		dd 0B39272F9h, 0BFC3A6F6h, 8C42BE15h, 3F636D2Ch, 75D8CE33h
		dd 0BF9FBEA5h, 37A1CDE8h, 0BFB86B4Eh, 309BA7F2h, 3FABE35Bh
		dd 0C7BB950Bh, 0BFDC8F84h, 0FF447D12h, 0BF9EC448h, 0B79D4F35h
		dd 3FB3F057h, 246ECE02h, 0BFAD8E69h, 44807FADh,	3FC27EA3h
		dd 0E0FA17Dh, 0BFAD3FD9h, 51F51D06h, 3FAB55F5h,	0C56F9A75h
		dd 0BFA23305h, 9DCB1AFFh, 0BFADEC56h, 67315B37h, 0BFB3874Dh
		dd 0BA4F9DEDh, 3FB1B102h, 0E6720BBFh, 0BF7931ADh, 0E3282D2h
		dd 0BFB01B1Eh, 0AB8480F0h, 0BFC2EE86h, 0DB702239h, 3FC205F7h
		dd 24F481F4h, 0BF8D32AEh, 9ECCECD1h, 0BFC10BA4h, 300D6040h
		dd 0BFD0D50Bh, 0CE99E581h, 3FC4ABA0h, 0F8D3DF30h, 0BF774191h
		dd 67576832h, 0BFB16610h, 0F991B788h, 0BFD292E2h, 0F2A381CBh
		dd 3FB523EFh, 3736DA5Dh, 0BFB7F453h, 6CC6D17Ah,	0BFB98FE8h
		dd 0F0DE09C1h, 0BF734B3Dh, 5609C043h, 0BFC075E2h, 0FFF2A834h
		dd 0BF75E789h, 5DC51288h, 0BFD0F17Ah, 0ECCF2F9Eh, 3F994F95h
		dd 532865F7h, 0BFC0A918h, 7F72DE18h, 3FB20BF4h,	17506430h
		dd 3FD53564h, 0C813657Ch, 0BFD85FB6h, 7B1740Eh,	0BF8959EFh
		dd 7FE22C4Fh, 3F959D53h, 3F3E5601h, 0BF9B68B6h,	5C89AA38h
		dd 3F928DCEh, 7B96DA3Bh, 0BF9AAC1Bh, 0B90D568Ah, 3F97F166h
		dd 7CB6C917h, 3F8A3934h, 0F3F098E6h, 3FA02579h,	8ED3A5C4h
		dd 3FB090BEh, 5DC736A8h, 0BF85E2C4h, 9F5DE121h,	3F801927h
		dd 0D1FF90A4h, 3FA54A4Ah, 0EC548CCCh, 3FBFE14Dh, 195D77Ch
		dd 0BF9A3857h, 826A67F9h, 3F99A374h, 0C377AC5Bh, 3FB5D65Ch
		dd 918E875Fh, 3FC7DBB1h, 0FD385FE2h, 0BF981859h, 4E311660h
		dd 0BFA9E2CBh, 0BC2AF104h, 3FB47D24h, 0D5E1ABA9h, 3FBDF887h
		dd 81C2050Ah, 0BFEC74D8h, 353D18B6h, 0BFE06F95h, 0DC362468h
		dd 3FBEA491h, 9BCF220h,	3F788213h, 0F8AA7BA6h, 0BF9D7AD3h
		dd 30D7814Ch, 3F6AB307h, 6D7A584Dh, 0BFB0ADFDh,	4CD86518h
		dd 3F663257h, 71F61005h, 0BFB39186h, 6918D9F4h,	3F97DDE1h
		dd 8F6F09A8h, 0BF88F645h, 0F84BD8ADh, 0BFCDCD9Ah, 0EA81ADD0h
		dd 0BFA68C47h, 6EC3A308h, 0BFBDE7FEh, 2229B289h, 0BFB21D9Bh
		dd 0EA16F7Eh, 0BFCA578Dh, 565D8E35h, 0BFAC0A79h, 6B31C212h
		dd 0BFB9F851h, 0AD00F9B5h, 0BFB15B2Dh, 5A6447EFh, 3FA87D08h
		dd 51966D0Ah, 3FA85E77h, 9485C4FCh, 3F96A9F6h, 4A25AFAh
		dd 3F838018h, 0F93D0F50h, 3FB4316Fh, 93D5763Eh,	3FBC6F68h
		dd 943DA486h, 3FAA953Fh, 0EFF9EEF3h, 3F8DAA35h,	48080672h
		dd 3FC4ACC6h, 0EE02EDBh, 3FC0221Dh, 0A52C1778h,	3F788010h
		dd 87031FC8h, 3FB11355h, 0B457E4AEh, 3FB299FEh,	1CFE83F5h
		dd 3F9683C7h, 1C53E23Fh, 3FBF8528h, 61065A62h, 3FA77678h
		dd 8DC51372h, 0BFA1F882h, 0D16CFA6h, 0BFD084F0h, 0C1974C9h
		dd 0BFB14EF2h, 0BDFE52CDh, 0BFE09A04h, 0B0A7A6F3h, 0BFBF6B1Eh
		dd 0DBFDD45Ch, 0BFB48762h, 0C57E5DD9h, 0BFB6D922h, 1BF4C425h
		dd 3FCF55A5h, 578CC5C7h, 3FC3045Eh, 0B4493BD1h,	3FE2467Fh
		dd 6B69676Fh, 0BF9458E9h, 5C52EACEh, 3F89CF54h,	6A89E78Ah
		dd 0BFA02D1Dh, 0A2E284C1h, 3FA03EEDh, 6D053F8Bh, 0BF8281EEh
		dd 4217ED5Dh, 3FA2FCAFh, 1745F122h, 3FA547D5h, 0EE230997h
		dd 0BF9B61D7h, 0FE5BB9DCh, 0BF9B5BEFh, 0FC69589Ch, 0BFA2A161h
		dd 4A7F3DFAh, 0BF9D7634h, 5AF1BC1h, 3F656C61h, 17DDAAF4h
		dd 0BFA47932h, 690B1E80h, 0BFADF198h, 8A8FCB04h, 0BFA5B909h
		dd 0DCEF1A28h, 3F949372h, 2D3AB11Ah, 0BFA8B0E9h, 0C320BF13h
		dd 0BF811EC6h, 5B8D6C78h, 0BF9BA4ADh, 7B80F96Ah, 0BF58A8C0h
		dd 2C4E8A6Dh, 0BFA6CCE4h, 0AAC3B4AFh, 0BF96BFA7h, 0B6484A15h
		dd 0BFA35099h, 0E3FE6C3Dh, 0BFA141FBh, 0A3B5B36Dh, 0BF8B4711h
		dd 0E616645Ah, 0BFB493C9h, 28A5C71Bh, 0BF8538A7h, 721ABC62h
		dd 0BFC82CC1h, 0A36E02BAh, 0BF8B4EF2h, 76E8B1B6h, 3FEBC473h
		dd 27E9150Ch, 0BF90888Dh, 4AA913D3h, 3FF0110Bh,	0AF7A4E8Ch
		dd 3FEB84EBh, 392428FCh, 3F922167h, 0B4097AC4h,	0BF965754h
		dd 0F232BE73h, 3FA1679Bh, 698216A0h, 0BFA064F6h, 464B4417h
		dd 3F7FABE6h, 674758E1h, 0BF93DFCDh, 676D2583h,	0BF9FC337h
		dd 0DFD06B9Ch, 0BFA9C283h
		dd 284CCBE5h, 3F84DCDEh, 9690DBF0h, 0BF8CD421h,	3B9B79A7h
		dd 0BFB02DC6h, 87FB3A0Eh, 3F977461h, 673C6101h,	3F98E705h
		dd 0E7E12451h, 0BF959428h, 8B510E1h, 0BFC268F2h, 0CD1B85B9h
		dd 3FA5C51Dh, 0A9679CD5h, 3F94ED30h, 282A106Eh,	0BF916559h
		dd 5F20297h, 3FE36014h,	6AC2914Dh, 0BF4356C8h, 73FDD429h
		dd 3F8C648Ah, 0E62C4C06h, 0BF9F07F4h, 5CDFDDDBh, 3FF4133Ch
		dd 0D3DD5EC8h, 3FA0900Fh, 65ECB055h, 3F9F4B2Ah,	0A21763FAh
		dd 0BF7E5F37h, 0F2D4FDDCh, 3FB19B55h, 8E5E507Bh, 0BF868A7Ah
		dd 379CBBBFh, 3F806C7Ah, 33CF0612h, 3F4F8E5Ah, 1A1476D8h
		dd 0BF9CD930h, 2BE01B36h, 3F991204h, 2082B2AFh,	0BFE99B33h
		dd 0B624D9AAh, 3F8EFF7Ah, 0FC8BFBF2h, 0BFA1838Eh, 85F051CEh
		dd 3F9B2135h, 0E0477872h, 0BFAD38C2h, 0AD27540Ah, 0BF897A13h
		dd 0BB4E79A3h, 0BFC8A802h, 0F76AD10Eh, 0BF6F5062h, 339ACCDEh
		dd 0BFF2674Dh, 0A3448Fh, 3F73EBEFh, 0EEE63856h,	3F97910Bh
		dd 0C424E958h, 3FA2F542h, 0AE0AEA9Ah, 0BFAD9725h, 4B16E4BFh
		dd 3F925BF2h, 79C01659h, 3FAB0D3Ch, 9568FCA3h, 3FB4C396h
		dd 8356E44Dh, 0BFBA1803h, 755BD361h, 3FA6906Bh,	0CBEE15F4h
		dd 3F83A72Ah, 366347E2h, 3FB85B5Fh, 6285E5Fh, 0BFBCEBC3h
		dd 9CC1FA41h, 3FC277E6h, 6A4173B5h, 3FA0EB2Eh, 5AB923E5h
		dd 0BFDAC729h, 0E00638CCh, 0BFA94193h, 8B2F9A17h, 0BF9C5900h
		dd 0D82F95E1h, 3FA28C19h, 0DC96467Fh, 0BFAAD055h, 0CE60E7A4h
		dd 3FB0C1EBh, 72A4844Dh, 0BFA55B92h, 0D891B49Dh, 3FA9FD4Ah
		dd 29B45178h, 0BF9EF34Eh, 0DB0D05E5h, 3F77419Ch, 0AC3082F4h
		dd 3FE5A9CFh, 2A463B4h,	0BFB29F3Fh, 61B8FA91h, 0BF859700h
		dd 0A79F9ED8h, 0BFC0DAC3h, 0C4F04AEEh, 0BFA5BFFBh, 0C1A775F3h
		dd 0BFB7EF08h, 0E6620329h, 0BF88B9A7h, 3D8AC0F0h, 3FD0D958h
		dd 24949E0h, 0BFA3516Bh, 3D09E944h, 3F58534Fh, 77681280h
		dd 0BF897DE1h, 3A6C2A2Ch, 3FC43164h, 1182C747h,	3F92179Eh
		dd 0DB3B45DCh, 3F78CDB8h, 32E886B8h, 0BFA79A9Ah, 96DCBF9Ch
		dd 3FD80663h, 0BABD6C9Ch, 3FA676CAh, 8F8B32Ah, 3FB33F25h
		dd 4C3C22C5h, 3FA293D4h, 0D86AA5Fh, 3FCCDF9Dh, 7E853ADCh
		dd 3F95A70Ch, 0C5FAEB02h, 0BF98F747h, 66B8C00Bh, 3F152673h
		dd 9445F12Bh, 3F90E4E2h, 665AC661h, 3FD59ADCh, 49E36BE2h
		dd 3FB64872h, 5B08177Ah, 0BF95C4B4h, 95EB9125h,	3FC6614Ch
		dd 7EFE3F53h, 0BFA712EFh, 3FF11226h, 3FBA8D98h,	8E6FA9B4h
		dd 0BFB21C48h, 0E83308A8h, 3FC14EC7h, 6A2E4990h, 0BFBF1151h
		dd 8A2AC4C1h, 0BFF6920Ah, 0D8DD89F1h, 0BFBF2AFBh, 0BB2684D8h
		dd 0BF8DF147h, 1CA8E78Bh, 0BFCF2F5Bh, 5502D096h, 0BF7C2B84h
		dd 0FA6D3320h, 0BFC7EF5Fh, 7A896D22h, 0BFA39057h, 8827C77Bh
		dd 0BFBC648Ch, 67823701h, 0BFAEBFE3h, 6200199Ch, 0BFA67125h
		dd 6F7B0AB3h, 0BFB00801h, 3EAF9311h, 0BFC15A3Eh, 13333084h
		dd 0BFC79105h, 0E34B24F2h, 0BFB3D605h, 447CB01Ch, 0BFBE2763h
		dd 0C3C8FC7Dh, 0BFCFB054h, 0D5ED9354h, 0BFD6133Fh, 6E3B5B87h
		dd 0BFBCE9D6h, 5582B045h, 0BFB11497h, 62850BF0h, 0BFBB2364h
		dd 3D8E6EE7h, 0BFC44FCEh, 0D76EF7DAh, 0BFC40CA0h, 4B495026h
		dd 0BFCA303Fh, 1DA09651h, 0BFA20BBEh, 0D786925Eh, 3FE085ECh
		dd 0BD7C7692h, 0BFB084D4h, 0A956B547h, 0BFAB4FF7h, 3638D41Eh
		dd 0BFB925C0h, 0D58F80ACh, 0BFB52124h, 767A2117h, 3F756357h
		dd 0F4237E7Dh, 0BFB1E1D9h, 211D951h, 3F9E1B6Ah,	6723F006h
		dd 0BFBACA73h, 21B2ECEBh, 0BFD2B999h, 0D5350E90h, 0BFB7EA9Ch
		dd 19CFB157h, 3F78FA1Eh, 0BF09F120h, 0BFC6DB4Ch, 6750A235h
		dd 3F9884CCh, 9AB7611Ah, 0BFBCA20Fh, 0CB046901h, 3FAB1EDCh
		dd 2CAA5967h, 0BF962807h, 0CEE45DB0h, 3FB51955h, 0A8C60E03h
		dd 3FA84CC2h, 79D151CDh, 0BFB6F700h, 3F837A22h,	0BF8489F4h
		dd 0BC493D6Fh, 3F7466CCh, 0F8B6CF93h, 3FB979EEh, 972914F2h
		dd 0BFC4B876h, 0E1D9D68Bh, 0BF812879h, 6CEA5A4Fh, 3F7C3985h
		dd 3C01670Dh, 3FC7B2F0h, 185E880Fh, 0BFB94591h,	0A1B4D40Dh
		dd 0BFB86720h, 0A04C083Fh, 0BFAEF677h, 54B9EB64h, 3FC9DB40h
		dd 3A535377h, 3FD31D9Bh, 1602ED90h, 0BFE33872h,	0BA21FF3h
		dd 0BFC8D6A3h, 0C120FEC5h, 3FA3B084h, 416B14F7h, 0BF314B3Eh
		dd 0F047E90Ch, 3FAE972Dh, 0D2711085h, 0BF80F0F5h, 0BFF051A4h
		dd 3F993AAEh, 769797FBh, 3F8BF565h, 25102C99h, 0BF988236h
		dd 0E4C85412h, 3FA2C33Ah, 0EB4B583Dh, 0BFDFD2B6h, 0F238AB0Bh
		dd 3F9BA9E9h, 0A02964E4h, 3FADB646h, 8C7ED6E5h,	3FAD3A0Fh
		dd 0A30D76E0h, 3FB8CB93h, 4B56002Ah, 3F76D8CCh,	0D641AEF3h
		dd 3FA79044h, 37B15B22h, 0BF84E524h, 38CF73E2h,	3FB772BAh
		dd 35691EE6h, 3FAAE62Bh, 627E7BDBh, 3F637461h, 7EED1391h
		dd 0BF8524C6h, 25A368F0h, 0BFB4A30Ah, 0D31E8053h, 3FBC8289h
		dd 396ECF62h, 3F91806Dh, 0F1770F99h, 0BF7A37CFh, 34DBE47Dh
		dd 0BFC8B2E5h, 0DD1975C2h, 3FCA36CEh, 1022C4DCh, 3FA9DDF3h
		dd 0A289560Ch, 3FC0960Fh, 9DC33C73h, 0BFC8A3F1h, 9E910DCBh
		dd 0BFE67DC1h, 87433728h, 3FC638ADh, 0B080A046h, 3FCB7613h
		dd 0F277E440h, 0BFC710E4h, 0D2A799DBh, 0BFAE8941h, 586CBB32h
		dd 0BFA6FD72h, 4CFA734Eh, 0BFC068B4h, 0D96E2409h, 0BFB61D3Fh
		dd 4B2DC02h, 0BFC3C33Bh, 48476EF1h, 0BFA84F2Ch,	0FA0BE9AEh
		dd 0BFCB9536h, 0BB0A2AC0h, 0BFCAD676h, 9E3E5849h, 0BFF5C90Dh
		dd 0A1EF8A48h, 3F82270Bh, 7498DFF0h, 3F858760h,	0DEE299D6h
		dd 3F9186C6h, 78C0DCF2h, 3F92C27Bh, 72775A37h, 3F99AA3Fh
		dd 0DCE419BAh, 0BF7E30C2h, 811A3706h, 3FA63900h, 849ADDBBh
		dd 0BF983E00h, 51227BFh, 0BF63462Eh, 99FF7BADh,	3FB43D5Eh
		dd 3BB8F007h, 0BF50FA72h, 9EB886E9h, 0BF611447h, 0C800EEA1h
		dd 0BF72E6C0h, 0FCA6E325h, 3FC5D717h, 600DF69Dh, 0BF70671Ah
		dd 8FF183FAh, 0BF81EBDBh, 357B2131h, 0BF88B8A0h, 179E03DEh
		dd 0BFF1AC2Eh, 45B4E714h, 0BF77425Bh, 0A409890Bh, 0BF8E201Ah
		dd 0B1C3B9D7h, 0BF9584B0h, 0CFFC3D61h, 0BFFFFAB7h, 0E2ED70EEh
		dd 3F83AD6Fh, 0E119EFA7h, 0BF8D8565h, 0C996DEBAh, 3F878A33h
		dd 48A5128Bh, 3F3B632Eh, 120EB0E2h, 3F94D8E1h, 6EC9BD03h
		dd 0BF67963Eh, 4CDD01D5h, 3F9B9848h, 0F0C1792Eh, 0BF746070h
		dd 0A31B3BE5h, 3F9F68E7h, 0D15364C8h, 3F9E6AB0h, 561A54ACh
		dd 3FC45B6Ah, 0A2EADDD2h, 3FB96DDFh, 7917E6DCh,	3F9ED4B7h
		dd 32B6E732h, 3FCBA1CFh, 48B0DE05h, 3FA4C16Ch, 6A39CAC1h
		dd 3FB961D3h, 62CC3D8Dh, 3FA1856Bh, 0DD714B3Dh,	0BFA1DB98h
		dd 127C4E1Ch, 3FADB1B9h, 6C5BC920h, 0BF9EDA9Dh,	0E4041C11h
		dd 3FAFC569h, 0C061F2D0h, 3FAEB202h, 0C40E0693h, 0BF9066BCh
		dd 0F1A0960Ch, 0BFAEB0D3h, 3A096FCAh, 3FBB11EBh, 0DDE805D1h
		dd 3FBD3782h, 0CD6528EBh, 0BFA41B6Bh, 0E8609298h, 0BFCAAE87h
		dd 13A8F02Dh, 3FA2D5E0h, 95FBCD96h, 3FCBA3BAh, 0A91E633Ch
		dd 3F891070h, 6347157Fh, 0BFE52946h, 54DB5E13h,	3FA548A8h
		dd 855C105Bh, 0BFDCF24Dh, 62DD0A2Ah, 3FB42B51h,	0EF425A05h
		dd 0BF88A1B6h, 0A6511683h, 3FAC3414h, 1D336D41h, 0BF9185A8h
		dd 0E83BDBD8h, 3FBD1FC8h, 8603C04Fh, 3FB4BF0Ch,	0FA336996h
		dd 3FBAF605h, 0A3C4F8FBh, 3FC28D76h, 758477E7h,	3F921DDFh
		dd 3805C4D2h, 3FEA778Eh
		dd 6F300B97h, 0BFBF61D9h, 515C4E55h, 3F90EBD4h,	8451AF1Bh
		dd 0BFD0B5E5h, 0F3D15C03h, 3FA8F18Ch, 5BC21A6Bh, 0BFB48B79h
		dd 13862C52h, 0BFB3C431h, 0C728F906h, 3FC82FA9h, 0ED8FF1B7h
		dd 0BFC2B230h, 95A59336h, 3F814614h, 440F52ACh,	3FC24B8Bh
		dd 0F715991Eh, 3FB27AC9h, 0F409B3A6h, 3FB566F0h, 4D3DF0BEh
		dd 3F974282h, 0E0C13F65h, 3FD56B85h, 0E916E7E1h, 3FC629AEh
		dd 912014D4h, 3FC9761Dh, 493F2CD2h, 3FB43F48h, 0F470485h
		dd 3FC0EF76h, 85895D89h, 3FC895B5h, 6EB9C903h, 3FC1ABBFh
		dd 62C2DCBh, 3F7D8CC3h,	0C67E6E51h, 3FA5ACE6h, 94128965h
		dd 3FC3C545h, 6118B104h, 3FA6B38Ch, 21DD795h, 3F7E1A07h
		dd 5A69EFF2h, 3FABADB3h, 67032BC3h, 3F8DEA73h, 0E2EECFD8h
		dd 3FBD8BB9h, 62B3D6BCh, 0BF9DD769h, 0FC5C26DEh, 3FAEFB2Ah
		dd 0D4217D62h, 0BFB1D1D4h, 0C4238811h, 3FB747D3h, 8DFFF2BAh
		dd 3FAB1629h, 0ADE9E8D6h, 3FD8143Ah, 0CEC8FA23h, 3FCB5208h
		dd 36FF5E07h, 3FE9AF72h, 0CE864351h, 3FE07A19h,	0A57FAFC1h
		dd 0BFC10E02h, 0BE817F31h, 0BFE639B4h, 0CBFC0031h, 0BFEA307Dh
		dd 7A5F4C00h, 0BFD8795Bh, 967CB7F1h, 0BFEA0EBBh, 0DB31B5C6h
		dd 3FEAE438h, 8A5E76C1h, 0BFEAB7A6h, 0DD8992Fh,	0BFD310B8h
		dd 1F6484D1h, 3FF0C92Fh, 477CFC9Eh, 0BFF1A4D9h,	69D3AA4Eh
		dd 0BFD9B857h, 4A378245h, 3FC2DBBBh, 0A7BB8DDh,	0BFE10C69h
		dd 619869CEh, 3FE51C6Ah, 76679DCFh, 3FD56E21h, 0D1B5FFCCh
		dd 0BFD0BD4Fh, 0F5392B79h, 0BFE5EECAh, 0D62FE11Eh, 3FA5D3F8h
		dd 0A1753964h, 3FE55296h, 2BCC6DC9h, 0BFBD8BAEh, 0BE7D91F1h
		dd 3FD360A3h, 0CA5D142Ch, 0BFC7A50Ch, 8BE2CFDh,	0BFD05286h
		dd 685CCF14h, 3FE5DDB7h, 53335273h, 3FDE402Ah, 1D4D2AE2h
		dd 0BFD2DB1Eh, 751C62CAh, 0BFC6F3E7h, 0C74F1C15h, 3FF00708h
		dd 0C13A1009h, 3FBEBF70h, 0EC68B8A3h, 3FD3C39Fh, 47E9401h
		dd 0BFCE8A64h, 3CAB4460h, 3FC15606h, 73F49D82h,	3FE3F0E2h
		dd 85B314DFh, 3FC5E3DDh, 0F8C4D6F9h, 3FD5062Eh,	4FB3D77Dh
		dd 0BFC829B8h, 0E2A165FDh, 3FF0A5DCh, 3DF0F9AAh, 0BFC2A837h
		dd 6921C2BDh, 0BFE326B3h, 282B6AE0h, 3F9B6B51h,	38A5B174h
		dd 3FF194A1h, 15E37F50h, 0BFCC2DC3h, 934839BCh,	0BFD97A88h
		dd 0BF4F2E5Bh, 3FAB1D90h, 0E1DB4B16h, 3FE8B0FFh, 0D8E5F3A3h
		dd 0BFE56771h, 0C3776593h, 0BFD2BD25h, 33FF0EF0h, 0BFEDC3EAh
		dd 35FE2643h, 3FF39B73h, 0FFFBB543h, 0BFC6A463h, 0F9790AA5h
		dd 0BFF778CDh, 202E1388h, 3FD15271h, 39B40AEh, 0BFCAC94Ch
		dd 8B98B08h, 0BFD97F7Ah, 283DA7F6h, 0BFD66060h,	15E7CD9Fh
		dd 3FB367CCh, 0DE07309Bh, 0BFD57192h, 0FCA13B3Bh, 3FB08787h
		dd 0F7BD072Dh, 3FBFA059h, 885AB111h, 3FF592A7h,	0D4D6144Ch
		dd 0BFE8AC50h, 94068442h, 3FE92576h, 0F7DEE313h, 3FB9D02Ah
		dd 1D055543h, 3FE660E1h, 0DC4D8204h, 4001522Bh,	3807D849h
		dd 3FEC8DADh, 0EA5E6C65h, 3FF0AE4Dh, 8CCE146Eh,	0BFC2E19Bh
		dd 54C31924h, 0C004F6D2h, 0F8490C1Bh, 0BFACCC27h, 171519E5h
		dd 0BF991B74h, 0F7A5B648h, 3FE31683h, 25B80471h, 0BFE9756Fh
		dd 199A5EEFh, 3FBCC7D0h, 36353E0Ch, 3FE0FD03h, 7FD2070h
		dd 0BFD74757h, 495EC890h, 0BFE9BD5Fh, 0B97113B6h, 3FDFAF97h
		dd 9D9457F1h, 3FB2141Ah, 0C681FACDh, 3FE4E109h,	6381DC3Ah
		dd 3FD877C6h, 195E17A0h, 3FE33593h, 0AF4CB833h,	3FAFEF4Bh
		dd 0B9E042EBh, 0BFC4B64Eh, 0D5241EECh, 0BFDCE93Eh, 0FE9CF00Ch
		dd 0BFE606C8h, 0BA3CF701h, 0C003A7D8h, 2A048E1Dh, 3FD41F75h
		dd 0EA5CAA7Ch, 0BFD122E7h, 0F88E98C3h, 3FE1F80Dh, 9B7AB57Eh
		dd 3FE77891h, 32C0E98Ah, 3FDA7C29h, 75F81723h, 3FD690ECh
		dd 0E07B2E31h, 0BFD7D00Dh, 0FBA7D4E3h, 3FB4B914h, 57BB5A62h
		dd 3FDD00ABh, 813AC798h, 3FF03F79h, 0EDC88EEFh,	3FDD5057h
		dd 0AF28E0DFh, 3FE6890Fh, 0FFB6904h, 3FB27114h,	28E693B1h
		dd 3FF32EBFh, 9C5F894Ah, 0BFDA5B84h, 9D3F4B2Bh,	3FDC6B29h
		dd 7CF8B38Bh, 0BFE4061Dh, 6585DFDEh, 0BFE75370h, 331C1552h
		dd 0BFD0F154h, 836C814Dh, 3FE69FFDh, 700A0FB1h,	0BFDD0616h
		dd 0DEAC1F03h, 0BFEB026Ah, 0CEBCE481h, 0BFF1D3CDh, 96798037h
		dd 0BFC19C1Dh, 3FE34B4Eh, 3FF3F59Eh, 0ED357A9Dh, 3FE205CDh
		dd 7C633E79h, 0BFD009ECh, 0F916F24h, 0BFD91538h, 0C501269h
		dd 3FEB8E84h, 0FFC98F4Fh, 0BFCED378h, 1D1BF065h, 0BFCCC864h
		dd 0BAE4193Bh, 3FE08FA9h, 0FD59116Bh, 0BFED56A1h, 96D11C83h
		dd 0BFD39B70h, 42D7FBFFh, 0BFE29B2Ch, 961ADA12h, 0BFA93554h
		dd 6553C3BBh, 3FD0D2FAh, 584624A1h, 0BFCD7958h,	3203153h
		dd 0BFE08A9Eh, 8F92DE97h, 0BFB32D86h, 5C6E5C30h, 3FD71385h
		dd 8DC36138h, 3FD9C5A8h, 0FB4AF952h, 0BFEE6BB9h, 5BE1CDBAh
		dd 3FDAF875h, 1B0CD6BEh, 0BFCF1251h, 8692786Eh,	0BFCCD052h
		dd 349B3751h, 0BFE7D1B9h, 6B2BC841h, 0BFDF90A8h, 6279E664h
		dd 3FCA737Eh, 0E55D8B2Bh, 3FE59149h, 0F48ED797h, 3FEFE51Bh
		dd 0EE72ED7Bh, 3F9DEB10h, 0E708898Ah, 3FD74AB2h, 2212AEh
		dd 3FEEA7D6h, 5013064Ch, 3FE4B60Ah, 1EFED8F2h, 0BFD730F9h
		dd 45B49253h, 3FE10C7Eh, 0F54223E8h, 0BFF3064Dh, 0A5CDED05h
		dd 0BFDE4906h, 0E1F8F886h, 3FABDBA3h, 0CC9D30D5h, 3FD67058h
		dd 0FDDC1C57h, 0BFE3F158h, 2E6C980Fh, 0BFED9F3Ah, 9EACAF8Bh
		dd 3FE22E56h, 2FF21A37h, 3FBD0C0Eh, 51DD9769h, 3FCAF1EFh
		dd 3EB5B835h, 0BFCDB1FEh, 5D19BF13h, 3FCCEA13h,	80AFE364h
		dd 0BFEF9B2Eh, 4115D953h, 3FD4347Eh, 5CC5F8C8h,	3FDCBD0Eh
		dd 9DDF4B29h, 3FED6D45h, 4D09AAB9h, 0BFD0CF71h,	4A659771h
		dd 0BFD990CAh, 3098901Ah, 0BFC2ADC2h, 0B1F409F4h, 0BFD94DE5h
		dd 4F61D563h, 3FF3511Ch, 41D5423Dh, 3FCFF75Dh, 0A84F25C7h
		dd 3FDA76E9h, 769FA71Ch, 0BFE60B9Dh, 2A652EECh,	0BFE325D7h
		dd 0A0B1B355h, 0BFF4B8E8h, 0D0E000F3h, 0BFC4A0E9h, 317BC183h
		dd 0BFD260F8h, 58FFDDA3h, 0BFF01D6Ch, 0B3108F09h, 3FB070DDh
		dd 6A04ABADh, 3FD429C2h, 641EB409h, 0BFDA2A06h,	0F151C1C4h
		dd 0BFEB4605h, 0FBF0FC7Dh, 0BFE35F46h, 6E4C2E94h, 3FEFCCB4h
		dd 80B32321h, 3FB43CACh, 650E5715h, 3FE8C809h, 0FB915A25h
		dd 3FC08CCBh, 0E1046C23h, 3FB2B42Eh, 413B48ABh,	3FE34C10h
		dd 9BF67AD6h, 0BFE78D1Ch, 7A58587h, 3FEBB677h, 0D2FDA600h
		dd 0BFE0C57Ah, 0FD475DFCh, 3FE49140h, 0FE507ABh, 0BFE69956h
		dd 0F7A85DF2h, 3FE2A357h, 1EEDA4D3h, 3FEF76FFh,	771BC9E9h
		dd 3FC79119h, 17E608B6h, 0BFD88006h, 0F62F6C5Bh, 0BFC48AF8h
		dd 10CC414Ah, 3FB17687h, 0D60ABCBAh, 0BFC2B611h, 0A5DD8BBBh
		dd 3FE3031Fh, 54544087h, 3FD58428h, 5D17B2FCh, 3FE6DE89h
		dd 0DF1598D0h, 3FE2A3EFh, 891BBDB7h, 3FF0ECC4h,	2C015CBDh
		dd 0BFE84FEFh, 2B366A96h, 3FD7FB7Bh, 70ECA6Ch, 3FCEEE80h
		dd 0FDCD0A2Dh, 3FC12146h, 41E7CBE8h, 0BFE3FF30h, 0E402EADDh
		dd 3FBE8A8Ah, 376291C8h, 0BFE4B934h, 0C68E7F2Bh, 0BFC9E6C8h
		dd 691F840Ah, 0BFAB5319h, 0D8B5DA70h, 0BFD5F7DDh, 454AD2EEh
		dd 3FBA6678h, 0F020B5B4h, 0BFE12653h, 0C055E3B1h, 3FDBFD28h
		dd 0D42DEC1Ah, 3FF16320h, 30DA51FCh, 0BFE473EDh, 23FD40h
		dd 3FDE7AEDh, 632F7FCEh, 0BFCDEC13h, 0AF8ACDE2h, 3FC746A4h
		dd 82DDBFA7h, 0BFED21C2h
		dd 5D37825h, 3FD412D7h,	0EF67FF8Ch, 0BFEE97E7h,	0A0BCF82Ah
		dd 0BFF53E83h, 2BA3A119h, 0BFD5B284h, 16782C1Ah, 0BFECFF88h
		dd 1016211h, 3FED6916h,	0DC644F65h, 3FF1701Ch, 8F752FEDh
		dd 0BFE5F52Ch, 0AC830B1Dh, 3FE321F0h, 78E67900h, 0BFBC05C4h
		dd 72CA78FDh, 0BF9D10BBh, 0F3B2926h, 3FCF8F14h,	18F71D53h
		dd 0BFD4BE7Ah, 6C7CA83Eh, 0BFE1503Bh, 64B1EF9Dh, 3FC42E62h
		dd 5DB3C54Ch, 0BFE81B35h, 0F88D36F0h, 0BFE883DAh, 2959B6A5h
		dd 0BFF22E9Eh, 0BDC5C73Bh, 0BFE18924h, 0E2746FDh, 0BFC07FBCh
		dd 9B7BB6B6h, 3FE43425h, 0C08DB08Eh, 0BFB53014h, 0F3BA1DBFh
		dd 0BFC46FE8h, 0B4A581F3h, 0BFE62BEDh, 6C867AAFh, 3FF93139h
		dd 43B3C21Ch, 3FDE5B87h, 34CA32D9h, 3FD53035h, 394C324Fh
		dd 0BFE4BCA5h, 0A5FDF734h, 3FF518C5h, 2D7B07BBh, 0BFE1942Ch
		dd 7E3B6393h, 0BFED8CC3h, 29DB1317h, 3FF10EACh,	750468E2h
		dd 0BFDFCE9Fh, 0BB8FBD5Ch, 3FDA5911h, 22821A45h, 0BFB8859Ah
		dd 8A3ECBE6h, 3FF7B70Eh, 93E401A5h, 0BFE6D9FFh,	97F80299h
		dd 3FB305B1h, 90FD899h,	0BFEBA3DFh, 8DB49ACh, 0BFC78003h
		dd 52374247h, 3FBD8DBDh, 0A8F50E95h, 3FCEBF2Ah,	0A46163FEh
		dd 0BF8FA652h, 60948A19h, 3FE69CDDh, 26BE38CAh,	3FF048F5h
		dd 0E3BC6D06h, 0BFF0C4F4h, 6A9BCE50h, 3FD24F24h, 78176964h
		dd 0BFD18214h, 67F1056Eh, 0BFE836BBh, 0F1BAC467h, 0BFE0AC5Dh
		dd 24C2E0CEh, 0BFD070F2h, 0C24466B5h, 0BFD4E09Ah, 6210CF0Ah
		dd 0BFE2D065h, 842BA7AEh, 0BFCA664Dh, 105B52B9h, 3FBD1C76h
		dd 8CC63DA4h, 3FC44232h, 36E0B243h, 3FF631F6h, 341B93F5h
		dd 3FB53D18h, 37996A0Dh, 3FB75810h, 9B548973h, 3FEBE37Ah
		dd 4FA7EB32h, 3FF0A230h, 43DBACCDh, 0BFB482AEh,	88BDA025h
		dd 0BFE07A9Fh, 0D190FE1Eh, 0BFF02C51h, 0FA966390h, 0BFEDBD15h
		dd 0E1170628h, 0BFE3A37Eh, 0C72A2E6Dh, 0BFB254B7h, 6AC66275h
		dd 3FE10F9Bh, 0B2EE6F04h, 3FE2F590h, 79B55ADFh,	3FD6D592h
		dd 7DEF076Fh, 3FD3BA71h, 565DFA59h, 3FBB21F8h, 633A8CDBh
		dd 0BFDAEB35h, 8ED14585h, 0BFD2878Fh, 7498162Ah, 400CB572h
		dd 3327DECEh, 3FE38C49h, 2B7FE214h, 0BFD7D25Ch,	43B2AE70h
		dd 3FEB53F9h, 87EE5C72h, 0BFF31F9Dh, 376EC6B1h,	3FCA6F3Eh
		dd 0F25D58EFh, 0BFD25C1Fh, 0E777BEDBh, 0BFE08D8Dh, 2F0DFEEFh
		dd 0BFEAED05h, 0D340E4D9h, 0BFF95764h, 0D1F7BA78h, 0BFE5A845h
		dd 0A64B01D8h, 3FABB478h, 0D3D4F834h, 3FB5997Dh, 0BFC5CC34h
		dd 0BFD6D94Bh, 10202EB6h, 3F98BDABh, 1C77E76Ch,	0BFE2AC2Dh
		dd 0D5900647h, 0BFE243F9h, 0EC61A848h, 3FC76729h, 1773651h
		dd 0BFC7E9D8h, 0FD85A73Ah, 3FF0914Ch, 7ECC19C1h, 0BFE24A87h
		dd 8DC7A215h, 0BFE0A2F8h, 739BB2C8h, 0BFE1F097h, 0FB4E9659h
		dd 3FEB5FE3h, 0F1CE7A05h, 0BFE8C044h, 0D7350DA0h, 3FEAA6C6h
		dd 0C01BBE2Dh, 3FDEAA75h, 0DF5E9B5Fh, 3FE66889h, 63A791DAh
		dd 0BFF81310h, 98AC29A3h, 3FDC28FEh, 6C05FC14h,	3FE60EC7h
		dd 1B0BA544h, 0BFC03562h, 3A2CE9C9h, 0BFD22404h, 95BAEF3h
		dd 3FF3195Eh, 641602C9h, 0BFE6D7C0h, 0BD2E0FA4h, 3FCCD578h
		dd 7481FE1Dh, 0BFEB1C84h, 0E8ACB23Fh, 0BFE45B57h, 0E037BC7Bh
		dd 3FE8A759h, 28B5CF06h, 3FCE8A8Eh, 3A56BBBFh, 3FE9A9A6h
		dd 1CD686EDh, 0BFE6A929h, 0C70D03A0h, 3FD59E93h, 0CECC7CA8h
		dd 0BFE6828Fh, 0EE91969Eh, 3FF14FDAh, 6ED49850h, 3FDBAF79h
		dd 33FC7994h, 0BFE005ADh, 5ECA7A9Bh, 3FD59C33h,	1192FC89h
		dd 0BFDA7667h, 2C73916Ah, 0BFD73FD3h, 88CDD4D8h, 3FD734B5h
		dd 0A505CF7Ah, 0BFC64B3Ah, 1020395Eh, 0BFF06729h, 5A377929h
		dd 0BFCE9881h, 18B7EE9Bh, 0BFE6C035h, 14B0B0F6h, 3FE38422h
		dd 45DFFA3Dh, 3FED4D24h, 0B9ADD3A7h, 3FF2DD91h,	0FEBD5B61h
		dd 0BFE1DADDh, 215D637Ch, 0BFE4F5EDh, 30536272h, 3FE4414Ah
		dd 157FE328h, 0BFEF3044h, 0CBC21149h, 0BFC9D830h, 615BF641h
		dd 3FDDF0BAh, 0D3E201ACh, 0BFE65784h, 0B29E22A7h, 0BFD40F15h
		dd 187D5F98h, 3FA2E3CDh, 28EA889h, 0BFDC9F00h, 31DB6C47h
		dd 0BFA5D9D2h, 570DE092h, 0BFD9D41Dh, 0AB5C3714h, 0BFD5B1FDh
		dd 47B6B8B6h, 0BFEC91B7h, 50B76550h, 3FBD9B98h,	0B2A64422h
		dd 0BFDDEB2Ch, 1109ED2Fh, 0BFD5A655h, 0D085F50Ch, 3FE78643h
		dd 43FE4696h, 0BFEB64FEh, 58DC1721h, 0BF779617h, 4F6D3836h
		dd 4006A05Bh, 0D8E2BBB3h, 0BFE73246h, 4B93EE80h, 3FE65FDBh
		dd 1854B0B8h, 0BFEBAF31h, 3064F002h, 0BFF21152h, 0D96A8AF1h
		dd 3FEC3B71h, 0DBD7753Fh, 0BFD008E2h, 4AFCEA42h, 0BFE14AB6h
		dd 0C953292Fh, 0BFE831D6h, 0A2FBD403h, 3FDD4C64h, 0D813E5B8h
		dd 4000298Ch, 5394AAACh, 0BFD6120Fh, 59EFA460h,	3FEC96E9h
		dd 0BA9E735Bh, 0BFE4F922h, 9D8DA287h, 0BFE6E5ABh, 219628ECh
		dd 3FBF6E12h, 0F9CC8A50h, 0BFE249C5h, 0C0D66913h, 3FB73A31h
		dd 0D713E193h, 3FDD45ACh, 4F8FD5B8h, 3FD97F11h,	6BC7DA4Bh
		dd 3FDAFB95h, 21DBB744h, 0BFF2B2BAh, 0C3C0B44Bh, 3FF54A60h
		dd 8D6629AAh, 0BFEAB402h, 4AC28709h, 3FE61FACh,	0F53CD18Dh
		dd 3FF13ADAh, 84E74899h, 3FE12C32h, 0A639D6BDh,	3FC2299Bh
		dd 0F2BFEE9Dh, 3FDF0BE9h, 0DBF5A5D8h, 3FD32C19h, 8827AF69h
		dd 3FE20F88h, 0A6ADD0E3h, 3FD41BEBh, 54FE15F6h,	0BFE15A61h
		dd 2E2BE779h, 0BFE7C2FBh, 71520321h, 3FDC606Dh,	5967FB2Fh
		dd 3FC0BB68h, 0B5A5D564h, 0BFB038BFh, 3350CB0Fh, 0BF89DF4Bh
		dd 79B6F073h, 0BFE720E0h, 30AD4B56h, 0BFD8F52Eh, 876A0E2Fh
		dd 0BFE1B6E6h, 818EFBBEh, 3FD4254Ah, 0AD58536Bh, 3FF26874h
		dd 82FE0FF1h, 3FDFA693h, 9A186AF7h, 0BFEF8536h,	0D146AE02h
		dd 0BFD5801Ch, 41B1916Ah, 0BFD19A3Ah, 3B73B78Bh, 3FDD3451h
		dd 0EE791F3Ah, 3FBD5AA3h, 0A7AEE38Eh, 0BFDFCA89h, 9631514Eh
		dd 3F9BBC01h, 81306C08h, 0BFC14E14h, 27DAE93h, 0BFDD7919h
		dd 3E80B39h, 3FE1A3B6h,	5C417EE7h, 3FE08EE8h, 0D0E26B63h
		dd 0BFC342E3h, 0A5C3FD6Ch, 3FE3CD4Bh, 0C3B7FF3Dh, 0BFE45506h
		dd 92FA06EDh, 3FE1F25Dh, 505F8824h, 3FC6EDB5h, 0F34033Dh
		dd 0BFC5649Dh, 52C5F0BDh, 3FDEEB38h, 0BA56326Bh, 3FCE6EEDh
		dd 4F08AC8h, 3FD910B8h,	12EA8EA7h, 0BFD024C5h, 575576h
		dd 3FF178C9h, 0FE523096h, 0BFB25B72h, 6210208Ah, 0BFAD1D20h
		dd 0B41072F8h, 0BFF34F16h, 48B3F0C1h, 0BFDAB4E6h, 40206E6Ch
		dd 3FE74869h, 0C95B8D72h, 3FCE6666h, 0BC19051Fh, 0BFEBFFB1h
		dd 516406EBh, 0BFCDA46Dh, 9AE1CADCh, 0BFBE21F4h, 9EE78144h
		dd 0BFE6F14Ch, 497E621Ah, 3FE27B25h, 759CCB4Ch,	3FF34277h
		dd 0A7900FBEh, 0BFDAC7E8h, 5213C111h, 3FE5C412h, 0E50E7251h
		dd 0BFFA3963h, 7BEFC1BDh, 0BFE4F0C7h, 9A11E8D7h, 0BFC4CF2Eh
		dd 59244E1Ah, 3FBCDD2Dh, 8879DB00h, 3FEF7E4Eh, 544AEE5Bh
		dd 3FD228C8h, 7C7D9681h, 0BFC9298Ah, 3BD2525h, 0BFAF66CBh
		dd 0E9AE380Dh, 3FB60137h, 7778ABBBh, 0BFE9CC85h, 894971F1h
		dd 3FF521A7h, 0FE716E4Ah, 0BFA768FEh, 0B783FBD8h, 3FF2921Fh
		dd 9AFE626Dh, 3FC0DF37h, 0F451B424h, 3FD27905h,	2EAE41F1h
		dd 0BFE584BAh, 5BFF8D07h, 0BFD3F10Dh, 0CC6A138Fh, 0BFE3DE04h
		dd 6A52957Ch, 3FBC76C0h, 0B5840BC4h, 0BFA994CEh, 0C75313D9h
		dd 3FD2A4BDh, 0AC44A76Fh, 3FF400CCh, 93C4E162h,	0BFC7FC6Dh
		dd 80D07A6Ch, 0BFE3C58Dh
		dd 283B554Bh, 3FEF6CE9h, 30BA2E1Dh, 3FDB25A9h, 0E0658557h
		dd 3FE3AA33h, 0B9424F4Bh, 0BFECE3C6h, 74086CC5h, 3FD7D372h
		dd 0DFEF5A1Eh, 0BFE10905h, 5FAC8E2Ch, 0BFEA9E90h, 5CF13317h
		dd 3FE243F9h, 5166FECh,	0BFE3D2F0h, 5B1CB70Ch, 0BFE2D052h
		dd 4D7E7E24h, 0BFC4E55Ch, 98B18D42h, 3FC96FECh,	6FF93B6Ah
		dd 0C000D44Ch, 0FF30ED4Ch, 3FDD10DAh, 5642947Fh, 3FDEACB5h
		dd 7AD83C53h, 0BFB2CED8h, 4F0DA2F0h, 3FDAC152h,	59F81CA3h
		dd 0BFC86A1Bh, 3A15387Bh, 3FEA73B5h, 0BD7D2E78h, 3FD0E8E2h
		dd 40241A7Eh, 3FE41833h, 0E58786EDh, 0BFDCCE1Eh, 12A09134h
		dd 0BFECC378h, 5BAA878Bh, 0BFDE147Ah, 89F5AE91h, 3FE1771Ch
		dd 0AAB472C2h, 3FE0ECC7h, 0CBBB5EF8h, 0BFE63160h, 0A40F1F44h
		dd 0BFE4909Ch, 41E1C0E7h, 3FDBB48Dh, 8BDB7E07h,	3FDC2E43h
		dd 0E3557FCCh, 0BFBD9383h, 9CA6FCBAh, 0BFD78A00h, 1C941149h
		dd 0BFE7A86Ch, 0AB38E639h, 0BFF51CE2h, 0FA71BF41h, 3FB6855Dh
		dd 0B3C62EA1h, 3FB756E7h, 1ED38F84h, 0BFC69BC1h, 0B8B055ACh
		dd 0BFE0FBA6h, 0EE0B79D0h, 3FEC60CEh, 2A7FBB15h, 3FB569DEh
		dd 0EAC513AFh, 0BFD440A0h, 618F6C38h, 3FF4A51Bh, 2144EAA4h
		dd 0BFE08E53h, 474AE6E3h, 3F94A4DBh, 0DD7DCE6Ch, 0BFE11318h
		dd 4D7016EEh, 3FC9CC4Eh, 0D7ED7092h, 0BFC49AE8h, 93E7807Ah
		dd 3FF38A05h, 4D29000h,	0BFBC1D44h, 1C65FFE2h, 3FDE9B47h
		dd 0D9039842h, 3FD16A07h, 8398CD79h, 3FD09EA8h,	134ADB9Dh
		dd 0BFC7260Dh, 0F40BECD7h, 3FE710ACh, 987923F9h, 0BFE86204h
		dd 93330536h, 0BFC55307h, 83EE7A49h, 0BFBC24CCh, 0F1CAE722h
		dd 0BFD05B91h, 0CB58F55Fh, 3FDA25AAh, 775BD12h,	0BFF059E0h
		dd 402DDAADh, 0BFCB7017h, 962E4DAEh, 3FFDC6E4h,	62CD50CBh
		dd 0BFEBCEB0h, 963E415Ah, 0BFD717B7h, 0A886AD0Eh, 0BFE3EFBEh
		dd 0C9CC6B27h, 0BFD1323Ah, 425AC820h, 0BFC6E643h, 6CD83651h
		dd 0BFE865B2h, 648507B3h, 0BFF678DBh, 66F2AE7Eh, 3FD696A2h
		dd 79A2A853h, 0BFC77272h, 0F337BF76h, 3FF8EE11h, 0F3BFA165h
		dd 3FCD821Eh, 0BC173903h, 0BFB182E3h, 271115EFh, 0BFC2D146h
		dd 12EA53EBh, 0BFC9711Bh, 77CD0935h, 3FEA9700h,	0B4BF8DBEh
		dd 3FBD638Ah, 8BD0023Bh, 3FDA2119h, 24AD2148h, 0BFBCD8E2h
		dd 12A49A4Ch, 3FC659FFh, 14BCE753h, 0BFD56F57h,	85077BDh
		dd 0BFC8EDB5h, 401EFED2h, 3FE57B01h, 0BC9BCC2h,	0BFD77556h
		dd 0C493C57Bh, 3FEC6003h, 753009C6h, 3FF34578h,	9C4CBF90h
		dd 3FBDC597h, 2742985h,	0BFD85B02h, 0AFEB7C6Ah,	0BFE992FAh
		dd 4B5968CDh, 0BFE53697h, 0D931BCA5h, 3FC17080h, 30EEC8C9h
		dd 0BFEA0E80h, 844F065Dh, 0BFA36C9Bh, 0C9B401CDh, 3FC0273Ah
		dd 0ED0917A2h, 0BFF98555h, 0EC7F3B1Eh, 3F9D56EEh, 3322616h
		dd 0BFC09FBDh, 0EDAA54DAh, 3FF4819Fh, 6A4338CEh, 3FF2CCC4h
		dd 0B2340A39h, 3FA64A07h, 11B03D0Fh, 0BFF3CC5Bh, 4364EAD8h
		dd 3FEA24F2h, 77049928h, 3FE7CD04h, 83097F22h, 3FDAB6CAh
		dd 0B2C14D87h, 0BFE0A508h, 84E9BD7Ah, 3FC99121h, 37AB8A55h
		dd 0BFE0791Ch, 7B570317h, 0BFE3C8EEh, 8899EC21h, 3FF13EC1h
		dd 0AE1F52D0h, 0BFE2F0C1h, 7127B630h, 0BFBF7813h, 0B4FDAD8Eh
		dd 0BFED1D55h, 88E6277Eh, 0BFB48FD9h, 8B18784Eh, 3FC0CBF7h
		dd 36B88392h, 3FCFF203h, 97AA609Dh, 3FCEFAD0h, 247A923Eh
		dd 3FB4A039h, 281A6DE7h, 3FDE37A9h, 0A4F7EAB2h,	3FF09B3Dh
		dd 0D2C2967Bh, 3FF65820h, 87865CD1h, 3FD852DCh,	2D0AFB11h
		dd 3FC4A231h, 0BB9A3B1Ah, 0BFE379BAh, 55ACEDB3h, 0BFCDFBDBh
		dd 0FFBE2236h, 0BFD1BD70h, 48C8E97Ah, 3FA94717h, 0DE7BD715h
		dd 0BFD9369Bh, 286CA61Fh, 0BFE07A5Dh, 0CAB057DDh, 3FAC6619h
		dd 1B236CA2h, 0BFF5570Eh, 0CC8616D3h, 3FE779A8h, 26A7A5EBh
		dd 3FD85439h, 0E1904698h, 0BFEB3727h, 4AC686ABh, 0BFEEB20Ch
		dd 3BEDAB44h, 3FE8B26Fh, 15D690C6h, 3FC42C69h, 17C8218Dh
		dd 3FDC8ACCh, 6265118Bh, 3FE41C19h, 973C399Eh, 0BFC608F0h
		dd 438BC875h, 3FE12C01h, 439249FFh, 0BFE543D5h,	0ACB974A7h
		dd 0BFA232E1h, 454A1D44h, 0BFF05FC9h, 95BCE42Eh, 0BFEC7C6Bh
		dd 0B238EC37h, 0BFB5F59Ah, 0C7145FBAh, 3FE10768h, 0E9698B77h
		dd 0BFB4B47Eh, 8363A8CDh, 0BFD01F15h, 0CC847F39h, 0BFE23CB6h
		dd 0CAA2D3CDh, 0BFE20D9Dh, 0EA693D40h, 0BFD8DE5Fh, 0F7D35Eh
		dd 3FB8FB51h, 220B6542h, 3FEAC31Eh, 0ACEB3A31h,	0BFCE15EAh
		dd 0D614EA17h, 3FCC6ED4h, 898EC553h, 3FD60238h,	8E714F59h
		dd 0BFC0F6C8h, 9A214E66h, 3FC1E727h, 0BC439AEFh, 400D6444h
		dd 7DCE92A4h, 0BFD59F3Bh, 0A14D25A0h, 0BFF013AFh, 0FDBC2EBEh
		dd 0BFD02CADh, 0EEFA6CC0h, 3FACAF44h, 0F3D92B80h, 3FE3C07Dh
		dd 0B5A1602h, 3FF5AFC3h, 0D5FD917Eh, 0BFF19A08h, 4AE31379h
		dd 0BFD88356h, 0DDE5432h, 0BFC785F2h, 0DC15C137h, 3FBE5EB2h
		dd 6DEBC304h, 3FE3D4F5h, 21C95243h, 0BFE4AA26h,	0B8DF6B93h
		dd 0BFBA70C4h, 2F1613CFh, 0BFDBFB6Dh, 1CD11A89h, 0BFF11212h
		dd 7631CBD5h, 0BFEF0096h, 78FC75Ah, 3FD84638h, 0C3532602h
		dd 0BFC1BB6Eh, 451456BDh, 3FEAD70Ch, 0CE73D640h, 0BFE5D3B1h
		dd 89862541h, 0BFE07D8Dh, 0B167F43Ch, 3FE210FBh, 225964B4h
		dd 0C0022366h, 4321587Dh, 3FEACE69h, 915BFD85h,	0BFE07FB8h
		dd 0DEBF78D3h, 3FDC7D47h, 0E345F30Bh, 0BFEA2CF0h, 0E547127h
		dd 3FA41FBFh, 0D3E0ED59h, 0BFF6DDFBh, 1445E9EEh, 3FE232A7h
		dd 226F18A1h, 3FD8FB8Ch, 518966A0h, 3FD0B5E8h, 0DC7FEE53h
		dd 0BFD03B4Fh, 77F3FA2Ah, 3FE86599h, 18E5573Eh,	0BFA502A4h
		dd 5240CF8Eh, 0BFB59863h, 3264D99Dh, 0BFD00388h, 6740BC8h
		dd 3FDF8E65h, 0E02490CBh, 0BFF09256h, 29C4B0C8h, 3F8DC8D6h
		dd 0E72C90C3h, 0BFD61413h, 9FC02FD8h, 0BFF7D572h, 0FD9BDF1h
		dd 3FC89E6Ch, 7FF04C19h, 0BFB2F4D8h, 5CE083C4h,	4003E943h
		dd 0B9ADECB8h, 0BFDABC10h, 125FCFCh, 3FF5198Fh,	4BDE1CCEh
		dd 0BFE72BC9h, 4E0DC370h, 0BFFE236Dh, 9C1120B4h, 3FF56229h
		dd 57DDA654h, 3FCDEA7Dh, 34BEF62Dh, 0BFE03C8Fh,	223443E9h
		dd 3FF25550h, 2C2DA582h, 0BFD57E56h, 0D8989DC3h, 0BFDAEB5Bh
		dd 0C6B78369h, 0BFD5468Ah, 79F167ABh, 3FDABB69h, 9DB098E7h
		dd 0BFEA164Fh, 0B7F06CF7h, 3FD48F96h, 2B3DF1C8h, 3FEC1536h
		dd 50E7E9A2h, 3FEADF0Dh, 403E06C8h, 0BFE5277Dh,	28399194h
		dd 3FC86A59h, 0C0DE6F45h, 0BFE4E034h, 0B5B8409Bh, 3FEE4DD6h
		dd 4BBE99EAh, 0BFB8D2FDh, 7B801705h, 0BFF5B8A7h, 62D8052Dh
		dd 3FE40AD0h, 7FA4B43Ch, 0BFE0B856h, 0B5740C13h, 0BFE25005h
		dd 0F28C128Fh, 3FF3D85Fh, 0F241519Fh, 0BFE0ADC3h, 0C96365C3h
		dd 0BFCBD9AAh, 0A4EBDA21h, 0BFDB40FEh, 5EF37BEh, 3FCFDDC7h
		dd 0E7A9A24h, 3FEEC325h, 34D8F3Bh, 0BFEA95ADh, 0FADBE86Dh
		dd 3FED6386h, 7B935AFh,	0BFE9552Dh, 697ED14Fh, 3FEAC7B3h
		dd 5290BCAEh, 0BFC0DC46h, 0DCB5E18h, 0BFE39782h, 0A1ABE868h
		dd 3FB04621h, 2328C627h, 0BFCA3064h, 52D438DCh,	0BFA39F62h
		dd 3AF4029Fh, 3FA74898h, 5B79D187h, 0BFCFB5C9h,	46EC29E1h
		dd 3FB43F06h, 6BC35FFFh, 0BFA78013h, 16F8AA5Bh,	0BFC3B591h
		dd 0F3CD62E7h, 3FCA272Bh, 0FA525A41h, 0BFE3486Ch, 535A6C90h
		dd 3FF5D983h, 7BB8FC69h, 3FE51F6Bh, 223F993Fh, 0BFA842F7h
		dd 0C620CDD5h, 3FD00933h
		dd 33D69527h, 0BFBD6332h, 17434E2Ah, 0BFD68004h, 0F1FEE8F3h
		dd 3FC2BA87h, 0FC38EAF4h, 0BFDB489Bh, 367143DBh, 3FBA6269h
		dd 1DA40D6Ch, 3FC2F18Ah, 14247878h, 0BFC22EF0h,	9262E555h
		dd 3FE4CE3Ch, 838CC195h, 3FC5279Fh, 9D5A0264h, 0BFDAE313h
		dd 8A86103Fh, 3FE0D16Ah, 0F88EA7ECh, 0BFF27F75h, 0CE7E8551h
		dd 3FE1C64Ch, 338AC2CBh, 0BFD3CD9Ah, 49229B6h, 3FD5650Ch
		dd 0E6F54D3Ah, 3FC5A76Ah, 8E4592EDh, 3FE9EEABh,	0C1D83FD6h
		dd 0BFE489B4h, 0E936D99Ch, 0BFF8FD3Ch, 0FA56A47Ah, 3FA14DDCh
		dd 418EE678h, 0BFFC6AC5h, 0EB91EC8Dh, 3FE0FF42h, 6209ACDDh
		dd 3FE0AA4Ch, 70930382h, 3FC2BF92h, 3B1EC3A0h, 0BFD27BE3h
		dd 136EFDD4h, 3FEB4F55h, 4F16A3CDh, 0BFDF333Eh,	25E106FFh
		dd 3FEA5209h, 53A24649h, 3FE70E58h, 57D2CC93h, 3FC514A5h
		dd 0CAEB70BEh, 3FC5B873h, 0A3A909CBh, 3FB0E846h, 0F6BEF3EBh
		dd 0BFAA2BDCh, 0C279083Eh, 3FDA0576h, 4A62C6D8h, 0BFF107A3h
		dd 27275609h, 0BFDC941Ah, 0A244056Bh, 3FE29E60h, 9C088B27h
		dd 3FD5EE1Bh, 0C6799DA9h, 3FEB7C9Eh, 5D388869h,	0BFF09436h
		dd 1B044BBBh, 0BFED7775h, 3A0D4E90h, 0BFDE3555h, 528E3192h
		dd 0BFE16D64h, 28527590h, 0BFF2D95Ch, 6CA7E99Dh, 3FC59ECDh
		dd 0EA11CE98h, 3FEE6DEDh, 42E75079h, 3FF3F9D5h,	8C031BD0h
		dd 3FC03957h, 74BA3406h, 3FCC5735h, 0B46CD07Fh,	0BFD8BB49h
		dd 0B8CA63D2h, 0BFD49EFAh, 0C25030AFh, 0BFCB410Dh, 38EDBA1Ch
		dd 0BFE26968h, 0B4160A99h, 0BFCE9EFAh, 0D9C01309h, 3FB68D75h
		dd 8AB96B4Ch, 3FE87673h, 0BC0EF647h, 0BFD7D03Bh, 0BCC877DAh
		dd 0BFD97E56h, 282CC167h, 3F9AF5C7h, 78BEF88Bh,	3FD9B9D5h
		dd 0A074AC5h, 3F8D62C2h, 4BEE874Eh, 3FDD404Dh, 4E25685Ah
		dd 0BFD96299h, 0F4079FABh, 0BFD3D2CFh, 700F24D9h, 0BFD82129h
		dd 1732B9B9h, 0BFD80481h, 0B1F33EC9h, 0BFD026A3h, 0CCA17CA4h
		dd 0BFCE0B32h, 0A62BAA44h, 3FBC4268h, 0DD517D7Dh, 0BFE0FD0Ch
		dd 799A70F1h, 0BFF193A3h, 0D471F2EDh, 0BFF14634h, 0DCD4C02Dh
		dd 0BFB4F51Eh, 27D12Dh,	3FFEBCAFh, 9B45573Eh, 3FF2D86Dh
		dd 5F6296BDh, 3FEC8048h, 36CEC55Ah, 3F78161Eh, 33C18B7Ah
		dd 3FD2F6F2h, 393AB970h, 3FDF4277h, 0A303E583h,	0BFE2A7B8h
		dd 5198498Dh, 0BFE4A9DAh, 9C9D731h, 3FDACDE1h, 9ACCF48Fh
		dd 0BFE4C3CBh, 0AC6F45F9h, 3FC5178Fh, 0EE0E1109h, 3FE25614h
		dd 1FA616E5h, 3FECEDCDh, 18E29A22h, 0BFB64C58h,	0A454481Fh
		dd 0BFF0EDE5h, 0E247BD84h, 0BFDBF075h, 5E14510Dh, 3FDA981Fh
		dd 0AD4C8762h, 0BFABE86Fh, 8DC19C5Bh, 3FD6F0EDh, 44507681h
		dd 0BFBB910Dh, 0B45EF49Ah, 3FF7D46Bh, 0D83089F5h, 0BFD0819Eh
		dd 7EC62F8Dh, 3FE748E1h, 2DF4E41h, 0BFE48C81h, 131F7EBh
		dd 0BFBBF220h, 3F523EDFh, 0BFDFA243h, 0BB38BC5Fh, 0BFC9BBFDh
		dd 397062D9h, 0BFE0BCA7h, 886462D8h, 3FC9CEA3h,	24D6448Fh
		dd 0BFD087EBh, 962FEB41h, 0BFCCE76Eh, 295A8887h, 0BFB92CE8h
		dd 43682E4Ch, 3FCA9B24h, 2A24DC80h, 3FD16D7Ch, 19DD9B89h
		dd 3FFB0BF3h, 0FD10E70Ch, 3FE40B2Bh, 2FE95A39h,	3FF6237Dh
		dd 0BF8C3B42h, 0BFF6C1C7h, 9ED76B21h, 3FA08152h, 8B3054CEh
		dd 0BFCEA40Eh, 0D961BF11h, 0BFE58146h, 0CE7F6434h, 3FE5EFADh
		dd 0E8E09EB0h, 3FE747C0h, 4129342h, 0BFEAEACDh,	85B56E6h
		dd 0BFF0253Bh, 0D9EE7666h, 3FE6A17Fh, 0C662C4BDh, 0C001F5F4h
		dd 0E9F279C2h, 3FD59F70h, 4F8B1DBh, 3FE9551Bh, 0D5E145ADh
		dd 0BFEBDF96h, 922B0A28h, 0BFD2861Ch, 0FDACAE6Fh, 0BFF1C843h
		dd 6873BC6Bh, 3FCA2B40h, 8276A839h, 0BFEBB365h,	557D615Ch
		dd 0BFCE5D7Ah, 0AD5A8A8Bh, 0BFE63553h, 28A74B58h, 0BFC62105h
		dd 0AECDC691h, 0BFF5473Ch, 6483565Fh, 0BFA7E707h, 0E296A3DEh
		dd 3FD56B86h, 65DE518Dh, 0BFD17352h, 1FC2B33Dh,	3FDBE6EEh
		dd 0D6541A2Dh, 3FDD52F6h, 53E2AE98h, 0BFE4CA1Dh, 877462F7h
		dd 0BFD5632Ah, 0CAB69436h, 0BFE5B250h, 4613EA1Dh, 3FEAF6C6h
		dd 0FB011D74h, 3FF0F8F0h, 365BC2CCh, 3FD0BEB0h,	0AD45D864h
		dd 0BFD10A3Dh, 0E294F1AAh, 0BF9F357Dh, 0ED7A389Fh, 3FF04D9Fh
		dd 3A6903C7h, 0BFE1FFCFh, 6DEF962Fh, 3FF3FC1Eh,	85976EC0h
		dd 3FEA8D52h, 336CC02Ah, 3FD963A0h, 61CB6F19h, 0BFE54AF1h
		dd 0F01130DAh, 0BFF0ABD9h, 9A9AA9E2h, 3FD8A5A4h, 0F76B460Bh
		dd 0BFE35317h, 0BC6CFC06h, 3FB98AF4h, 6391841Bh, 3FE0F592h
		dd 0EE790B56h, 3FDA9163h, 8564698Ah, 4001E751h,	0B687DB60h
		dd 3FE5D094h, 5672D384h, 3FCA9EECh, 74FA146Ch, 0BFE3C6D4h
		dd 89955D72h, 0BFEC17F6h, 0E92E4D64h, 3FDDC66Dh, 6D542780h
		dd 3FEAECBBh, 0D706AD76h, 3F72060Fh, 50746E93h,	0BFDF3454h
		dd 0E1E01237h, 0BFDE56C1h, 2774A6BBh, 0BFD0DC42h, 0C4A63817h
		dd 0BFB50B79h, 0DEA836D1h, 0BFC9DD13h, 3E4056FEh, 3FF077ADh
		dd 0DCF10117h, 3FD8E85Dh, 0AC0053D2h, 3F9835DFh, 0F3BE95C1h
		dd 0BFC6B463h, 557885C7h, 0BFF02946h, 2728FB97h, 0BFD0F99Ch
		dd 18DE0FD0h, 3FD883D3h, 0C0CA1A2h, 0BFBF7A3Fh,	8CB3B18h
		dd 0BFE72C5Eh, 7727C27h, 0BFD464E3h, 0A4CCFF8Dh, 3FF7040Ch
		dd 4C8290F7h, 0BFE9DA25h, 560E56D9h, 3FEACDADh,	57808DFFh
		dd 0BFD7C9B1h, 611F0329h, 3FDCECDCh, 22AF2F6Eh,	0BFF0299Ah
		dd 0DF19D961h, 3FE23E47h, 6E6C63B2h, 0BFCE7C11h, 76C72AC1h
		dd 0BFE5866Fh, 71169181h, 3FCB8108h, 0FD3E4E3Ch, 3FC82B62h
		dd 0C1087FFAh, 0BFE71C9Ch, 0FD0C2C1Ch, 0BFA8F179h, 0A31421ABh
		dd 0BFE46296h, 4E01E62h, 0BF977CDFh, 44FE6FA2h,	3FBE9574h
		dd 0EDD17540h, 3FD2A8C0h, 237A4F98h, 3FE801A8h,	11020F51h
		dd 3FC04006h, 4529C75Fh, 0BFD2E8B0h, 0EC3EEC1h,	3FDA4EA5h
		dd 6C0BC07Dh, 3FF771A6h, 0DDD6B1ADh, 3FBF0521h,	8BF807E2h
		dd 0BFD33160h, 6C705084h, 0BFE1F46Eh, 96337DC5h, 3FADF4ABh
		dd 6B96514Dh, 3FE688F7h, 7F3056EBh, 3FDA7212h, 251DA3BFh
		dd 0BFF1CCE6h, 5CE03346h, 0BFEC4D88h, 0AC4EFAC7h, 3FF00488h
		dd 871EE4F1h, 0BFE32071h, 2605B2A3h, 3FCE848Dh,	106E36BAh
		dd 3FDB3D8Eh, 0AF87A6C1h, 0BFC63B0Ah, 0E6F45F50h, 0BFC99FFEh
		dd 7A16D333h, 3FA15139h, 0AF302E93h, 3FBB0F0Ah,	64F8BDACh
		dd 3FCEEC30h, 9A4919BFh, 3FE58671h, 0FA5E8F3Dh,	0BF9E80BDh
		dd 7E0429F6h, 0BFF5C1A1h, 70B4D74h, 3FD012E6h, 66399B59h
		dd 0BFD601EBh, 0CE11E41Bh, 3FF46FA8h, 7215B0FFh, 3FE22958h
		dd 0D692625Ch, 3FD5200Ah, 332F6F1Ch, 3FF36E75h,	58F8761h
		dd 3FFA94F4h, 56C41577h, 3FE7890Fh, 0EB6C8E6Dh,	3FD12F17h
		dd 0FDC23807h, 3FE4BB02h, 141D6CE9h, 0BFA741A9h, 0ED4B1037h
		dd 0BFE9AB8Ch, 84498F2Bh, 0BFE1B9DEh, 0E07BEAFFh, 0BFEA83C5h
		dd 357CD734h, 3FE1AF0Fh, 0B342F59Eh, 0BFD78B0Eh, 0F30A7E2Ah
		dd 0C000C5DCh, 2E292D59h, 3FE3FC10h, 90DB69E1h,	0BFFD9DE9h
		dd 493F96FCh, 0BFF50D7Bh, 41C8411Bh, 0BFF24FD2h, 0AB4DFAA4h
		dd 3FF0BE80h, 1F379DFh,	3FDFDACDh, 0B8F506DEh, 3FE57FD8h
		dd 0CBB1A537h, 3FE2E481h, 0BA71BE65h, 0BFF2A777h, 1F26F97Fh
		dd 3FF9D292h, 0AC5F8301h, 3FE7E00Fh, 0C8DC9E9Eh, 0BFF2795Ah
		dd 0A38BC001h, 0BFF3F019h, 0C31DA8C5h, 0BFE0BA6Fh, 413F3794h
		dd 3FDAD481h, 4A9F39B8h, 3FDF48E6h, 0F6DE6ACBh,	0BFA27EB8h
		dd 2E7B89EFh, 3FD61745h
		dd 0B8153DAEh, 0BFF505DCh, 75B67501h, 0BFDC4310h, 2E6DDCAFh
		dd 0BFEDD520h, 38291CC6h, 0BFE4EFE9h, 17BE94DCh, 0BFE1FC86h
		dd 0C4ADF425h, 3FCD4823h, 0B5D27530h, 0BFED9FFDh, 426E7952h
		dd 3FB34E79h, 0BC4A771Dh, 0BFD1D375h, 54154994h, 3FE88061h
		dd 0A2054E67h, 0BFAA2E04h, 28CD439h, 3FD48958h,	0D34EAB94h
		dd 3FB38EB2h, 79DCAA95h, 3FDD7027h, 6CC05D27h, 3FCD4744h
		dd 0F20EAF64h, 3FCC27DCh, 0E12734CAh, 3FE1A468h, 7B19D793h
		dd 3FE0DA06h, 9AECA628h, 0BFC9E5D8h, 5A5AF043h,	0BFEC2F92h
		dd 47F809E1h, 3FE6F62Ch, 9870270h, 0BFE547DDh, 5E90F983h
		dd 3FE23821h, 408DF037h, 3FF5B911h, 25C77C49h, 3FE61B5Ch
		dd 0D9CB7873h, 0BFD45E16h, 0C58F5E52h, 0BFDC6392h, 0DF6A6418h
		dd 3FE172A8h, 0B60FA2FEh, 3FD66675h, 89E159B2h,	0BFE22E46h
		dd 606D7ACAh, 3FC0A177h, 0E2A4D73Bh, 0BFE95E3Eh, 0C743A973h
		dd 3FD3688Dh, 4684309Bh, 3FD2060Fh, 0AD14423Ah,	0BFDE7488h
		dd 786A0722h, 3FD9FE20h, 0DF9E1A27h, 0BFE1C485h, 0D6891375h
		dd 0BF87E465h, 0DFDB6581h, 3FC03A05h, 46F2D4AEh, 0BFEF2FFCh
		dd 8BDAF952h, 0BFF36953h, 0EDE8C7FDh, 0BFE83F8Ah, 38EAA53Bh
		dd 0BFE413A6h, 0F7B94797h, 0BFCD55C0h, 0AA669AEBh, 3FDD085Bh
		dd 0E0A782CFh, 0BFD768CBh, 7933E803h, 3FED5C3Eh, 6CE53CBAh
		dd 0BFE2D3F6h, 3A33C5Eh, 3FCF8D84h, 0D46AA76h, 3FF1737Bh
		dd 99DA8B4Eh, 3FD3E742h, 96A38F65h, 0BFD0AC0Ch,	1937EB5Eh
		dd 0BFB76DB2h, 0DA00101Bh, 0BFAAACF1h, 8394EA6Ah, 0BFE4B029h
		dd 0A325FE71h, 3FE94BA4h, 0AB8B907Bh, 3FE2BA61h, 3A8BDCC1h
		dd 3FD4D80Ch, 26AAEDC0h, 0BFE2C18Ch, 0D335F73Fh, 3FEA8745h
		dd 8BCA53CFh, 0BFD8FB95h, 56B15FD4h, 0BFEB76BFh, 4CBF15BDh
		dd 0BFD58F8Eh, 90E1EB5Ah, 3FE8BEA8h, 8D1182DEh,	3FE0CA14h
		dd 7E5CF6F5h, 0C002DB02h, 3EB307B4h, 4006CA05h,	0DE193B91h
		dd 3FEBB593h, 0DFE47ECBh, 40083619h, 867705FFh,	3FF6053Ch
		dd 7B0F1783h, 0BFEBE11Ch, 9F73C9C1h, 3FE4B33Eh,	20407821h
		dd 0BFFF92A7h, 5A2CC60Eh, 0C004AF05h, 74077BD8h, 0BFF23558h
		dd 2CC7DB56h, 4011263Dh, 2035E9C2h, 3FC1B771h, 8F0E3B11h
		dd 0C00016B3h, 0D9FE8930h, 4010BEFDh, 114CF342h, 0BF750C2Bh
		dd 0D30CE0EEh, 0C00F6181h, 2C908E6Ch, 0BFBEE7EBh, 0CCC8C98Dh
		dd 3FE07B71h, 70217A56h, 3FFDDB68h, 1CD3400Ah, 401FF3D3h
		dd 0E4EC624Bh, 0BFDA6B8Dh, 5A10385Eh, 3FCAC5B1h, 0C7951CF7h
		dd 3FFF4620h, 0F5DC0B09h, 0BFF6C712h, 0D7391A9Dh, 0BF97B801h
		dd 0B090B7Bh, 3FF58D41h, 5FB4406Dh, 3FF1E244h, 2712B70Eh
		dd 0BFE76621h, 208D6093h, 40155754h, 3929BD11h,	0BFF65F4Bh
		dd 0C182B2C4h, 0BFDED8F3h, 9DF34E1Dh, 0C00141BEh, 575581Dh
		dd 3FD267F7h, 0FC6D2144h, 4006775Ah, 88F52452h,	40013CFCh
		dd 0E08EC881h, 40224D6Dh, 0BFB04AAAh, 40065213h, 4B5ADC47h
		dd 40016CB8h, 343730CDh, 400B9D27h, 0C6610972h,	40051818h
		dd 223FA716h, 0BFE9C9B9h, 0BC096D31h, 4003C93Bh, 646AB074h
		dd 3FF82CB3h, 93EA0388h, 0C0016474h, 15119049h,	0BFFF096Ch
		dd 49625D51h, 0BFD519DCh, 0DE85C5B0h, 3FFD700Fh, 16D84F2Fh
		dd 0C0068C72h, 0BA4EB1h, 4006232Fh, 0CBC0AF47h,	3FF82F94h
		dd 61D5A38Ch, 3FFA129Bh, 0ADE8955Ch, 0BFE04418h, 0A84A4C75h
		dd 0BFDDC293h, 0CD44347h, 3FF037EAh, 15699115h,	0C001F0E8h
		dd 0AA50E73Bh, 0BFFEAA33h, 11523698h, 0BFFB7EE1h, 317A321Fh
		dd 3FF50146h, 0BE4E143Dh, 3FFBB000h, 418C35C8h,	0BFF8B071h
		dd 2AD63279h, 0C0015F4Eh, 8C3845DFh, 0BFF19412h, 5DCD764h
		dd 3FD74A15h, 30DE36B0h, 0C008DF4Fh, 96F3B520h,	0C006845Bh
		dd 0CB0BC4E1h, 3FE67BFDh, 0E4AC37ABh, 40001964h, 80C368C7h
		dd 0C00B05BCh, 0F497D800h, 0BFD10362h, 5C5A851h, 400B3BE6h
		dd 0ED2FA7F9h, 0C0147570h, 0CDEC45F8h, 400C8CE0h, 363595CEh
		dd 0C000F7FFh, 29E9A024h, 40157031h, 0A8DED052h, 0BFDBCDADh
		dd 3F7C6CDh, 0BFD75FD9h, 4AE4933Ch, 3FC886E4h, 0AFF6B88Dh
		dd 3F965B9Bh, 0E4182CEEh, 0BFE621BBh, 76A5AC74h, 0BFDD485Fh
		dd 4F78BAD5h, 0BFE9B036h, 532BA166h, 0C0035701h, 2C0D1A7Eh
		dd 4004678Ch, 0E41BAF8h, 4015BE4Fh, 38D79AFDh, 40094F84h
		dd 0CE058DD4h, 3FD3F0F1h, 479AC738h, 0C0000BA2h, 8B13F469h
		dd 3FE5797Ch, 1A083A50h, 0BFF6DEF3h, 0CDCA5803h, 0BFD78DBEh
		dd 2616ED27h, 400F852Ch, 0DDD2ECABh, 0BFE02FB2h, 9B3AD7DCh
		dd 400717FBh, 5695F175h, 0C0026C52h, 901B08EFh,	3FF3ABF7h
		dd 7A695777h, 0BFCE2676h, 68FF2FB6h, 3FDACD7Ch,	480A3A2h
		dd 4010FBB4h, 6435B3A0h, 3FC57DC1h, 5B740536h, 3FFDB88Bh
		dd 0B3AF502Bh, 3FC5877Bh, 0D2C036D8h, 0BFBB3EDBh, 0F5E7E53Eh
		dd 3FD46835h, 9FA6054Bh, 0BFF943ABh, 0C9E72F0Ch, 0BFF43919h
		dd 0F2CBA841h, 4011C89Ah, 974DABA8h, 0BFF765AFh, 343A1827h
		dd 3FE3F25Eh, 3C40C8F2h, 3FFB2112h, 755993B1h, 0BFF443DBh
		dd 5568803Fh, 3FA490D4h, 40A48681h, 0BFF1F326h,	0DAD50C22h
		dd 0BFC589CCh, 54E6A6DAh, 4018DE9Eh, 3F342674h,	3FC6FAE2h
		dd 0D47552C8h, 0C006B668h, 0E193FBD0h, 3FD16716h, 0AF563708h
		dd 3FF798A2h, 7176B998h, 3FF13F43h, 3856C9B6h, 0BFEB2B1Bh
		dd 0CC9F51BDh, 0BFE82778h, 0B7624E92h, 40123224h, 73820A47h
		dd 3FF15B37h, 7179B9E4h, 3F713D27h, 81D9ADE5h, 401C80F3h
		dd 7D96E46Bh, 3FF877E4h, 57D60C5Fh, 0C00DC42Ch,	0DB103777h
		dd 0C0119D44h, 0CD22C66Ch, 0BFE0B047h, 0BDC55DF2h, 0BFC79F16h
		dd 0EB0AADBh, 40082369h, 1A068B5Fh, 3FE8BA47h, 0B9D55651h
		dd 3FE5751Ah, 6FC99DDCh, 0BFFEE0FCh, 0DDBDA967h, 0BFFC7879h
		dd 0A983570Bh, 0BFEB68BEh, 0E0352FFAh, 3FFD55CDh, 69F7FAh
		dd 401137BCh, 0E775FAA6h, 3FF9B4BDh, 29F0788Dh,	3FEBE7EFh
		dd 2E6DB8C8h, 0BFFD2F06h, 7A451028h, 0BFF8C280h, 0DDA43C67h
		dd 0BFA3BBDCh, 0C6E70BCCh, 3FFC49C6h, 34C18532h, 0C01055AEh
		dd 2E2ED5Bh, 4009BB3Dh,	5776AA49h, 0C00C605Eh, 8FF653F4h
		dd 4007837Dh, 0A7734BC7h, 0BFB80285h, 12DB75E1h, 0C0081919h
		dd 411407E9h, 0BFE12FE6h, 0E0419353h, 0BFF5717Ch, 0A22CFA05h
		dd 401EF513h, 0C08B3E72h, 4003674Fh, 0E8BD6BC7h, 3FFE07A3h
		dd 1D8F3C73h, 0BFFB1B63h, 0BE1174EDh, 0BFC509C9h, 0FB26D28Fh
		dd 3FEEB993h, 3B397C37h, 40141CB4h, 8F844D0Eh, 3FE4FD83h
		dd 3676DC45h, 0BFEF43B2h, 0F6FFADC5h, 3FE5F88Bh, 0DC39CD90h
		dd 40056FD3h, 0D7EBA677h, 3FE94606h, 0F44726h, 3FE2B933h
		dd 0D4FE7C6h, 0C0001414h, 9957CF95h, 0BFE67A54h, 595DB464h
		dd 0BFD08220h, 1DA77D8Ah, 4000964Eh, 6234DB0h, 0BFFECA4Ah
		dd 6A409797h, 0BFF04122h, 0C9F27D4Ah, 400A9553h, 0BAA26CE1h
		dd 0BFDE7A08h, 4F567E64h, 0C009F348h, 0EC4DAE33h, 0BFE6491Bh
		dd 8073885Bh, 0BFD143CEh, 0CCED5B82h, 0BFFA4864h, 73101CEEh
		dd 4009AE12h, 40B060CAh, 4003A7AEh, 0ECF7FFBDh,	0BFE30C15h
		dd 0C97DBFB4h, 400863B5h, 0C32A6C7Dh, 3FF42420h, 0CC0F62FEh
		dd 3FF55931h, 51E5DE1Bh, 40114F59h, 0F15FD20h, 0BFF0F886h
		dd 46307450h, 3FCA86EBh, 0B4A3DE4h, 4008B077h, 7B324526h
		dd 3FFEB782h, 36925D86h, 401083D8h, 68316A4h, 0C004268Eh
		dd 0FEF93F33h, 0C00174FBh
		dd 5EC00B65h, 0BFF8C7D2h, 87686064h, 3FFB85A1h,	57C9DFEh
		dd 0BFE3D481h, 3FD3622Fh, 4020EC1Dh, 6246F44Eh,	0C003B78Fh
		dd 334E1A7Eh, 0BFF0B966h, 50BAD79Ch, 3FD5F1CDh,	1F74A16Dh
		dd 0BFD130CAh, 741E33D2h, 3FFCA638h, 0E146D949h, 0BFE540F2h
		dd 0F9486438h, 3FFAA404h, 0AE9CB18Ah, 0BFAC525Ch, 0B5592AEh
		dd 0BFEBC680h, 4734EBCFh, 0BFCF514Ch, 519A151Bh, 401149CCh
		dd 2D2C25D3h, 3FF71CC8h, 203F4E29h, 401EC643h, 8775A9E4h
		dd 400D1707h, 0E0855D45h, 0BFFEB073h, 22CFCC87h, 0C00EFED2h
		dd 42DD2C0Bh, 3FF7B79Ch, 855302AFh, 3FEB7F3Dh, 0E80A1CCDh
		dd 3FED80F5h, 0FEA8A54Eh, 3FD940B1h, 96E9FDB2h,	0BFF6E5F5h
		dd 0C46F7611h, 3FF832ADh, 708DA712h, 0C00A4F61h, 4E4469EBh
		dd 0BFD60466h, 430F4918h, 0BFF82ACAh, 0D197127Bh, 3FD2295Bh
		dd 0ECE5000Fh, 0BFFFB59Ch, 6BF9166Bh, 0C0070148h, 0CBE3F7B5h
		dd 3FE389B8h, 1F4C5029h, 0C00393C8h, 0CA091D91h, 40199796h
		dd 0FD80680Ch, 3FF2C7AAh, 929F5D7Ch, 3FD8A5C1h,	9FBFD858h
		dd 0BFC6487Dh, 5310C6AFh, 4009655Fh, 2D1B0443h,	0BFD3AD6Ah
		dd 0B4C5619Ch, 40109863h, 0F16460B9h, 3FD1B1CFh, 89B9172Bh
		dd 0BFF071D8h, 9F9FA94Fh, 0BFFA8795h, 2CB388E6h, 4003351Eh
		dd 3B5383AFh, 0BFF88195h, 0A80FA569h, 0BFEFB7C0h, 0D536BC18h
		dd 0BFE61EF5h, 0C341FAEAh, 0C00257DCh, 0DC653B1Ch, 3FD9A06Dh
		dd 0A4C3F715h, 400AD08Bh, 20FCEF78h, 401F8439h,	0F52D5DC4h
		dd 3F775D88h, 1FD4B825h, 3FEC8FBCh, 0F5BDF1Ch, 3FE0E4F0h
		dd 0E32D4932h, 400637CDh, 9DB2E94Ah, 40142BFCh,	0AE9F0EAh
		dd 40045568h, 516A31FDh, 3FD123D9h, 62B4302h, 3FDB517Dh
		dd 357B665Dh, 3FC026A7h, 4EFD51D4h, 0C0124887h,	95FD0F10h
		dd 0BFFFA038h, 0CB2802B7h, 401103BAh, 838EE5FDh, 0C0027EE1h
		dd 68E36632h, 0BFC183AEh, 0E6CCB3B7h, 0BFC8D73Ah, 6A19C09Eh
		dd 0BFF6D2BBh, 0E5588163h, 0BFF1F224h, 7D295FA7h, 0BFF2134Bh
		dd 230C31BCh, 0BFE9916Eh, 4CA6689Bh, 3FEF2A21h,	0FBF0B7DEh
		dd 0BFFC0A6Ah, 5AFBD714h, 0BFE4F437h, 0FBDBAEE1h, 40022D2Bh
		dd 0D11C5E17h, 4016C30Ch, 9F20612Eh, 0C028AE3Dh, 56037DEBh
		dd 0BFF61F32h, 2526FA45h, 40265DACh, 6C3A1A06h,	3FF722A4h
		dd 0E9C7E01Ah, 0C0247F81h, 4BD8CF29h, 0C010D794h, 0E86A3FB4h
		dd 0C0423B84h, 0DE4B3Ah, 0C0067A0Ch, 8FDC0690h,	402048BEh
		dd 7F6593CDh, 3FE42595h, 0F5B911C6h, 400541AAh,	6B00EA55h
		dd 4019E917h, 36BBEB4Ah, 0C042D4D5h, 0ED26D97Ah, 0C004FB6Ch
		dd 56B49E7Ch, 0C02D063Bh, 0DB7B8E4h, 0C00FA262h, 2227C654h
		dd 0C03B7D3Dh, 7B1E948Dh, 0C005BBC2h, 0EA0AA19Ch, 0BFEF3357h
		dd 54751008h, 3FEC9A5Ah, 2A49ADCDh, 0C0362F8Eh,	0F577AD59h
		dd 0C009F3A1h, 0F28EC01Fh, 0C0317E40h, 0AFCD801Dh, 0C00DF0ADh
		dd 3CF5A5A6h, 0C0211C96h, 0F3E03928h, 0BFF53C6Eh, 0B53B8E61h
		dd 401AB6BAh, 32379888h, 40021C55h, 7B2D3CB8h, 402D3AE7h
		dd 0BBF01DCh, 3FF0E11Fh, 57FB9E0Ah, 0C0135008h,	0A1EA4895h
		dd 0BFFB3251h, 9CE85440h, 400F1FD8h, 945B9D46h,	3FF56503h
		dd 7EC907D0h, 40230AA2h, 0C02558C2h, 3FFB2732h,	4F73A32Ch
		dd 403313C3h, 0AA2B9E58h, 4002E122h, 0F7EDD9D0h, 3FF0D686h
		dd 0CD73AB28h, 400BE9DEh, 4EDEC8BBh, 0C0126037h, 0D01DBCE8h
		dd 0C00D1364h, 8829528Bh, 402D7F39h, 32563ADAh,	3FF5A6A8h
		dd 3C586BA0h, 4028DEC8h, 0D9F9A2F9h, 3FF920AAh,	7B2242C5h
		dd 0C01FB02Fh, 92CE840Eh, 0C0160A6Dh, 555C4DC5h, 402DAB27h
		dd 0EC436629h, 3FF12183h, 442A0FAFh, 0C03162F7h, 658B8BAEh
		dd 0C0083DC0h, 0FE37EDFEh, 0C037D145h, 7AB0D273h, 0C005791Eh
		dd 0EDAB2D9Ch, 0C018F4B4h, 0CE08B4E5h, 0C007E477h, 0E27776F0h
		dd 3FDCA4E6h, 1C1A7B0Dh, 3FEED5C3h, 9DD9D76h, 40402772h
		dd 53482ED4h, 40060AE2h, 87C86127h, 4001C649h, 8C1A3FBFh
		dd 0BFF4309Ch, 76D83BD5h, 0C000F8C3h, 0ACCD5CD0h, 400F77E3h
		dd 73AC97F8h, 0C017C81Ah, 333D6D08h, 0BFE8DDE1h, 0E702B8F2h
		dd 3FF189ADh, 0C915C3D1h, 0C0017CE2h, 822137D8h, 0C0007871h
		dd 5CD03AF8h, 3FF16A9Dh, 0B97862C6h, 0C0004AF2h, 0A8C2E328h
		dd 4010220Fh, 0C1A47B9Fh, 0BFFCE976h, 0CB7EB594h, 0C01DBE1Fh
		dd 0AD12A740h, 0C0173B10h, 47B40007h, 0C00A9D66h, 0F2CA93AAh
		dd 0BFEEF65Fh, 0C396859Dh, 0C005AA9Bh, 85E9182Fh, 0BFF406F3h
		dd 1DAB033Bh, 0BFC9A682h, 0D27520D9h, 400C6F15h, 0E800CB61h
		dd 0C028D408h, 82897BE6h, 0C0030868h, 4E853A9Ah, 0BFC8907Ah
		dd 3B541659h, 0C01458BBh, 912C9BCFh, 0C01B6333h, 0B43F5000h
		dd 0BFB9C1A0h, 8C5B2A0Eh, 0C00509DBh, 0D1E6BEF0h, 0C02A4835h
		dd 638A05C4h, 40259E1Dh, 20209118h, 0BFE94BD9h,	58FF1601h
		dd 0BFEB688Eh, 0DCBA9443h, 0C014026Fh, 2E60DFF3h, 400AD8D5h
		dd 434C644Bh, 3FC6654Ch, 362EF111h, 401341FFh, 38768D89h
		dd 0BFF39753h, 0D08C6063h, 0C000D2E2h, 8AF5A091h, 4004D864h
		dd 0FD8D7776h, 0BFF8B0A4h, 1F69B713h, 0C0008CBCh, 0FBF675E3h
		dd 4019D861h, 0C7FDC2F2h, 0BFFE5B8Bh, 0FA2AED44h, 0BFE2F424h
		dd 9E5498C8h, 0BFFE12EAh, 266B6FA4h, 0C0081B9Ch, 40D8670h
		dd 0BFF89ADAh, 648E2C7Fh, 0BFEA7A77h, 0DE403B9Eh, 0BFEBE140h
		dd 0FD943EC5h, 0C0101B9Ch, 0E129A9FEh, 0BFFC7514h, 0B788708h
		dd 3FE5E14Ah, 5A6F1E2Ah, 0C0095772h, 0C706C547h, 0C000C5ECh
		dd 7A473257h, 0C000779Bh, 2C6C8BAFh, 3FF6EA05h,	4754CAC9h
		dd 3FDDF91Ch, 1EEF72Fh,	0BFFD0C63h, 98C85F12h, 0BFFE2CA6h
		dd 34D31318h, 40187749h, 0DA3B96BEh, 0BFF1BDEFh, 0ED585E2Bh
		dd 0BFE79884h, 9E282909h, 0BFF93D8Ch, 0CBA897BCh, 400B80A3h
		dd 0B994B5C0h, 0C0066728h, 7195942Dh, 0BFF1AEAEh, 556CA0ECh
		dd 40013FDDh, 0CC94A801h, 0BFFCD5C7h, 0BCBCC96Eh, 0BFFFF1C3h
		dd 10848F5Bh, 3FE23A37h, 0C5DC3266h, 0C011A395h, 6861747Bh
		dd 0BFE75E42h, 22B2774Dh, 0BFD4EE4Eh, 0A07DAD29h, 0C000DD30h
		dd 8016A52Eh, 0C00354BAh, 9237B040h, 3FB6F335h,	0AE5A50A2h
		dd 0C0114773h, 5BBC5EF2h, 3FF340A6h, 27970842h,	0BFFF9C8Fh
		dd 15D85F86h, 402D8BB0h, 0BB5416AEh, 0C02F512Dh, 382F12F8h
		dd 0BFF5CC33h, 0FE278D5h, 0BFC3695Eh, 0DE7A586Fh, 0C0025D01h
		dd 0AA1FE27Bh, 0BFF7CDB7h, 822FFE6Dh, 3FE4A9CAh, 54C1D595h
		dd 3FF5D048h, 696EB68h,	0C01112B5h, 83504AD5h, 0C0045909h
		dd 0BD657311h, 0BFE75353h, 0E5C410h, 0C00A9AE6h, 0E1630199h
		dd 0C010346Bh, 98148F3Bh, 0BFEC73BAh, 0F1B5E299h, 0C00280A4h
		dd 5459AB52h, 0C01AEE9Dh, 4D654A9Eh, 40039444h,	0BB14DFCh
		dd 0BFE465A9h, 0D6CA15AEh, 0BFEB9FFBh, 0DD1E2AD5h, 0C00AC830h
		dd 35C53748h, 3FF9A06Ch, 68986736h, 3FC9DFC7h, 0B8F60240h
		dd 0BFFF258Ah, 2BF80AD0h, 0C0049422h, 19F6F81h,	3F8E45C2h
		dd 6224E093h, 3FC14C75h, 5BB8D52Eh, 0C024D05Bh,	6B8C9D5Bh
		dd 400F831Ch, 0B86D09DDh, 0C000A6DCh, 879864EEh, 0C02AEAB6h
		dd 552DD0B0h, 0BFA0D1C1h, 0C9DAAD5Dh, 0C0198BEEh, 0A80BF6B7h
		dd 0C0001C98h, 0AF977817h, 0C0030678h, 97029DB1h, 0BFE1D9B9h
		dd 84C06D6Ch, 0BFD1D05Fh, 12A0EFEDh, 0BFF565CDh, 49B9A303h
		dd 40140302h, 9068AFC1h, 0BFD292B7h, 5A23480h, 0BFF98EDCh
		dd 752B1D83h, 0BFEA73E3h
		dd 65F7AC3h, 3FD24770h,	0C25EDD9Ch, 0C0010472h,	0D24F7D47h
		dd 0BFD63D09h, 5E46D8ABh, 4013F7F5h, 9B22B173h,	0BFD2F9BEh
		dd 32784AF2h, 3FCCEEB5h, 4ED9518Ch, 4014C8E8h, 4403D47Eh
		dd 0BFDEF1F3h, 0C89FCE04h, 0C00E8F3Dh, 3DFC50ADh, 0BFC6D97Eh
		dd 9AC76E68h, 0C000F3EBh, 76307E50h, 401DCE74h,	5F43E36Ah
		dd 400FC644h, 0B29D45Bh, 0BFD285C4h, 17370179h,	0C007D505h
		dd 0A2280B55h, 3FE570FAh, 2AFCD7E4h, 3FFE7C32h,	0D8ACB7B6h
		dd 0BFD20462h, 0C0C2436Fh, 3FE1C571h, 3B7541B7h, 0C007FE33h
		dd 0E474EAC3h, 0C0098E6Fh, 0D4682A5Ch, 3FE57799h, 0FFA21EE5h
		dd 0BFF69B6Fh, 0A1C578A8h, 40343552h, 0C3F71889h, 0C005C1CEh
		dd 4345616Bh, 0C022F60Ah, 0D20003A3h, 0BFF6695Bh, 61557119h
		dd 0C0138CA3h, 96C5F3DBh, 0C007A8C4h, 53856723h, 0C007AB1Dh
		dd 93DC2398h, 0BFD4F38Ah, 674966CFh, 0C0084F67h, 0CAF334C2h
		dd 0BFCE10ABh, 4E51E797h, 40212D6Eh, 0F060B2B6h, 0C00ED14Ah
		dd 0D57C6204h, 0BFD00DB2h, 0A332C1D0h, 0C01F1B53h, 0E01553BBh
		dd 40032B7Ch, 0DD8E8AE0h, 0BFD3B7EFh, 68345F0Ah, 0C008DC0Bh
		dd 0F9BDC059h, 0C00C26D6h, 8D808190h, 0C012EABFh, 55F23B18h
		dd 0BFC7C900h, 0CA0A5748h, 0C00A7EFDh, 464E6BEh, 0C02964B8h
		dd 0B9A268F5h, 400BF217h, 9A39FD5Fh, 3FC42698h,	9BDCCB6Eh
		dd 0C00A4728h, 0A2E4F58Fh, 0C00E1666h, 0F3CE00CFh, 0BFEA3770h
		dd 0F5985C06h, 0BFD5F12Fh, 0A6B43F19h, 0C00FADFEh, 0FFA17AE8h
		dd 0C006888Eh, 5B63F385h, 0C0093F24h, 0A2B96716h, 40311514h
		dd 0AC096F12h, 0BFE5C2BBh, 44131D27h, 0C01ABA6Fh, 7819F281h
		dd 0C00A14F0h, 1D4FAA2Bh, 0BFF5F92Ch, 36ED765Ch, 0BFE18FFCh
		dd 2B1E16B1h, 0BFE58A63h, 0F69D2EBh, 0C00C5AF9h, 0AD38D19Dh
		dd 0C018BAC7h, 0FB1EB69Ch, 0BFE75AD1h, 590DC734h, 0C00A7D0Dh
		dd 0BA416A29h, 0C0034798h, 0B9E380E5h, 0BFF20F67h, 0EC427C6Ch
		dd 0C0092F03h, 2A1134BFh, 0BFDB00C8h, 0D7824C39h, 40109568h
		dd 969CF4B5h, 0BFF09497h, 2C41636Dh, 0BF9124FAh, 5CFA226Ch
		dd 0C018FC02h, 9DF10B82h, 0BFEA24C2h, 0E7CE78E7h, 0C0040EC4h
		dd 38D0BF7Eh, 0BFDF00FFh, 89887C1Ah, 0C0062450h, 312DC6A4h
		dd 4034FE3Eh, 73FABB16h, 40102C14h, 0CDF1773Bh,	0BFE343BDh
		dd 4743B82Ah, 0C00D10F7h, 1A32CCD9h, 0C014EF1Eh, 23E2EB7Bh
		dd 0BFE6A96Dh, 0B5A78FD0h, 3FA216CEh, 1B8C0C71h, 402D08FEh
		dd 39E8340Dh, 0C00644CDh, 0F5E5A2D5h, 0C01043A7h, 0AE86BC09h
		dd 403043BCh, 69453942h, 0BFDAE251h, 0F56D386Bh, 0C028D3D5h
		dd 5A480772h, 0C00BCCA6h, 85875E3Ch, 0BFFFF2F0h, 0B0CA968h
		dd 0BFD00CB0h, 655472Ah, 0BFFA40F5h, 829AAADh, 0C00E64AFh
		dd 0E4865E9Ch, 0C0153C39h, 0C69D4F41h, 3FC45293h, 0F46CB4DFh
		dd 0C01063E6h, 0E3520E74h, 0C0031E05h, 0E288A14h, 0BFD1480Ah
		dd 1D96B38Ch, 0C0102A65h, 1A04EEh, 0BFD86252h, 6471A5E9h
		dd 3FFFD35Fh, 0B411D1FAh, 3FA9267Eh, 0D5719787h, 3FAB02FDh
		dd 0FB8CCD56h, 0C014F60Eh, 0F5014274h, 0BFF59A2Bh, 0B0F79925h
		dd 0C011D7CFh, 8E562FD1h, 0BFD7EF85h, 4896E02Ch, 0C00A552Bh
		dd 0C3E230AEh, 4025DF05h, 6B8DD386h, 40077E9Ah,	198ACBCFh
		dd 0BFE14B74h, 4DEEEA10h, 0C0048FEEh, 4DB40A0Eh, 3FF98BDCh
		dd 58A4D873h, 3FE18EAFh, 6128C88Dh, 0BFE8176Ch,	0BD82F596h
		dd 3FE58984h, 0F39CA235h, 0BFFFFCAEh, 0A6BA2912h, 0BFFE8231h
		dd 50E62298h, 3FEE4E17h, 0A11DC413h, 0BFF5D61Dh, 50345895h
		dd 401D4537h, 33AE3740h, 0C0013D05h, 41C20C3Eh,	0C0348349h
		dd 0CAD86205h, 0C0041159h, 7E521408h, 0C0176224h, 6404F644h
		dd 0BFF762BDh, 98BD8B0Ah, 0C0050B41h, 0F14AA1B7h, 0BFEA7911h
		dd 0E14F0902h, 0BFFC806Bh, 2BE1F6EBh, 40008510h, 94D25BAAh
		dd 0BFFFEDDAh, 81E23877h, 0C0058ECAh, 0FF6CC470h, 0BFCD54A8h
		dd 91397EE4h, 0C0158E1Bh, 0E1511291h, 0BFBCF4BFh, 59022446h
		dd 0BFB6D877h, 22E36775h, 0C0062024h, 0F49F2D6Ah, 0C0174A67h
		dd 65E55634h, 40272CFBh, 0B7A40CC9h, 0BFE9A9A5h, 145C9D4Fh
		dd 0C000A5ADh, 8158E718h, 0C01C6760h, 83BDAB7Bh, 4004E87Fh
		dd 0DA9E99E8h, 0BFBBFAA8h, 0DC7D18E7h, 0C001414Ch, 570920B8h
		dd 0C018DFE4h, 2E9F039Bh, 400C6BF2h, 8B1CFC28h,	0BFBB86AFh
		dd 2BD98334h, 401169F4h, 91B5FD5Eh, 0C00B6BBDh,	3B555C78h
		dd 0C0057719h, 0DD7D1AC7h, 400DE8F7h, 61689FC6h, 0BFE6B276h
		dd 67B9A464h, 401A2F93h, 6F39D589h, 0C005D0CFh,	76F7E925h
		dd 0C013DE9Fh, 0C6D95237h, 0BFF75DA1h, 499C87Dh, 0C0090C40h
		dd 0C50B2EF7h, 0C0042179h, 0AE6520ADh, 0C011A89Ah, 2F35C2Bh
		dd 0BFE290BCh, 0D07ECD49h, 0C0053841h, 75E03015h, 0BFD85BAAh
		dd 0FF50A903h, 402011D5h, 6325DEC5h, 0C004553Eh, 35C373FEh
		dd 0BFE1B404h, 7650394Dh, 0C019BB66h, 0AA5491BEh, 4013471Dh
		dd 0F45DED7Fh, 0BFD0C5D2h, 0E67AF52Dh, 0C0122D7Dh, 0AE1866D6h
		dd 0BFFD20EBh, 7A1893F4h, 0C031AB3Ah, 6C657A6h,	0BFD36D46h
		dd 1DBE4BEEh, 0C004348Ah, 69676957h, 0C03324A3h, 0EFF8EAE4h
		dd 40037C0Ah, 0D868AD1h, 0BFBF0D43h, 0A4F00393h, 0C0030926h
		dd 0AE48AF14h, 0C0166DCDh, 95E0A0DFh, 4001163Fh, 4BCA2F52h
		dd 0BFC270E2h, 34139746h, 40207C73h, 45514932h,	0C0055B2Eh
		dd 650CD5FFh, 0C0039381h, 0A01DAA0Fh, 402323BAh, 8A251E67h
		dd 0BFEFA201h, 0CE59F31Dh, 0C02F36CFh, 0FD86C3C7h, 0C0055C48h
		dd 0A68595C4h, 0C004F114h, 0A44329E5h, 0BFE0228Fh, 734239A5h
		dd 0C003A6CDh, 55DA6277h, 0C00483CCh, 0B43801FDh, 0C00B1708h
		dd 139E87AFh, 0BFC241C5h, 9C551FF0h, 0C0046953h, 1EC7925Fh
		dd 0BFE80572h, 16B24224h, 4010EAE5h, 0FE7087E7h, 0C0010858h
		dd 0E67E9313h, 0BFE3CDE7h, 7D4ECEEAh, 0BFE42DB4h, 9971C113h
		dd 400995F6h, 0C90DBCE7h, 0BFE480CDh, 5324436Eh, 0C00BEA17h
		dd 0F032D44Eh, 0BFFA17E5h, 3AE3B685h, 0C0217F13h, 48A6F0B8h
		dd 0BFC17863h, 80204805h, 0BFFC16DDh, 490832DBh, 0C0280FC5h
		dd 4CF79D99h, 3FF936A7h, 0FBEF6Dh, 0BFEBD022h, 74BD2F7Bh
		dd 0BFF1D111h, 32A03739h, 3FE17CBCh, 0C786B633h, 0C002E599h
		dd 5B402275h, 0C0209BE3h, 0C5F21918h, 0BFE9FE83h, 0AFD0AB33h
		dd 0BFFFD2E2h, 8932325Dh, 0BFEEA2DCh, 61DC9BE8h, 0BFDEF5E0h
		dd 0F25B61A2h, 4026A3EDh, 2E2E0F1Ch, 0BFD84BFCh, 0C6AF4C2Eh
		dd 0BFFBE935h, 0B6CA4AEFh, 3FF4F6BDh, 0FEE0DA4h, 400C979Ah
		dd 4EFD2E01h, 3FE272FFh, 3FBBA06h, 0BFF51652h, 852B4347h
		dd 0BFFE62F0h, 0B6413535h, 0BFF3DF61h, 71057302h, 0C0015B3Ah
		dd 690C383Ch, 0C00E68D5h, 0D84BFAC1h, 0C001ABE3h, 3BFE9FD9h
		dd 0BFF9D4F3h, 78AC454Bh, 0C003D77Bh, 0D2911F68h, 0BFFB0FF9h
		dd 9D56C96h, 0C006D572h, 461246B6h, 0C00B8857h,	0FA398213h
		dd 0C0011970h, 0D5640EFh, 3FF76C7Eh, 0B0F7B506h, 0BFD0B8FCh
		dd 21652A0h, 0C019FC4Dh, 0F75FD11Ah, 0BFF4E256h, 0F7FB2BA2h
		dd 0BFFC5571h, 4D1D626Dh, 4000702Ch, 4CDFAB04h,	0BFB311CBh
		dd 633D9442h, 0C00016FBh, 5D0F542h, 0BFF39C52h,	28333041h
		dd 0BFE9FC8Eh, 0ADBB431Ch, 0BFC1F21Fh, 5E2B79E1h, 0C0333935h
		dd 2BEDE659h, 3FBA5CE4h, 6F22ABD4h, 0BFFD66D2h,	33D9C01Dh
		dd 4026FEDBh, 93ABB9E5h, 0BFCC4165h, 663E5AE9h,	0C002F819h
		dd 596FD182h, 0BFF6687Dh
		dd 12155E96h, 0BFF45313h, 0D2931DC4h, 0BFC1D031h, 0A7EBD0C2h
		dd 0BFE7C9EAh, 0FD18306h, 0BFFA3E95h, 0A49CC307h, 0BFD580AFh
		dd 8CF24767h, 0BFD4FD78h, 0AC2D02C3h, 0BFFD335Dh, 0B5DC7A9h
		dd 0BFF2775Eh, 0F05E0A30h, 0BFED7B49h, 0E95BDD55h, 0BFFF20AFh
		dd 126AD08Dh, 0BFCD3993h, 0F4AF7BBEh, 40132E33h, 5528D91Dh
		dd 0BFF3E1A6h, 66C05B1Bh, 0BFD2F3B2h, 4F869217h, 0BFD5E8B0h
		dd 0CF0FF21h, 0BFD7F2E3h, 92C33CF5h, 0BFF8F6A1h, 5DB382FBh
		dd 0BFB2070Ch, 43C515EEh, 0BFF7C31Fh, 3B996FE9h, 402298FFh
		dd 8A12DE9Ah, 40072FD4h, 25594A6Eh, 0BFEAC306h,	923D7260h
		dd 0BFFFC729h, 94B293ECh, 3FBD81C4h, 3C638A4Ah,	0C00AEB0Bh
		dd 95DAA68Eh, 0C01AB73Ch, 3192D550h, 0BFED8263h, 0A1AC210Ch
		dd 0C0014EF1h, 0FFA8834h, 0C0006738h, 21BD76D8h, 0BFEA1664h
		dd 622CE50Ah, 0C020D7D8h, 0A1DE8FCEh, 0BFE7C594h, 99506013h
		dd 0C0009874h, 0E30E8670h, 4004E0FBh, 0F77E5445h, 4028C629h
		dd 7AF25031h, 3FF81BC9h, 808653A3h, 400A907Ah, 1CBA65DBh
		dd 0C004AC5Ch, 4B67105h, 0C01149B7h, 4055382Ch,	0BFD6648Fh
		dd 0BA0E29C4h, 0C016B7A4h, 8451E793h, 0C0082E0Ch, 4B9D0725h
		dd 0C0007029h, 0BBC98385h, 0BFE7CE94h, 386B49DFh, 0C005A3EFh
		dd 7DD96249h, 0C00BC933h, 3479AFF9h, 0BFF7CB55h, 0BD411032h
		dd 0C0029E02h, 18B5B706h, 400E5263h, 558D4608h,	0BF651D57h
		dd 0AD02C61Eh, 0C00CE57Bh, 5763E85Dh, 0BFFE5BDBh, 778F9D2Bh
		dd 0BFFA601Ah, 1281ED82h, 400AC446h, 0AF2A8F2h,	0BFF69C24h
		dd 5727ADA9h, 0C0052A43h, 4E5BD160h, 3FE3A8C0h,	6B0D918h
		dd 0C0126E0Ch, 4708584Eh, 0C00320DEh, 2E02E4AEh, 0BFED6A1Ah
		dd 0A9A6DB7Fh, 0C0031948h, 0B0DB6E7Fh, 0C00230D8h, 0D199DE8Eh
		dd 0BFE04134h, 222A0B7Ah, 0C02A335Ch, 28BE3021h, 0BFCC9DC7h
		dd 0ABF776A3h, 0BFFDA871h, 59C1E0A8h, 4021179Ch, 0A6F2A4F3h
		dd 0C0230A27h, 31AB11EEh, 400210A2h, 0C3EB0208h, 3FFB1D6Ch
		dd 0A64E26A6h, 0C0040DA2h, 5DE34A17h, 0C0063DA6h, 0C645ED6Ah
		dd 3FD55C1Dh, 0DFEA8138h, 0C0164F2Dh, 0B273D935h, 0C00CFFD8h
		dd 0E6551245h, 0C0041D0Eh, 4378C97Bh, 0BFCA16CBh, 8F722C73h
		dd 0C00680E1h, 746A1771h, 0C00F9853h, 4E36496Ah, 0BFE71DCFh
		dd 79DE88E3h, 0C0039623h, 7C38F4F2h, 4024FA8Ch,	58351A73h
		dd 3FE91A6Fh, 0D50AD620h, 0BFF97149h, 55A9F370h, 0BFF559C5h
		dd 80460996h, 0C002B889h, 1698D7ABh, 4002915Ch,	0A9098201h
		dd 3FC336CEh, 383491D0h, 3FF08647h, 0B414F5FBh,	3FC3A997h
		dd 0B525CD48h, 0C0025A20h, 926CE806h, 401A2E53h, 801AF4E1h
		dd 0BFEC3687h, 3CD2BC45h, 0C00169D4h, 1E76A0DBh, 3FEF9BC5h
		dd 0C0C8EF02h, 0BFE2C322h, 2918912Ah, 400E50DFh, 8557E311h
		dd 0BFE5AF06h, 0B37542D5h, 0BFFE6EB7h, 474C5BE3h, 0BFCA7557h
		dd 7EF95100h, 3FF56197h, 2F8ECFD0h, 3FDADA45h, 0AE7D99ECh
		dd 0C0153FAFh, 52C66221h, 0BFFEFF16h, 4AE928B1h, 3FF3D919h
		dd 12E3FC00h, 0C00D1863h, 962F7AFEh, 0C003145Ah, 0A88C55EFh
		dd 0C0001D3Ah, 0E3F555BDh, 3FDD2F2Eh, 0E34B11FEh, 0C01920AFh
		dd 3C2E2F32h, 0BFFF8BC9h, 0F6D470FAh, 0C0014786h, 26DE4793h
		dd 0C020FCEDh, 11FE80D1h, 0C000B91Ch, 0F88ACD5Eh, 3FE1DB52h
		dd 0A858934Eh, 0BFEAA39Ch, 477BBA5Ch, 0BF86F1D6h, 0DB8277F7h
		dd 0C0012E84h, 0DE58EEFCh, 0BFF8AF1Bh, 0EE3B17E9h, 3FD732B6h
		dd 9152B986h, 3FE210D1h, 0C2EEF27h, 0C00D7DB0h,	15495F53h
		dd 0BFD4190Fh, 9725038Dh, 0BFDD13DEh, 5CEA8904h, 3FE6A036h
		dd 0A37CA3BBh, 3FBD0C47h, 0CA445D11h, 0BFDB0A85h, 25081D35h
		dd 0C01051D6h, 98EDB762h, 0BFC3CC67h, 34A1BD27h, 3FE41C0Dh
		dd 57FDC355h, 0BFDA91CBh, 0C6EE4F8h, 0BFFDD013h, 0B4A3F649h
		dd 3FD1FBE1h, 19F40D90h, 3FE502A7h, 54F40FDDh, 3F9A1C95h
		dd 0F5EE43ABh, 0BFFA1A63h, 2A153C19h, 0BFD0F1F7h, 0DFBC5640h
		dd 3FF2D1FFh, 17AC2341h, 0BFF3010Fh, 0C697E157h, 0BFEA6CE2h
		dd 721438D8h, 0BFEC568Ah, 8929115h, 0C0027324h,	3DC352Dh
		dd 40019B5Bh, 0F793F55Dh, 0BFD2DB20h, 583354DAh, 0BFD293F5h
		dd 4EECF3B2h, 3FF9C161h, 3869D4A5h, 0BFE7E3FBh,	0C1C5FD76h
		dd 3FD01B9Fh, 0EA891BE0h, 3FB43D90h, 2D97E569h,	3FEFC735h
		dd 57C8FD60h, 0BFF025F6h, 0A12A5EB7h, 0BFE3BF8Eh, 9875h
		dd 3 dup(0)
		dd 2 dup(1)
off_411CF8	dd offset off_408244	; DATA XREF: .rdata:00408E90o
					; .rdata:off_408EB0o
		align 10h
a_?avtype_info@	db '.?AVtype_info@@',0
off_411D10	dd offset off_408244	; DATA XREF: .rdata:00408ED8o
					; .rdata:off_408EFCo ...
		align 8
a_?avbad_alloc@	db '.?AVbad_alloc@std@@',0
off_411D2C	dd offset off_408244	; DATA XREF: .rdata:00408F24o
					; .rdata:off_408F4Co ...
		dd 0
a_?avbad_array_	db '.?AVbad_array_new_length@std@@',0
		align 4
off_411D54	dd offset off_408244	; DATA XREF: .rdata:0040998Co
		dd 0
a_?avruntime_ex	db '.?AVruntime_exception@Concurrency@@',0
off_411D80	dd offset off_408244	; DATA XREF: .rdata:00408F74o
					; .rdata:off_408F7Co ...
		align 8
a_?avexception@	db '.?AVexception@std@@',0
		dd 9 dup(0)
dword_411DC0	dd 0			; DATA XREF: start-13Fr start-12Fw ...
dword_411DC4	dd 0			; DATA XREF: sub_405C25+13o
					; sub_405DB4+14o
dword_411DC8	dd 0			; DATA XREF: sub_405C93+20o
					; sub_405C93+52o ...
		dd 2 dup(0)
dword_411DD4	dd 3 dup(0)		; DATA XREF: sub_405C93:loc_405CC6o
					; sub_405C93+73o
byte_411DE0	db 0			; DATA XREF: sub_405C5A+9w
					; sub_405DD1+3r
		align 4
dword_411DE4	dd 0			; DATA XREF: sub_406194+3w
					; sub_406194+37w ...
dword_411DE8	dd 0			; DATA XREF: sub_406194:loc_406253r
					; sub_406194+C8w ...
dword_411DEC	dd 0			; DATA XREF: sub_40633E+2Aw
					; sub_40633E+10Fw
; union	_SLIST_HEADER ListHead
ListHead	_SLIST_HEADER <0>	; DATA XREF: sub_406613o
dword_411DF8	dd 2 dup(0)		; DATA XREF: sub_406644o
dword_411E00	dd 2 dup(?)		; DATA XREF: sub_40664Ao
dword_411E08	dd ?			; DATA XREF: .text:004067B3w
					; .rdata:off_408294o
dword_411E0C	dd ?			; DATA XREF: .text:004067BDw
		dd ?
dword_411E14	dd ?			; DATA XREF: .text:004067AEw
dword_411E18	dd ?			; DATA XREF: .text:004067C7w
dword_411E1C	dd ?			; DATA XREF: .text:004067D7w
		dd 0Eh dup(?)
dword_411E58	dd ?			; DATA XREF: .text:0040679Fw
					; .rdata:00408298o
		dd 22h dup(?)
word_411EE4	dw ?			; DATA XREF: .text:00406773w
		align 4
word_411EE8	dw ?			; DATA XREF: .text:0040676Cw
		align 4
word_411EEC	dw ?			; DATA XREF: .text:00406765w
		align 10h
word_411EF0	dw ?			; DATA XREF: .text:0040675Ew
		align 4
dword_411EF4	dd ?			; DATA XREF: .text:0040674Aw
dword_411EF8	dd ?			; DATA XREF: .text:00406744w
dword_411EFC	dd ?			; DATA XREF: .text:0040673Ew
dword_411F00	dd ?			; DATA XREF: .text:00406738w
dword_411F04	dd ?			; DATA XREF: .text:00406732w
dword_411F08	dd ?			; DATA XREF: .text:loc_40672Dw
dword_411F0C	dd ?			; DATA XREF: .text:00406784w
dword_411F10	dd ?			; DATA XREF: .text:0040678Cw
					; .text:004067A9r
word_411F14	dw ?			; DATA XREF: .text:00406757w
		align 4
dword_411F18	dd ?			; DATA XREF: .text:0040677Bw
dword_411F1C	dd ?			; DATA XREF: .text:00406794w
word_411F20	dw ?			; DATA XREF: .text:00406750w
		align 4
		dd 87h dup(?)
dword_412140	dd ?			; DATA XREF: sub_402990+18Fr
					; sub_402990+195w ...
dword_412144	dd ?			; DATA XREF: sub_401DF0+Ao
					; T2():loc_402470r ...
dword_412148	dd ?			; DATA XREF: sub_4034B0+143r
dword_41214C	dd ?			; DATA XREF: sub_4034B0+153r
dword_412150	dd ?			; DATA XREF: sub_401E80+12w
					; sub_401E80+9Ar ...
dword_412154	dd ?			; DATA XREF: sub_401E80+1Cw
					; sub_401E80+95r ...
dword_412158	dd ?			; DATA XREF: sub_401E80+26w
					; sub_401E80+8Fr ...
dword_41215C	dd ?			; DATA XREF: sub_401E80+30w
					; sub_401E80:loc_401F09r ...
		dd 8 dup(?)
qword_412180	dq ?			; DATA XREF: sub_401E80:loc_401EF2w
					; sub_401E80+F5w ...
		dd 3Eh dup(?)
dword_412280	dd 40h dup(?)		; DATA XREF: T2()+3Co
dword_412380	dd 8000h dup(?)		; DATA XREF: T0()+4Do
; void *Dst
Dst		dd ?			; DATA XREF: sub_401C50o
					; sub_401C50+24w ...
		align 10h
; size_t Size
Size		dd ?			; DATA XREF: sub_401C50+1Aw
					; sub_404110+9r ...
dword_432394	dd ?			; DATA XREF: sub_401C50+10w
					; sub_404110r ...
dword_432398	dd ?			; DATA XREF: sub_4068D0:loc_406A18o
					; sub_4068D0+161r
dword_43239C	dd ?			; DATA XREF: sub_40667Fo
dword_4323A0	dd 318h	dup(?)		; DATA XREF: sub_406679o
_data		ends

; Section 4. (virtual address 00033000)
; Virtual size			: 0000004C (	 76.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0000F800
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_gfids		segment	para public 'DATA' use32
		assume cs:_gfids
		;org 433000h
		dd 13h,	0Ah, 0Dh, 10h, 45h, 73h, 4Eh, 50h, 4Eh,	57h, 4Eh
		dd 5Dh,	54h, 55h, 5Ah, 5Bh, 34h, 0Ch, 0Ah, 6Dh dup(0)
		align 1000h
_gfids		ends


		end start
